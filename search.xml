<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue2顶部固定且高度可变，如何让页面内容自适应高度</title>
    <url>/2023/07/10/vue2-fix-header/</url>
    <content><![CDATA[<!-- # Vue顶部固定且高度可变，如何让页面内容自适应高度 -->
<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p><strong>Vue2</strong><br>页面顶部有个页头，正常情况下只显示页面标题，需要筛选item时可以展开筛选框。<br>无论展开还是折叠，整个页头都是固定在顶部的。  </p>
<span id="more"></span>

<p><img src="/2023/07/10/vue2-fix-header/img_1.jpeg" alt="page-img1" title="正常情况下的页面"><br><img src="/2023/07/10/vue2-fix-header/img_2.jpeg" alt="page-img2" title="展开筛选框情况下的页面"></p>
<h2 id="自定义组件PageContainer"><a href="#自定义组件PageContainer" class="headerlink" title="自定义组件PageContainer"></a>自定义组件PageContainer</h2><h3 id="header和content的插槽"><a href="#header和content的插槽" class="headerlink" title="header和content的插槽"></a>header和content的插槽</h3><p>实现Vue2自定义组件PageContainer，template中写了header和content的插槽。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    // headerRef，在js/ts代码中获取该dom的高度</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;headerRef&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;headerSlot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    // 根据headerRef的高度修改state.contentHeight</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-content&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: state.contentHeight&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&#x27;@/style/header-search.scss&#x27;</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page-header</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e8eef2</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.page-content</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用MutationObserver监听高度"><a href="#使用MutationObserver监听高度" class="headerlink" title="使用MutationObserver监听高度"></a>使用MutationObserver监听高度</h3><p><code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力。  </p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver</a></p>
</blockquote>
<p>使用<code>MutationObserver</code>监听header的高度：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">Vue</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// observer 监听配置</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/observe</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">attributes</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">childList</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">subtree</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">MutationObserver</span> <span class="keyword">extends</span> <span class="title class_ inherited__">window.MutationObserver</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;page-container&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">PageContainer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  private state = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始默认高度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">contentHeight</span>: <span class="string">&#x27;calc(100vh - 78px)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  private <span class="attr">observer</span>: <span class="title class_">MutationObserver</span> = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取header高度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> header = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">headerRef</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">contentHeight</span> = <span class="string">`calc(100vh - <span class="subst">$&#123;header.clientHeight&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取header中‘折叠/展开’的按钮（当点击该按钮时，header高度改变，此时需要改变content高度）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;filter-button&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!element) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList, observer</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> header = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">headerRef</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> headerHeight = header.<span class="property">clientHeight</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">contentHeight</span> = <span class="string">`calc(100vh - <span class="subst">$&#123;headerHeight&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个‘折叠/展开’按钮（element）样式改变时，会调用observer更新页面内容的高度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">observe</span>(element, config)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Destoryed</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">disconnect</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">takeRecords</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="页面中应用组件"><a href="#页面中应用组件" class="headerlink" title="页面中应用组件"></a>页面中应用组件</h2><p>在页面中引入自定义组件PageContainer：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PageContainer</span>&gt;</span></span><br><span class="line">    // slot 插入header内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-left&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;header-title&quot;</span>&gt;</span>页面header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;filter-button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onChangeSearchVisible&quot;</span>&gt;</span></span><br><span class="line">              筛选</span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;state.formVisible == true ? `el-icon-caret-bottom` : `icon-arrow`&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;state.formVisible&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header-search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;formRef&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">change</span>=<span class="string">&quot;onSubmitSearch&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">change</span>=<span class="string">&quot;onSubmitSearch&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;学校&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">change</span>=<span class="string">&quot;onSubmitSearch&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;学院&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">change</span>=<span class="string">&quot;onSubmitSearch&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;专业&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;major&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">change</span>=<span class="string">&quot;onSubmitSearch&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;导师&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">change</span>=<span class="string">&quot;onSubmitSearch&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">clearable</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    // slot content 页面内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in [0, 1, 2, 3, 4, 5, 6, 7, 8]&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green; height: 150px; margin: 20px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 70px&quot;</span>&gt;</span>&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PageContainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">Vue</span>, <span class="title class_">Prop</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">PageContainer</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@/components&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;fix-header&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">PageContainer</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">BatteryRequirement</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  private state = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// header搜索筛选框的可见性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">formVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 筛选表格</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">school</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">department</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">teacher</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">major</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 展开或折叠筛选弹窗</span></span></span><br><span class="line"><span class="language-javascript">  private <span class="title function_">onChangeSearchVisible</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">formVisible</span> = !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">formVisible</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  private <span class="title function_">onClearForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">form</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">user</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">current_dept</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  private <span class="title function_">onSubmitSearch</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;search筛选&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h2><p><img src="/2023/07/10/vue2-fix-header/071002.gif" alt="page-gif" title="顶部高度可折叠展开，页面内容自适应高度"></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue2</tag>
        <tag>MutationObserver</tag>
        <tag>javascript</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mpx框架搭建一个飞书小程序</title>
    <url>/2023/07/11/applet-mpx/</url>
    <content><![CDATA[<!-- # Mpx框架搭建一个飞书小程序 -->
<h2 id="Mpx-cli初始化项目"><a href="#Mpx-cli初始化项目" class="headerlink" title="Mpx-cli初始化项目"></a>Mpx-cli初始化项目</h2><h3 id="安装Mpx脚手架"><a href="#安装Mpx脚手架" class="headerlink" title="安装Mpx脚手架"></a>安装Mpx脚手架</h3><blockquote>
<p>Mpx官网：<a href="https://mpxjs.cn/guide/basic/start.html">https://mpxjs.cn/guide/basic/start.html</a>  </p>
</blockquote>
<p>全局安装:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g @mpxjs/cli</span><br><span class="line">mpx create mpx-project-name</span><br></pre></td></tr></table></figure>
<p>也可以在不全局安装脚手架情况下创建项目:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx @mpxjs/cli create mpx-project-name</span><br></pre></td></tr></table></figure>
<p>执行命令后会弹出一系列问题进行项目初始配置，根据自身需求进行选择，完成后进入项目目录进行依赖安装。  </p>
<p>安装成功后进入目录并执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd mpx-project-name</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h3 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="导入飞书小程序配置"><a href="#导入飞书小程序配置" class="headerlink" title="导入飞书小程序配置"></a>导入飞书小程序配置</h2><h3 id="project-config-json"><a href="#project-config-json" class="headerlink" title="project.config.json"></a>project.config.json</h3><p>在<code>static</code>文件夹下新建一个文件夹，命名为<code>tt</code><br>在<code>tt</code>文件夹新建一个文件<code>project.config.json</code><br><img src="/2023/07/11/applet-mpx/tt_json.jpeg" alt="page-img1" title="新建文件project.config.json"></p>
<p>文件写入，<code>appid</code>和<code>projectname</code>根据自己的项目修改，<code>appid</code>为申请的飞书小程序的appid。 </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;urlCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minified&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newFeature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babelSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disablePlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outputPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cli_a111110000011111&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;projectname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;applet-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;miniprogram&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;libVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.32.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editorSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tabIndent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;insertSpaces&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;@vue/cli-service&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">mpx</span>: &#123;</span><br><span class="line">      <span class="comment">// 这里不要改为&#x27;tt&#x27;</span></span><br><span class="line">      <span class="comment">// 去改package.json的 serve/build 命令</span></span><br><span class="line">      <span class="comment">// 为了方便后续引入vant weapp组件库</span></span><br><span class="line">      <span class="attr">srcMode</span>: <span class="string">&quot;wx&quot;</span>,</span><br><span class="line">      <span class="attr">plugin</span>: &#123;</span><br><span class="line">        <span class="attr">hackResolveBuildDependencies</span>: <span class="function">(<span class="params">&#123; files, resolveDependencies &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> packageJSONPath = path.<span class="title function_">resolve</span>(<span class="string">&quot;package.json&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (files.<span class="title function_">has</span>(packageJSONPath)) files.<span class="title function_">delete</span>(packageJSONPath);</span><br><span class="line">          <span class="keyword">if</span> (resolveDependencies.<span class="property">files</span>.<span class="title function_">has</span>(packageJSONPath)) &#123;</span><br><span class="line">            resolveDependencies.<span class="property">files</span>.<span class="title function_">delete</span>(packageJSONPath);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loader</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果希望node_modules下的文件时对应的缓存可以失效，</span></span><br><span class="line"><span class="comment">   * 可以将configureWebpack.snap.managedPaths修改为 []</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">configureWebpack</span>(<span class="params">config</span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>文件<code>package.json</code>中，在<code>serve</code>和<code>build</code>的结尾都加上<code> --tt</code><br><img src="/2023/07/11/applet-mpx/serve-tt.jpeg" alt="page-img1" title="结尾都加上` --tt`">  </p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mpx-project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mpx-cli-service serve --tt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mpx-cli-service build --tt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .js,.ts,.mpx src/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/api-proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/fetch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/pinia&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/store&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/utils&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vant/weapp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.10.19&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pinia&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-demi&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.13.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-i18n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.27.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-i18n-bridge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.10.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-transform-runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.10.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.10.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/runtime-corejs3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.10.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/babel-plugin-inject-page-events&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/eslint-config-ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/mpx-cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/size-report&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/vue-cli-plugin-mpx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/vue-cli-plugin-mpx-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/vue-cli-plugin-mpx-typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@mpxjs/webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoprefixer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.2.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.2.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.63.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.55.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stylus-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.43.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ios &gt;= 8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;chrome &gt;= 47&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>运行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>成功后出现<code>dist</code>文件夹，在飞书开发者工具中打开<code>dist/tt</code>。<br><img src="/2023/07/11/applet-mpx/dist_tt.jpeg" alt="page-img2" title="打包好的tt小程序文件包"></p>
<p>打开飞书开发者工具，选择<code>Gadget</code>-&gt;选择<code>Import project</code>-&gt;选择该项目打包好的tt文件夹-&gt;确认打开文件夹。  </p>
<p><img src="/2023/07/11/applet-mpx/open_dist.jpeg" alt="page-img3" title="在飞书开发者工具中导入项目/dist/tt"></p>
<p>成功打开<br><img src="/2023/07/11/applet-mpx/open_ok.jpeg" alt="page-img4" title="成功打开"></p>
<p>回到Vscode中继续开发项目，小程序会自动更新代码变动。</p>
<h2 id="开发一个新页面"><a href="#开发一个新页面" class="headerlink" title="开发一个新页面"></a>开发一个新页面</h2><h3 id="页面index-mpx"><a href="#页面index-mpx" class="headerlink" title="页面index.mpx"></a>页面index.mpx</h3><p>开发一个新页面<code>/pages/home/index</code><br>在<code>pages/</code>新建文件夹命名为<code>home</code>，在<code>home</code>下新建文件<code>index.mpx</code>。  </p>
<p><strong>src&#x2F;pages&#x2F;home&#x2F;index.mpx</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;home-page&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;home-button&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;goTo&quot;</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> mpx, &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&#x27;@mpxjs/core&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createPage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">goTo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;goTo&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        mpx.<span class="title function_">switchTab</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/pages/device/index&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/json&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;usingComponents&quot;</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.home-page</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.home-button</span> &#123;</span></span><br><span class="line"><span class="language-css">    // <span class="attr">--color-primary</span> 为 app<span class="selector-class">.mpx</span> 中的全局样式</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">0.1rem</span> solid <span class="built_in">var</span>(--color-primary);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">1.2rem</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="app-mpx-配置路由"><a href="#app-mpx-配置路由" class="headerlink" title="app.mpx 配置路由"></a>app.mpx 配置路由</h3><p>在<code>app.mpx</code>给这个新页面配置路由。<br><code>app.mpx</code>中，还可以配置底部tabbar、全局样式等。  </p>
<p><strong>app.mpx</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> mpx, &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;@mpxjs/core&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> apiProxy <span class="keyword">from</span> <span class="string">&#x27;@mpxjs/api-proxy&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  mpx.<span class="title function_">use</span>(apiProxy, &#123; <span class="attr">usePromise</span>: <span class="literal">true</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onLaunch</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/*此处编写全局样式*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--color-primary</span>: <span class="number">#d6d6d6</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--color-blue</span>: <span class="number">#2d72ff</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.page-bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">40px</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.flex-space-between</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/json&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;pages&quot;</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;./pages/home/index&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;./pages/device/index&quot;</span></span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;tabBar&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;list&quot;</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/home/index&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;assets/tab.png&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;assets/tab-selected.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Mpx</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>typescript</tag>
        <tag>Mpx</tag>
        <tag>小程序</tag>
        <tag>飞书小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Mpx框架开发飞书小程序，引入VantWeapp组件库</title>
    <url>/2023/07/11/applet-mpx-vant/</url>
    <content><![CDATA[<!-- # Mpx框架开发飞书小程序，引入VantWeapp组件库 -->
<blockquote>
<p>Mpx框架搭建一个飞书小程序: <a href="https://hengqu4.github.io/2023/07/11/applet-mpx/">https://hengqu4.github.io/2023/07/11/applet-mpx/</a></p>
</blockquote>
<h2 id="下载Vant-Weapp组件库"><a href="#下载Vant-Weapp组件库" class="headerlink" title="下载Vant Weapp组件库"></a>下载Vant Weapp组件库</h2><blockquote>
<p>组件库官网：<a href="https://youzan.github.io/vant-weapp/#/quickstart">https://youzan.github.io/vant-weapp/#/quickstart</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 npm 安装</span></span><br><span class="line">npm i @vant/weapp -S --production</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 yarn 安装</span></span><br><span class="line">yarn add @vant/weapp --production</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 0.x 版本</span></span><br><span class="line">npm i vant-weapp -S --production</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="页面中引用vant组件"><a href="#页面中引用vant组件" class="headerlink" title="页面中引用vant组件"></a>页面中引用vant组件</h2><p>在<code>index.mpx</code>中引入要用的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/json&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;usingComponents&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;van-popup&quot;</span>: <span class="string">&quot;@vant/weapp/popup/index&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/11/applet-mpx-vant/page-vant.jpeg" alt="page-img3" title="举例，引入van-popup组件"></p>
<p>打包运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<h2 id="处理没有index-ttml的报错"><a href="#处理没有index-ttml的报错" class="headerlink" title="处理没有index.ttml的报错"></a>处理没有index.ttml的报错</h2><p>出现如下报错：  </p>
<blockquote>
<p>[BIZPACK] [ERROR] [SOURCECODE]<br>&#x2F;Users&#x2F;xiaoyu.jia&#x2F;Desktop&#x2F;mpx-project&#x2F;dist&#x2F;tt&#x2F;components&#x2F;vant&#x2F;weapp467c2ec1&#x2F;popup&#x2F;index.ttml is not found which referenced by &#x2F;Users&#x2F;xiaoyu.jia&#x2F;Desktop&#x2F;mpx-project&#x2F;dist&#x2F;tt&#x2F;pages&#x2F;device&#x2F;index.json<br>[BIZPACK] [ERROR] [SOURCECODE]&#x2F;Users&#x2F;xiaoyu.jia&#x2F;Desktop&#x2F;mpx-project&#x2F;dist&#x2F;tt&#x2F;components&#x2F;vant&#x2F;weapp467c2ec1&#x2F;popup&#x2F;index.wxml is not found which referenced by&#x2F;Users&#x2F;xiaoyu.jia&#x2F;Desktop&#x2F;mpx-project&#x2F;dist&#x2F;tt&#x2F;pages&#x2F;device&#x2F;index.json</p>
</blockquote>
<p><img src="/2023/07/11/applet-mpx-vant/error.jpeg" alt="page-img0" title="打包的component/vant/../组件文件夹下没有ttml和ttss"></p>
<p><strong>fix:修改运行命令</strong>  </p>
<p>文件<code>package.json</code>中，在<code>serve</code>和<code>build</code>的结尾都加上<code> --tt</code>。<br><img src="/2023/07/11/applet-mpx-vant/serve-tt.jpeg" alt="page-img1" title="结尾都加上` --tt`"></p>
<p><code>vue.config.js</code>的<strong>srcMode</strong>改为<strong>wx</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;@vue/cli-service&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">mpx</span>: &#123;</span><br><span class="line">      <span class="comment">// 这里不要改为&#x27;tt&#x27;</span></span><br><span class="line">      <span class="comment">// 去改package.json的 serve/build 命令（上一步）</span></span><br><span class="line">      <span class="attr">srcMode</span>: <span class="string">&quot;wx&quot;</span>,</span><br><span class="line">      <span class="attr">plugin</span>: &#123;</span><br><span class="line">        <span class="attr">hackResolveBuildDependencies</span>: <span class="function">(<span class="params">&#123; files, resolveDependencies &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> packageJSONPath = path.<span class="title function_">resolve</span>(<span class="string">&quot;package.json&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (files.<span class="title function_">has</span>(packageJSONPath)) files.<span class="title function_">delete</span>(packageJSONPath);</span><br><span class="line">          <span class="keyword">if</span> (resolveDependencies.<span class="property">files</span>.<span class="title function_">has</span>(packageJSONPath)) &#123;</span><br><span class="line">            resolveDependencies.<span class="property">files</span>.<span class="title function_">delete</span>(packageJSONPath);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loader</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果希望node_modules下的文件时对应的缓存可以失效，</span></span><br><span class="line"><span class="comment">   * 可以将configureWebpack.snap.managedPaths修改为 []</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">configureWebpack</span>(<span class="params">config</span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>删除<code>dist</code>文件夹，再重新在终端里输入<code>npm run serve</code>，启动项目。<br>新打包好的<code>dist</code>中，<code>vant/../</code>出现了<code>ttml</code>,<code>ttss</code>等文件。<br><img src="/2023/07/11/applet-mpx-vant/success.jpeg" alt="page-img4" title="打包的component/vant/../组件文件夹下出现了ttml和ttss"></p>
<h2 id="配置文件参考"><a href="#配置文件参考" class="headerlink" title="配置文件参考"></a>配置文件参考</h2><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDirs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;src&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;config&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;scripthost&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>Mpx</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Mpx</tag>
        <tag>小程序</tag>
        <tag>飞书小程序</tag>
        <tag>Vant</tag>
        <tag>Vant Weapp</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vue3+Element】实现选择器输入框SelectInput，可以过滤筛选项，可以直接输入搜索</title>
    <url>/2023/07/13/vue3-search-input/</url>
    <content><![CDATA[<!-- # 【Vue3+Element】实现选择器输入框SelectInput，可以过滤筛选项，可以直接输入搜索 -->
<h2 id="问题需求"><a href="#问题需求" class="headerlink" title="问题需求"></a>问题需求</h2><p>目前<strong>ElementPlus</strong>直接可以过滤的选择器，但是输入框内的文本只能是options匹配项目中的一个。<br>有时候用户想要自己直接输入一段文本去搜索，或者在选择一个匹配项后继续输入文本，这时element就不支持了。<br>这里我们实现一个既可以<strong>选择匹配项</strong>又可以<strong>在任何时候输入文本</strong>的输入框。  </p>
<span id="more"></span>

<p><img src="/2023/07/13/vue3-search-input/img1.jpeg" alt="page-img1" title="常见的选择器(可调用Element直接实现)"></p>
<p><img src="/2023/07/13/vue3-search-input/img2.jpeg" alt="page-img2" title="可以搜索过滤的选择器(可调用Element直接实现【为el-select添加filterable属性即可启用搜索功能】)"></p>
<p><img src="/2023/07/13/vue3-search-input/img3.jpeg" alt="page-img3" title="还可以输入不在option中的文本(Element不支持，自己实现【见后文】)"></p>
<blockquote>
<p>Element的选择器(筛选选项): <a href="https://element-plus.org/zh-CN/component/select.html#%E7%AD%9B%E9%80%89%E9%80%89%E9%A1%B9">https://element-plus.org/zh-CN/component/select.html#%E7%AD%9B%E9%80%89%E9%80%89%E9%A1%B9</a>  </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">filterable</span> <span class="attr">placeholder</span>=<span class="string">&quot;Select&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> options = [</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: <span class="string">&#x27;Option1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&#x27;Option1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: <span class="string">&#x27;Option2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&#x27;Option2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: <span class="string">&#x27;Option3&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&#x27;Option3&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: <span class="string">&#x27;Option4&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&#x27;Option4&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: <span class="string">&#x27;Option5&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&#x27;Option5&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义组件SearchInput"><a href="#自定义组件SearchInput" class="headerlink" title="自定义组件SearchInput"></a>自定义组件SearchInput</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dropdown</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">command</span>=<span class="string">&quot;onChangeCommand&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:teleported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placement</span>=<span class="string">&quot;bottom-start&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">trigger</span>=<span class="string">&quot;click&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:model-value</span>=<span class="string">&quot;props.modelValue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:placeholder</span>=<span class="string">&quot;props.placeholder&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">&quot;onInputChange&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">dropdown</span> <span class="attr">v-if</span>=<span class="string">&quot;options.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:command</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          &#123;&#123; item.value &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 接收父组件的传参</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">modelValue</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">options</span>: &#123; <span class="attr">type</span>: <span class="title class_">Array</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">placeholder</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 触发父组件的方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> options = <span class="title function_">ref</span>(props.<span class="property">options</span> <span class="keyword">as</span> any);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">filterOptions</span> = (<span class="params">val: string</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过滤筛选项&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  options.<span class="property">value</span> = props.<span class="property">options</span>?.<span class="title function_">filter</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> item.<span class="property">value</span>?.<span class="title function_">indexOf</span>(val) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onChangeCommand</span> = (<span class="params">val: string</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击菜单项触发的事件回调&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;change&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">filterOptions</span>(val);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onInput</span> = (<span class="params">val: string</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在 Input 值改变时触发&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">filterOptions</span>(val);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onInputChange</span> = (<span class="params">val: string</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;仅当 modelValue 改变时，当输入框失去焦点或用户按Enter时触发&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;change&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="页面中应用SearchInput"><a href="#页面中应用SearchInput" class="headerlink" title="页面中应用SearchInput"></a>页面中应用SearchInput</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;searchFormRef&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:model</span>=<span class="string">&quot;searchForm&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-width</span>=<span class="string">&quot;110px&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-position</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;`水果`&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SearchInput</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;searchForm.fruit&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:placeholder</span>=<span class="string">&quot;`请输入水果`&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:options</span>=<span class="string">&quot;fruitOptions?.[project.version]&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">&quot;drawerVisible&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(searchFormRef)&quot;</span>&gt;</span> 确定 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> type &#123; <span class="title class_">FormInstance</span>, <span class="title class_">FormRules</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> fruitOptions = [</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">value</span>: <span class="string">&#x27;apple&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">value</span>: <span class="string">&#x27;banana&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">value</span>: <span class="string">&#x27;orange&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">value</span>: <span class="string">&#x27;lemon&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> searchFormRef = ref&lt;<span class="title class_">FormInstance</span>&gt;();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> searchForm = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">deviceId</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">fruit</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 点击确认按钮</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">submitForm</span> = (<span class="params">formEl: FormInstance | <span class="literal">undefined</span></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!formEl) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">  formEl.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下确认键&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br></pre></td></tr></table></figure>
<p>页面最终效果图<br><img src="/2023/07/13/vue3-search-input/071301.gif" alt="page-gif1" title="可以搜索过滤的筛选器输入框"></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>typescript</tag>
        <tag>Vue3</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>纯前端生成图片下载导出【html2canvas下载不显示的div】</title>
    <url>/2023/07/14/vue2-download-div/</url>
    <content><![CDATA[<!-- # 纯前端生成图片下载导出【html2canvas下载不显示的div】 -->
<h2 id="用html2canvas下载div"><a href="#用html2canvas下载div" class="headerlink" title="用html2canvas下载div"></a>用html2canvas下载div</h2><p>前端有块div元素，点击“下载”按钮后，利用<code>html2canvas</code>把div转为canvas，再下载成格式为<code>png</code>的图片。  </p>
<span id="more"></span>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2023/07/14/vue2-download-div/img1.jpeg" alt="page-img1" title="下载div为png"><br><img src="/2023/07/14/vue2-download-div/071401.gif" alt="page-gif1" title="下载div为png"></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 30px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;downloadPng&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;download-content&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;pngRef&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>ID：&#123;&#123; state.id &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>模型号：&#123;&#123; state.model &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>创建者：&#123;&#123; state.create_by &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>更新者：&#123;&#123; state.update_by &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>描述：&#123;&#123; state.details &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">Vue</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">&#x27;html2canvas&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">filters</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  private state = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="string">&#x27;0339734AD13&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">model</span>: <span class="string">&#x27;42&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">status</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">create_time</span>: <span class="number">1688449325069</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">create_by</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">update_by</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">current_dept</span>: <span class="string">&#x27;5&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">details</span>: <span class="string">&#x27;这是一段描述&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  private <span class="title function_">downloadPng</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 生成图片</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">html2canvas</span>((<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">$refs</span>.<span class="property">pngRef</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;#ffffff&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> downloadUrl = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下载图片</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="property">href</span> = downloadUrl</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file_name = <span class="string">&#x27;img&#x27;</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">id</span> + <span class="string">&#x27;.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="property">download</span> = file_name</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 触发点击-然后移除</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink)</span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#download-content</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="不显示div如何生成图片下载"><a href="#不显示div如何生成图片下载" class="headerlink" title="不显示div如何生成图片下载"></a>不显示div如何生成图片下载</h2><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>前端不希望显示div，只显示一个下载按钮。<br>但是canvas必须要从一个dom元素转化而来，该如何做？<br><strong>利用css，前端隐藏div</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">style=&quot;position: fixed; opacity: 0&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/14/vue2-download-div/img2.jpeg" alt="page-img2" title="下载隐藏的div为png"><br><img src="/2023/07/14/vue2-download-div/071402.gif" alt="page-gif2" title="下载隐藏的div为png"></p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 30px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;downloadLogo&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里加上css 不显示div元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed; opacity: 0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;download-content&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;pngRef&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>ID：&#123;&#123; state.id &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>模型号：&#123;&#123; state.model &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>创建者：&#123;&#123; state.create_by &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>更新者：&#123;&#123; state.update_by &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>描述：&#123;&#123; state.details &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">Vue</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">&#x27;html2canvas&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">filters</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  private state = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="string">&#x27;0339734AD13&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">model</span>: <span class="string">&#x27;42&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">status</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">create_time</span>: <span class="number">1688449325069</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">create_by</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">update_by</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">current_dept</span>: <span class="string">&#x27;5&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">details</span>: <span class="string">&#x27;这是一段描述&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  private <span class="title function_">downloadLogo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 生成图片</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">html2canvas</span>((<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">$refs</span>.<span class="property">pngRef</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;#ffffff&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> downloadUrl = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下载图片</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="property">href</span> = downloadUrl</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file_name = <span class="string">&#x27;img&#x27;</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">id</span> + <span class="string">&#x27;.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="property">download</span> = file_name</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 触发点击-然后移除</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink)</span></span><br><span class="line"><span class="language-javascript">        aLink.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#download-content</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue2</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端生成二维码【Vue2+qrcodejs2】</title>
    <url>/2023/07/14/vue2-qrcode/</url>
    <content><![CDATA[<!-- # 前端生成二维码【Vue2+qrcodejs2】 -->
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>前端根据一段文本text生成二维码，扫码结果为这段text。  </p>
<span id="more"></span>
<p>这里的例子是【点击按钮，根据当前时间戳生成二维码】：<br><img src="/2023/07/14/vue2-qrcode/img1.jpeg" alt="page-img1" title="根据当前时间戳生成二维码"></p>
<p><img src="/2023/07/14/vue2-qrcode/071403.gif" alt="page-gif1" title="点击按钮，用最新的时间戳再次生成二维码"></p>
<h2 id="qrcodejs2生成二维码"><a href="#qrcodejs2生成二维码" class="headerlink" title="qrcodejs2生成二维码"></a>qrcodejs2生成二维码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 30px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 30px 0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeQRcode&quot;</span>&gt;</span>根据当前时间戳生成二维码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 30px 0&quot;</span>&gt;</span>当前时间戳:&#123;&#123; state.timestamp &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里是二维码的位置，利用ref属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;qrcodeRef&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">Vue</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">QRCode</span> <span class="keyword">from</span> <span class="string">&#x27;qrcodejs2&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">filters</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  private state = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">timestamp</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  private <span class="title function_">changeQRcode</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取当前时间戳</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> now_ts = now.<span class="title function_">getTime</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前时间戳&#x27;</span>, now_ts)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">timestamp</span> = now_ts</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//生成二维码</span></span></span><br><span class="line"><span class="language-javascript">      ;(<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">$refs</span>.<span class="property">qrcodeRef</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> qrcode = <span class="keyword">new</span> <span class="title class_">QRCode</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">qrcodeRef</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 需要转换为二维码的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// text的类型为string，把时间戳转为string</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">`<span class="subst">$&#123;now_ts&#125;</span>`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">width</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">colorDark</span>: <span class="string">&#x27;#000000&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">colorLight</span>: <span class="string">&#x27;#ffffff&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">correctLevel</span>: <span class="title class_">QRCode</span>.<span class="property">CorrectLevel</span>.<span class="property">H</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue2</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>git config全局配置和本地配置(当前仓库repo)</title>
    <url>/2023/07/17/git-config/</url>
    <content><![CDATA[<!-- # git config全局配置和本地配置(当前仓库repo) -->
<p>git有多个级别的配置文件，包括local、global、system、worktree等等。<br>通常会用到的是<code>global 全局配置</code>、<code>local 本地配置</code>。  </p>
<span id="more"></span>
<p><img src="/2023/07/17/git-config/img1.jpeg" alt="page-img1" title="git config的不同级别的配置"></p>
<h2 id="local本地配置"><a href="#local本地配置" class="headerlink" title="local本地配置"></a>local本地配置</h2><h3 id="修改local配置"><a href="#修改local配置" class="headerlink" title="修改local配置"></a>修改local配置</h3><p>修改local的配置，即为修改当前本地仓库的git配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name hengqu4</span><br><span class="line">git config user.email 529914423@qq.com</span><br></pre></td></tr></table></figure>
<h3 id="查看local配置"><a href="#查看local配置" class="headerlink" title="查看local配置"></a>查看local配置</h3><p>修改后查看local本地配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --local --list</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/17/git-config/img2.jpeg" alt="page-img2" title="查看git config --local本地配置"></p>
<h2 id="global全局配置"><a href="#global全局配置" class="headerlink" title="global全局配置"></a>global全局配置</h2><p><code>git config --global</code>的配置，即为本机所有git仓库的config配置。<br>但是也有一些仓库配置了local，local的配置优先级高于global。  </p>
<h3 id="修改global配置"><a href="#修改global配置" class="headerlink" title="修改global配置"></a>修改global配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name hengqu4</span><br><span class="line">git config --global user.email 529914423@qq.com</span><br></pre></td></tr></table></figure>
<h3 id="查看global配置"><a href="#查看global配置" class="headerlink" title="查看global配置"></a>查看global配置</h3><p>查看local本地配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/17/git-config/img3.png" alt="page-img3" title="查看git config -global全局配置"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git删除某个文件的所有历史commit</title>
    <url>/2023/07/17/git-delete-file-commit/</url>
    <content><![CDATA[<!-- # git删除某个文件的所有历史commit -->

<p><strong>场景</strong><br>之前该仓库为private，现在想要改为public可见，那么需要删除某些隐私文件以及其所有相关的历史commit。</p>
<span id="more"></span>  
<p>例如需要删除<code>yarn.lock</code>文件：<br>仅删除<code>yarn.lock</code>并push是不对的，因为其他用户可以在commit中找到它。  </p>
<p>我们需要删除<code>yarn.lock</code>以及<code>yarn.lock</code>所有commit记录。  </p>
<p><strong>git命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git filter-branch -f --tree-filter &#x27;rm -rf yarn.lock&#x27; HEAD</span><br><span class="line">git push origin -f</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交后个人资料下没显示commit贡献小绿点？【修改历史commit的author邮箱】</title>
    <url>/2023/07/17/git-edit-commit-author/</url>
    <content><![CDATA[<!-- # git提交后个人资料下没显示commit贡献小绿点？【修改历史commit的author邮箱】 -->
<h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>已经<code>git push origin</code>并且成功push了，仓库里也出现了commit记录，但是在github个人主页却没有显示出小绿点。<br><img src="/2023/07/17/git-edit-commit-author/img1.jpeg" alt="page-img1" title="github个人主页commit当天没显示出小绿点"></p>
<span id="more"></span>

<p>查看一下历史commit的提交作者是不是其他git用户:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/17/git-edit-commit-author/img2.jpeg" alt="page-img2" title="近2次的commit的Author错了"></p>
<h2 id="若因commit的Author有错，先改对"><a href="#若因commit的Author有错，先改对" class="headerlink" title="若因commit的Author有错，先改对"></a>若因commit的Author有错，先改对</h2><blockquote>
<p>git config全局配置和本地配置(当前仓库repo):<br><a href="https://hengqu4.github.io/2023/07/17/git-config/">https://hengqu4.github.io/2023/07/17/git-config/</a>  </p>
</blockquote>
<p>修改git的本地配置  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name hengqu4</span><br><span class="line">git config user.email 529914423@qq.com</span><br></pre></td></tr></table></figure>
<p>修改git的全局配置  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name hengqu4</span><br><span class="line">git config --global user.email 529914423@qq.com</span><br></pre></td></tr></table></figure>
<h2 id="git-rebase-i对历史提交进行处理"><a href="#git-rebase-i对历史提交进行处理" class="headerlink" title="git rebase -i对历史提交进行处理"></a>git rebase -i对历史提交进行处理</h2><h3 id="编辑最新的几次commit"><a href="#编辑最新的几次commit" class="headerlink" title="编辑最新的几次commit"></a>编辑最新的几次commit</h3><p>发现近2次的commit的提交者Author不是自己，重新设置基准线，回退到2次之前：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure>
<p>之后会自动进入 vi ，按下i键进入编辑模式；<br><img src="/2023/07/17/git-edit-commit-author/img3.jpeg" alt="page-img3" title="输入git rebase -i HEAD~2 之后的终端显示界面"><br><img src="/2023/07/17/git-edit-commit-author/img4.jpeg" alt="page-img4" title="按下i键进入编辑模式"></p>
<p>把前缀从<code>pick</code>改为<code>e</code>或者<code>edit</code>；<br><img src="/2023/07/17/git-edit-commit-author/img5.jpeg" alt="page-img5" title="把`pick`改为`e`或者`edit`"><br>编辑完后按下<code>esc</code>键退出编辑模式，再输入<code>:wq!</code>按下回车保存编辑并退出vi；<br><img src="/2023/07/17/git-edit-commit-author/img6.jpeg" alt="page-img6" title="保存编辑并退出vi"></p>
<p>此时回到了需要处理的commit。<br><img src="/2023/07/17/git-edit-commit-author/img7.jpeg" alt="page-img7" title="回到了需要处理的commit"></p>
<h3 id="编辑历史提交中的某几次（包括第一次）的commit"><a href="#编辑历史提交中的某几次（包括第一次）的commit" class="headerlink" title="编辑历史提交中的某几次（包括第一次）的commit"></a>编辑历史提交中的某几次（包括第一次）的commit</h3><p>如果是更新中间某几次的commit信息或者第一次commit的信息，可以输入<code>git rebase -i --root</code>回退到第一次提交。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase -i --root</span><br></pre></td></tr></table></figure>
<p>再在其中选择需要修改的commit，把它们的前缀从<code>pick</code>改为<code>e</code>，其他操作一样。  </p>
<h2 id="修改commit的Author"><a href="#修改commit的Author" class="headerlink" title="修改commit的Author"></a>修改commit的Author</h2><p>我们需要修改的是提交者Author，输入以下命令：  </p>
<blockquote>
<p>hengqu4是git的user.name<br><a href="mailto:&#x35;&#50;&#57;&#x39;&#49;&#x34;&#x34;&#x32;&#51;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#x6d;">&#x35;&#50;&#57;&#x39;&#49;&#x34;&#x34;&#x32;&#51;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#x6d;</a>是git的user.email<br>这里请替换成你自己的名称和邮箱  </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend --author &quot;hengqu4 &lt;529914423@qq.com&gt;&quot;</span><br></pre></td></tr></table></figure>
<p>按下回车后进入vi模式，我们直接输入<code>wq!</code>+按下回车即可；<br><img src="/2023/07/17/git-edit-commit-author/img8.jpeg" alt="page-img8" title="直接输入`wq!`，按下回车退出"></p>
<p>输入命令进行到下一个需要处理的commit，也就是下一个我们之前把<code>pick</code>改为<code>e</code>的commit。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/17/git-edit-commit-author/img9.jpeg" alt="page-img9" title="之后一直重复上面2个命令"><br>之后一直重复上面2个命令，直到所有需要编辑的commit都处理过了  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend --author &quot;hengqu4 &lt;529914423@qq.com&gt;&quot;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>
<p>当某次输入了<code>git rebase --continue</code>后，终端出现了<code>成功变基并更新 refs/heads/...</code>的提示时停止操作，意味着所有需要编辑的commit都处理过了。<br><img src="/2023/07/17/git-edit-commit-author/imga.jpeg" alt="page-imga" title="出现这条提示意味着 所有需要编辑的commit都处理过了">  </p>
<h2 id="成功修改后push到远程仓库"><a href="#成功修改后push到远程仓库" class="headerlink" title="成功修改后push到远程仓库"></a>成功修改后push到远程仓库</h2><p>为了验证是否历史commit编辑成功，可以输入<code>git log</code>查看最新的commit记录信息。<br>这里可以看到之前2次作者错误的commit已经被修正了：<br><img src="/2023/07/17/git-edit-commit-author/imgb.jpeg" alt="page-imgb" title="最新2次的commit的Author已经被修正了"><br>上述操作只是更新了本地的commit信息，我们还需要更新远程仓库的commit信息。<br>输入以下命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin -f</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/17/git-edit-commit-author/imgc.jpeg" alt="page-imgc" title="更新远程仓库commit的Author"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>飞书小程序下载文件相关API(本地、Storage)</title>
    <url>/2023/07/18/feishu-download-file/</url>
    <content><![CDATA[<!-- # 飞书小程序下载文件相关API(本地、Storage) -->
<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>在飞书小程序中，调用后端下载请求API下载文件，期望可以保存在<code>手机本地</code>&#x2F;<code>飞书本地</code>&#x2F;<code>飞书临时目录</code>&#x2F;<code>飞书缓存</code>。 </p>
<p>在网络上找的下载url，在后端还没给API之前测试用的：<br><a href="http://files.cnblogs.com/MolbyHome/%E6%83%B3%E6%B3%95.rar">http://files.cnblogs.com/MolbyHome/%E6%83%B3%E6%B3%95.rar</a><br><a href="https://cdn.jsdelivr.net/gh/belaviyo/download-with/samples/sample.zip">https://cdn.jsdelivr.net/gh/belaviyo/download-with/samples/sample.zip</a> </p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><blockquote>
<p>飞书小程序文件系统：<a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/file/file-system">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/file/file-system</a>  </p>
</blockquote>
<p>本地临时文件(以ttfile:&#x2F;&#x2F;temp开头)：临时产生，小程序重启会被清空的文件。<br>本地用户文件(以ttfile:&#x2F;&#x2F;user开头)：小程序通过接口把本地临时文件保存后产生的文件，每个小程序最多可存储 200MB。</p>
<h2 id="选择手机本地文件系统的文件"><a href="#选择手机本地文件系统的文件" class="headerlink" title="选择手机本地文件系统的文件"></a>选择手机本地文件系统的文件</h2><p>用到的飞书小程序接口<code>tt.filepicker</code><br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/file/filepicker">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/file/filepicker</a>  </p>
<p><strong>index.mpx</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      打开手机本地文件系统</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;openFileSystem&quot;</span>&gt;</span>选择本地文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.ts&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>index.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpx, &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&quot;@mpxjs/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createPage</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">chooseFile</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 打开手机本地文件系统,选择文件后，这里会把文件存到飞书临时目录下 ttfile://temp</span></span><br><span class="line">    <span class="title function_">openFileSystem</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开文件系统，选择目标文件&quot;</span>);</span><br><span class="line">      tt.<span class="title function_">filePicker</span>(&#123;</span><br><span class="line">        <span class="attr">maxNum</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">pickerTitle</span>: <span class="string">&quot;Select a file&quot;</span>,</span><br><span class="line">        <span class="attr">pickerConfirm</span>: <span class="string">&quot;Confirm&quot;</span>,</span><br><span class="line">        <span class="attr">isSystem</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">chooseFile</span> = res.<span class="property">list</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;filePicker fail:&quot;</span>, res);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/07/18/feishu-download-file/img1.jpeg" alt="page-img1" title="选择文件后，小程序会把文件存到飞书临时目录下 ttfile://temp">  </p>
<h2 id="下载并存储到Storage"><a href="#下载并存储到Storage" class="headerlink" title="下载并存储到Storage"></a>下载并存储到Storage</h2><p>请求下载时responseType为<code>arraybuffer</code>，并且把文件存在Storage。<br><img src="/2023/07/18/feishu-download-file/img3.jpeg" alt="page-img3" title="飞书小程序的Storage缓存区">  </p>
<h3 id="Storage简介"><a href="#Storage简介" class="headerlink" title="Storage简介"></a>Storage简介</h3><blockquote>
<p>飞书官网：<a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/local-data-cache">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/local-data-cache</a>  </p>
</blockquote>
<p>小程序可以通过下面列出的API读取、写入、删除、清理本地缓存数据，与 LocalStorage 类似。  </p>
<p>以「键值对」的形式设置本地缓存数据。  </p>
<p>单个 key 允许存储的最大数据长度为 <strong>1MB</strong>，所有数据存储上限为 <strong>10MB</strong>，同时也受到用户设备存储空间、缓存清理等机制的限制，可能会导致信息丢失，因此请不要将重要数据存放在本地数据缓存。</p>
<p><strong>setStorage</strong><br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/setstorage">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/setstorage</a>    </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tt.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">fail</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setStorage fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>getStorage</strong><br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/getstorage">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/getstorage</a>    </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tt.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">fail</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getStorage fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>更多接口请前往官网查看：</p>
<blockquote>
<p><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/local-data-cache">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/local-data-cache</a></p>
</blockquote>
<ul>
<li>getStorage</li>
<li>getStorageSync</li>
<li>setStorage</li>
<li>setStorageSync</li>
<li>removeStorage</li>
<li>removeStorageSync</li>
<li>clearStorage</li>
<li>clearStorageSync</li>
<li>getStorageInfo</li>
<li>getStorageInfoSync</li>
</ul>
<h3 id="下载文件存到Storage"><a href="#下载文件存到Storage" class="headerlink" title="下载文件存到Storage"></a>下载文件存到Storage</h3><p>用到的接口  </p>
<p><code>tt.request</code>:<br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/network/initiating-request/request">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/network/initiating-request/request</a>  </p>
<p><code>tt.setStorage</code>:<a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/setstorage">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/setstorage</a>    </p>
<p><code>tt.getStorage</code>:<br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/getstorage">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/cache/getstorage</a>    </p>
<p><strong>index.mpx</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      下载文件,存到Storage (ArrayBuffer)</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;onDownloadStorage&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #55efc4&quot;</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;readStorageFile&quot;</span>&gt;</span>读取文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.ts&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>index.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpx, &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&quot;@mpxjs/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createPage</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 下载文件,类型为ArrayBuffer,存到Storage</span></span><br><span class="line">    <span class="title function_">onDownloadStorage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> url =</span><br><span class="line">        <span class="string">&quot;https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_200KB_CSV-1.csv&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下载文件===&quot;</span>);</span><br><span class="line">      <span class="comment">// 类型为arraybuffer</span></span><br><span class="line">      tt.<span class="title function_">request</span>(&#123;</span><br><span class="line">        url,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;download file success&quot;</span>, res);</span><br><span class="line">            <span class="keyword">const</span> &#123; <span class="attr">data</span>: arraybuffer &#125; = res;</span><br><span class="line">            <span class="keyword">const</span> byteArr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arraybuffer);</span><br><span class="line">            <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(byteArr);</span><br><span class="line">            <span class="comment">// 保存为Array</span></span><br><span class="line">            tt.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">              <span class="attr">key</span>: <span class="string">&#x27;test-file&#x27;</span>,</span><br><span class="line">              <span class="attr">data</span>: arr,</span><br><span class="line">              <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setStorage success&quot;</span>, res);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;setStorage fail&quot;</span>, res);</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;download file fail&quot;</span>, err);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取存到Storage的文件</span></span><br><span class="line">    <span class="title function_">readStorageFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 获取本地缓存数据的相关信息:</span></span><br><span class="line">      <span class="comment">// 1.所有键名列表</span></span><br><span class="line">      <span class="comment">// 2.占用空间大小，以 KB 为单位</span></span><br><span class="line">      <span class="comment">// 3.存储空间上限，以 KB 为单位，一般来说会返回 10240</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = tt.<span class="title function_">getStorageInfoSync</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`缓存信息 success: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(result)&#125;</span>`</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`缓存信息 fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(error)&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据key值读取相应的缓存数据</span></span><br><span class="line">      tt.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;test-file&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getStorage success。&quot;</span>,res);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;getStorage fail&quot;</span>, res);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>飞书小程序下载文件并存到Storage<br><img src="/2023/07/18/feishu-download-file/img4.jpeg" alt="page-img4" title="飞书小程序下载文件并存到Storage"><br>飞书小程序的Storage出现了缓存数据<br><img src="/2023/07/18/feishu-download-file/img5.jpeg" alt="page-img5" title="飞书小程序的Storage出现了缓存数据">  </p>
<h2 id="下载到飞书本地临时目录"><a href="#下载到飞书本地临时目录" class="headerlink" title="下载到飞书本地临时目录"></a>下载到飞书本地临时目录</h2><p>用到的飞书小程序接口<code>tt.downloadFile</code><br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/network/download/downloadfile">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/network/download/downloadfile</a>  </p>
<p><strong>index.mpx</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      下载文件,存到临时目录</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;onDownload&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #55efc4&quot;</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.ts&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>index.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpx, &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&quot;@mpxjs/core&quot;</span>;</span><br><span class="line"><span class="title function_">createPage</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 下载文件,存到临时目录</span></span><br><span class="line">    <span class="title function_">onDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下载文件&quot;</span>);</span><br><span class="line">      tt.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://files.cnblogs.com/MolbyHome/%E6%83%B3%E6%B3%95.rar&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;downloadFile fail:&quot;</span>, res);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/18/feishu-download-file/img2.jpeg" alt="page-img2" title="调用下载请求后，小程序会把文件存到飞书临时目录下 ttfile://temp">  </p>
<h2 id="下载到飞书本地目录"><a href="#下载到飞书本地目录" class="headerlink" title="下载到飞书本地目录"></a>下载到飞书本地目录</h2><p><strong>注意</strong>：这里的本地目录是指飞书提供的隔离空间<code>ttfile://user/</code>，不是手机系统本地目录。  </p>
<p>方法：<br>飞书调用了<code>downloadFile</code>API只能把文件下载到临时目录，不能直接飞书本地目录。<br>但是飞书可以把临时目录中的文件存到飞书本地目录<code>tt.saveFile</code>。  </p>
<blockquote>
<p><code>tt.saveFile</code>: 该 API 会把临时文件移动到永久目录（目录最大200M），所以在调用成功后原文件路径将访问失败。<br><a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/file/file_system_manager/file_system_manager_save_file">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/file/file_system_manager/file_system_manager_save_file</a>  </p>
</blockquote>
<p>因此，这里可以<strong>先把文件下载到临时目录，再把飞书临时目录中的文件存到飞书本地目录</strong>。  </p>
<p><strong>index.mpx</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fix 垂直塌陷 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;content: &#x27;&#x27;; overflow: hidden;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;margin:30px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;downloadFile&quot;</span>&gt;</span>下载文件并保存到本地<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;openDir&quot;</span>&gt;</span>打印/user/所有文件列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;clearDir&quot;</span>&gt;</span>清空本地文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&#x27;@mpxjs/core&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createPage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 打印本地目录下所有文件的名称</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">openDir</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileSystemManager = tt.<span class="title function_">getFileSystemManager</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> files = fileSystemManager.<span class="title function_">readdirSync</span>(<span class="string">&#x27;ttfile://user/&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用成功&#x27;</span>, files)</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用失败&#x27;</span>, err)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 下载文件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">downloadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        wx.<span class="title function_">showLoading</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title</span>: <span class="string">&#x27;下载中&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;file-1.bin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">size</span>: <span class="number">21.3</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">version</span>: <span class="string">&#x27;V3.1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2023/01/21&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载升级文件&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下载文件,存到临时目录</span></span></span><br><span class="line"><span class="language-javascript">        tt.<span class="title function_">downloadFile</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&#x27;https://cdn.jsdelivr.net/gh/belaviyo/download-with/samples/sample.zip&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;存到临时目录&#x27;</span>, res)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tempFilePath = res.<span class="property">tempFilePath</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 把文件从临时目录保存到本地目录</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; tempFilePath) &#123;</span></span><br><span class="line"><span class="language-javascript">              tt.<span class="title function_">saveFile</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                tempFilePath,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">filePath</span>: <span class="string">&#x27;ttfile://user/&#x27;</span> + file.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`saveFile fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            wx.<span class="title function_">hideLoading</span>()</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;downloadFile fail:&#x27;</span>, res)</span></span><br><span class="line"><span class="language-javascript">            wx.<span class="title function_">hideLoading</span>()</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 删除本地目录的文件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">removeSavedFile</span>(<span class="params">fileList</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileSystemManager = tt.<span class="title function_">getFileSystemManager</span>()</span></span><br><span class="line"><span class="language-javascript">        fileList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;准备删除文件:&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(file))</span></span><br><span class="line"><span class="language-javascript">          fileSystemManager.<span class="title function_">removeSavedFile</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">filePath</span>: file.<span class="property">filePath</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;file.filePath&#125;</span> 删除成功`</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;file.filePath&#125;</span> 删除失败`</span>, res.<span class="property">errMsg</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 清空本地目录</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 先遍历本地目录的文件，再去删除这些文件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clearDir</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;清空本地目录文件&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileSystemManager = tt.<span class="title function_">getFileSystemManager</span>()</span></span><br><span class="line"><span class="language-javascript">        fileSystemManager.<span class="title function_">getSavedFileList</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前用户目录下的文件:&#x27;</span>, res)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">removeSavedFile</span>(res.<span class="property">fileList</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>下载文件到临时目录   </li>
<li>把文件从临时目录保存到本地目录  </li>
<li>打印本地目录下所有文件的名称</li>
</ol>
<div align="center">
  <img src="/2023/07/18/feishu-download-file/img6.jpeg" width="50%" alt="经过123步后的控制台输出">
</div>

  
<ol start="4">
<li>清空本地文件目录（先遍历本地目录的文件，再去删除这些文件）</li>
</ol>
<div align="center">
  <img src="/2023/07/18/feishu-download-file/img7.jpeg" width="50%" alt="清空本地文件目录的控制台输出">
</div>
]]></content>
      <categories>
        <category>前端</category>
        <category>Mpx</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Mpx</tag>
        <tag>小程序</tag>
        <tag>飞书小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>【蓝牙分包传输】飞书小程序实现通过蓝牙传输文件给其他设备【TS】</title>
    <url>/2023/07/19/js-bluetooth-upload/</url>
    <content><![CDATA[<!-- # 【蓝牙分包传输】飞书小程序实现通过蓝牙传输文件给其他设备【TS】 -->
<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>在飞书小程序中实现下载文件并把文件通过蓝牙传输给其他设备【分包传输】。  </p>
<ol>
<li>下载文件（这里用的是网上找的一个测试下载url） ；</li>
<li>文件是ArrayBuffer格式，并把文件缓存到飞书小程序的Storage；<blockquote>
<p>在飞书中下载文件见：<a href="https://hengqu4.github.io/2023/07/18/feishu-download-file/">https://hengqu4.github.io/2023/07/18/feishu-download-file/</a>  </p>
</blockquote>
</li>
<li>调用飞书API，扫描附近的蓝牙设备；</li>
<li>选择目标设备并连接配对（如果连接需要配对码，需要用户自己知道该设备的配对码）；</li>
<li>成功配对后，开始进行蓝牙传输；由于飞书API的限制，每次只能传输20字节，所以我们要进行分包传输（类似于前端大文件切片上传）。<br>传输过程中要进行<strong>crc16循环冗余校验</strong></li>
</ol>
<p>本篇文章重点写的是：<br>第4步【如何配对蓝牙】<br>第5步【如何实现<strong>蓝牙分包传输</strong>，以及如何实现<strong>crc16循环冗余校验</strong>】  </p>
<span id="more"></span>
<h2 id="飞书蓝牙相关API"><a href="#飞书蓝牙相关API" class="headerlink" title="飞书蓝牙相关API"></a>飞书蓝牙相关API</h2><blockquote>
<p>飞书官网【蓝牙接入开发流程】：<a href="https://open.feishu.cn/document/client-docs/gadget/-web-app-api/device/bluetooth/bluetooth-api-guide">https://open.feishu.cn/document/client-docs/gadget/-web-app-api/device/bluetooth/bluetooth-api-guide</a></p>
</blockquote>
<h2 id="封装蓝牙API"><a href="#封装蓝牙API" class="headerlink" title="封装蓝牙API"></a>封装蓝牙API</h2><p><strong>&#x2F;utils&#x2F;bluetooth.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBluetoothAdapterState</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">getBluetoothAdapterState</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">openBluetoothAdapter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">openBluetoothAdapter</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">closeBluetoothAdapter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">closeBluetoothAdapter</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">startBluetoothDevicesDiscovery</span> = (<span class="params">options?: &#123; allowDuplicatesKey: <span class="built_in">boolean</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">startBluetoothDevicesDiscovery</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;,</span><br><span class="line">      ...options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">stopBluetoothDevicesDiscovery</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">stopBluetoothDevicesDiscovery</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getConnectedBluetoothDevices</span> = (<span class="params">...services: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">getConnectedBluetoothDevices</span>(&#123;</span><br><span class="line">      services,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">connectBLEDevice</span> = (<span class="params">deviceId: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">connectBLEDevice</span>(&#123;</span><br><span class="line">      deviceId,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">disconnectBLEDevice</span> = (<span class="params">deviceId: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">disconnectBLEDevice</span>(&#123;</span><br><span class="line">      deviceId,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBLEDeviceServices</span> = (<span class="params">deviceId: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getBLEDeviceServices====&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">getBLEDeviceServices</span>(&#123;</span><br><span class="line">      deviceId,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBLEDeviceCharacteristics</span> = (<span class="params">options: &#123; deviceId: <span class="built_in">string</span>, serviceId: <span class="built_in">string</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">getBLEDeviceCharacteristics</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取特征值,success&#x27;</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取特征值,fail&#x27;</span>)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;,</span><br><span class="line">      ...options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">notifyBLECharacteristicValueChange</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  options: &#123;</span></span><br><span class="line"><span class="params">    deviceId: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    serviceId: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    characteristicId: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    state?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">notifyBLECharacteristicValueChange</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;,</span><br><span class="line">      ...options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">writeBLECharacteristicValue</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  options: &#123;</span></span><br><span class="line"><span class="params">    deviceId: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    serviceId: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    characteristicId: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    value: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    tt.<span class="title function_">writeBLECharacteristicValue</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">resolve</span>(res) &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123; <span class="title function_">reject</span>(err) &#125;,</span><br><span class="line">      ...options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">showToast</span> = (<span class="params">options: &#123;</span></span><br><span class="line"><span class="params">  title?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  icon?: <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;loading&#x27;</span> | <span class="string">&#x27;none&#x27;</span> | <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;error&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>,</span></span><br><span class="line"><span class="params">  duration?: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  mask?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  tt.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    ...options</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="封装循环校验crc和hex字符串转换等方法"><a href="#封装循环校验crc和hex字符串转换等方法" class="headerlink" title="封装循环校验crc和hex字符串转换等方法"></a>封装循环校验crc和hex字符串转换等方法</h2><p><strong>&#x2F;utils&#x2F;deviceUtil.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CRC-CCITT多项式 16位的CRC校验算法</span></span><br><span class="line"><span class="comment">// 方法1.将存有数据的字节数组进行逐位计算，求得字节形式的CRC</span></span><br><span class="line"><span class="comment">// 方法2.字节查表法</span></span><br><span class="line"><span class="comment">// 这里用的是方法2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CRC16_CCITT 0x1021</span></span><br><span class="line"><span class="comment">// 字节查表法：CRC 字节余式表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> crcTab16 = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>([</span><br><span class="line">  <span class="number">0x0000</span>, <span class="number">0x1021</span>, <span class="number">0x2042</span>, <span class="number">0x3063</span>, <span class="number">0x4084</span>, <span class="number">0x50a5</span>, <span class="number">0x60c6</span>, <span class="number">0x70e7</span>,</span><br><span class="line">  <span class="number">0x8108</span>, <span class="number">0x9129</span>, <span class="number">0xa14a</span>, <span class="number">0xb16b</span>, <span class="number">0xc18c</span>, <span class="number">0xd1ad</span>, <span class="number">0xe1ce</span>, <span class="number">0xf1ef</span>,</span><br><span class="line">  <span class="number">0x1231</span>, <span class="number">0x0210</span>, <span class="number">0x3273</span>, <span class="number">0x2252</span>, <span class="number">0x52b5</span>, <span class="number">0x4294</span>, <span class="number">0x72f7</span>, <span class="number">0x62d6</span>,</span><br><span class="line">  <span class="number">0x9339</span>, <span class="number">0x8318</span>, <span class="number">0xb37b</span>, <span class="number">0xa35a</span>, <span class="number">0xd3bd</span>, <span class="number">0xc39c</span>, <span class="number">0xf3ff</span>, <span class="number">0xe3de</span>,</span><br><span class="line">  <span class="number">0x2462</span>, <span class="number">0x3443</span>, <span class="number">0x0420</span>, <span class="number">0x1401</span>, <span class="number">0x64e6</span>, <span class="number">0x74c7</span>, <span class="number">0x44a4</span>, <span class="number">0x5485</span>,</span><br><span class="line">  <span class="number">0xa56a</span>, <span class="number">0xb54b</span>, <span class="number">0x8528</span>, <span class="number">0x9509</span>, <span class="number">0xe5ee</span>, <span class="number">0xf5cf</span>, <span class="number">0xc5ac</span>, <span class="number">0xd58d</span>,</span><br><span class="line">  <span class="number">0x3653</span>, <span class="number">0x2672</span>, <span class="number">0x1611</span>, <span class="number">0x0630</span>, <span class="number">0x76d7</span>, <span class="number">0x66f6</span>, <span class="number">0x5695</span>, <span class="number">0x46b4</span>,</span><br><span class="line">  <span class="number">0xb75b</span>, <span class="number">0xa77a</span>, <span class="number">0x9719</span>, <span class="number">0x8738</span>, <span class="number">0xf7df</span>, <span class="number">0xe7fe</span>, <span class="number">0xd79d</span>, <span class="number">0xc7bc</span>,</span><br><span class="line">  <span class="number">0x48c4</span>, <span class="number">0x58e5</span>, <span class="number">0x6886</span>, <span class="number">0x78a7</span>, <span class="number">0x0840</span>, <span class="number">0x1861</span>, <span class="number">0x2802</span>, <span class="number">0x3823</span>,</span><br><span class="line">  <span class="number">0xc9cc</span>, <span class="number">0xd9ed</span>, <span class="number">0xe98e</span>, <span class="number">0xf9af</span>, <span class="number">0x8948</span>, <span class="number">0x9969</span>, <span class="number">0xa90a</span>, <span class="number">0xb92b</span>,</span><br><span class="line">  <span class="number">0x5af5</span>, <span class="number">0x4ad4</span>, <span class="number">0x7ab7</span>, <span class="number">0x6a96</span>, <span class="number">0x1a71</span>, <span class="number">0x0a50</span>, <span class="number">0x3a33</span>, <span class="number">0x2a12</span>,</span><br><span class="line">  <span class="number">0xdbfd</span>, <span class="number">0xcbdc</span>, <span class="number">0xfbbf</span>, <span class="number">0xeb9e</span>, <span class="number">0x9b79</span>, <span class="number">0x8b58</span>, <span class="number">0xbb3b</span>, <span class="number">0xab1a</span>,</span><br><span class="line">  <span class="number">0x6ca6</span>, <span class="number">0x7c87</span>, <span class="number">0x4ce4</span>, <span class="number">0x5cc5</span>, <span class="number">0x2c22</span>, <span class="number">0x3c03</span>, <span class="number">0x0c60</span>, <span class="number">0x1c41</span>,</span><br><span class="line">  <span class="number">0xedae</span>, <span class="number">0xfd8f</span>, <span class="number">0xcdec</span>, <span class="number">0xddcd</span>, <span class="number">0xad2a</span>, <span class="number">0xbd0b</span>, <span class="number">0x8d68</span>, <span class="number">0x9d49</span>,</span><br><span class="line">  <span class="number">0x7e97</span>, <span class="number">0x6eb6</span>, <span class="number">0x5ed5</span>, <span class="number">0x4ef4</span>, <span class="number">0x3e13</span>, <span class="number">0x2e32</span>, <span class="number">0x1e51</span>, <span class="number">0x0e70</span>,</span><br><span class="line">  <span class="number">0xff9f</span>, <span class="number">0xefbe</span>, <span class="number">0xdfdd</span>, <span class="number">0xcffc</span>, <span class="number">0xbf1b</span>, <span class="number">0xaf3a</span>, <span class="number">0x9f59</span>, <span class="number">0x8f78</span>,</span><br><span class="line">  <span class="number">0x9188</span>, <span class="number">0x81a9</span>, <span class="number">0xb1ca</span>, <span class="number">0xa1eb</span>, <span class="number">0xd10c</span>, <span class="number">0xc12d</span>, <span class="number">0xf14e</span>, <span class="number">0xe16f</span>,</span><br><span class="line">  <span class="number">0x1080</span>, <span class="number">0x00a1</span>, <span class="number">0x30c2</span>, <span class="number">0x20e3</span>, <span class="number">0x5004</span>, <span class="number">0x4025</span>, <span class="number">0x7046</span>, <span class="number">0x6067</span>,</span><br><span class="line">  <span class="number">0x83b9</span>, <span class="number">0x9398</span>, <span class="number">0xa3fb</span>, <span class="number">0xb3da</span>, <span class="number">0xc33d</span>, <span class="number">0xd31c</span>, <span class="number">0xe37f</span>, <span class="number">0xf35e</span>,</span><br><span class="line">  <span class="number">0x02b1</span>, <span class="number">0x1290</span>, <span class="number">0x22f3</span>, <span class="number">0x32d2</span>, <span class="number">0x4235</span>, <span class="number">0x5214</span>, <span class="number">0x6277</span>, <span class="number">0x7256</span>,</span><br><span class="line">  <span class="number">0xb5ea</span>, <span class="number">0xa5cb</span>, <span class="number">0x95a8</span>, <span class="number">0x8589</span>, <span class="number">0xf56e</span>, <span class="number">0xe54f</span>, <span class="number">0xd52c</span>, <span class="number">0xc50d</span>,</span><br><span class="line">  <span class="number">0x34e2</span>, <span class="number">0x24c3</span>, <span class="number">0x14a0</span>, <span class="number">0x0481</span>, <span class="number">0x7466</span>, <span class="number">0x6447</span>, <span class="number">0x5424</span>, <span class="number">0x4405</span>,</span><br><span class="line">  <span class="number">0xa7db</span>, <span class="number">0xb7fa</span>, <span class="number">0x8799</span>, <span class="number">0x97b8</span>, <span class="number">0xe75f</span>, <span class="number">0xf77e</span>, <span class="number">0xc71d</span>, <span class="number">0xd73c</span>,</span><br><span class="line">  <span class="number">0x26d3</span>, <span class="number">0x36f2</span>, <span class="number">0x0691</span>, <span class="number">0x16b0</span>, <span class="number">0x6657</span>, <span class="number">0x7676</span>, <span class="number">0x4615</span>, <span class="number">0x5634</span>,</span><br><span class="line">  <span class="number">0xd94c</span>, <span class="number">0xc96d</span>, <span class="number">0xf90e</span>, <span class="number">0xe92f</span>, <span class="number">0x99c8</span>, <span class="number">0x89e9</span>, <span class="number">0xb98a</span>, <span class="number">0xa9ab</span>,</span><br><span class="line">  <span class="number">0x5844</span>, <span class="number">0x4865</span>, <span class="number">0x7806</span>, <span class="number">0x6827</span>, <span class="number">0x18c0</span>, <span class="number">0x08e1</span>, <span class="number">0x3882</span>, <span class="number">0x28a3</span>,</span><br><span class="line">  <span class="number">0xcb7d</span>, <span class="number">0xdb5c</span>, <span class="number">0xeb3f</span>, <span class="number">0xfb1e</span>, <span class="number">0x8bf9</span>, <span class="number">0x9bd8</span>, <span class="number">0xabbb</span>, <span class="number">0xbb9a</span>,</span><br><span class="line">  <span class="number">0x4a75</span>, <span class="number">0x5a54</span>, <span class="number">0x6a37</span>, <span class="number">0x7a16</span>, <span class="number">0x0af1</span>, <span class="number">0x1ad0</span>, <span class="number">0x2ab3</span>, <span class="number">0x3a92</span>,</span><br><span class="line">  <span class="number">0xfd2e</span>, <span class="number">0xed0f</span>, <span class="number">0xdd6c</span>, <span class="number">0xcd4d</span>, <span class="number">0xbdaa</span>, <span class="number">0xad8b</span>, <span class="number">0x9de8</span>, <span class="number">0x8dc9</span>,</span><br><span class="line">  <span class="number">0x7c26</span>, <span class="number">0x6c07</span>, <span class="number">0x5c64</span>, <span class="number">0x4c45</span>, <span class="number">0x3ca2</span>, <span class="number">0x2c83</span>, <span class="number">0x1ce0</span>, <span class="number">0x0cc1</span>,</span><br><span class="line">  <span class="number">0xef1f</span>, <span class="number">0xff3e</span>, <span class="number">0xcf5d</span>, <span class="number">0xdf7c</span>, <span class="number">0xaf9b</span>, <span class="number">0xbfba</span>, <span class="number">0x8fd9</span>, <span class="number">0x9ff8</span>,</span><br><span class="line">  <span class="number">0x6e17</span>, <span class="number">0x7e36</span>, <span class="number">0x4e55</span>, <span class="number">0x5e74</span>, <span class="number">0x2e93</span>, <span class="number">0x3eb2</span>, <span class="number">0x0ed1</span>, <span class="number">0x1ef0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">crc16</span> = (<span class="params">data: <span class="built_in">Uint8Array</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// uint16_t crc</span></span><br><span class="line">  <span class="keyword">let</span> crc = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> data) &#123;</span><br><span class="line">    crc = ((crc &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xffff</span>) ^ crcTab16[((crc &gt;&gt; <span class="number">8</span>) ^ b) &amp; <span class="number">0x00ff</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> crc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">arrayBuffer2Hex</span> = (<span class="params">buffer: <span class="built_in">ArrayBuffer</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> bitArr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer)</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">hexArr</span>: <span class="built_in">string</span>[] = []</span><br><span class="line">  bitArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">bit</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hex = <span class="string">&#x27;00&#x27;</span> + <span class="title class_">String</span>(bit).<span class="title function_">slice</span>(-<span class="number">2</span>)</span><br><span class="line">    hexArr.<span class="title function_">push</span>(hex)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> hexArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">buf2hex</span>(<span class="params">buffer: <span class="built_in">ArrayBuffer</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer)]</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hex2buf</span>(<span class="params">hex: <span class="built_in">string</span></span>): <span class="title class_">ArrayBuffer</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">bytes</span>:<span class="built_in">number</span>[] = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; hex.<span class="property">length</span>; c += <span class="number">2</span>) &#123;</span><br><span class="line">    bytes.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(hex.<span class="title function_">substring</span>(c, <span class="number">2</span>), <span class="number">16</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(bytes).<span class="property">buffer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">str2buf</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">ArrayBuffer</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(str.<span class="property">length</span>) <span class="comment">// 2 bytes for each char</span></span><br><span class="line">  <span class="keyword">const</span> byteArr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buf)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    byteArr[i] = str.<span class="title function_">charCodeAt</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">buf2str</span>(<span class="params">arraybuffer: <span class="built_in">ArrayBuffer</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> chunkSize = <span class="number">512</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> byteArr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arraybuffer)</span><br><span class="line">  <span class="keyword">const</span> chunkNum = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(byteArr.<span class="property">length</span> / chunkSize)</span><br><span class="line">  <span class="keyword">let</span> chunkStart = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> outStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; chunkNum; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> chunkEnd = <span class="title class_">Math</span>.<span class="title function_">min</span>(byteArr.<span class="property">length</span>, chunkStart + chunkSize)</span><br><span class="line">    <span class="keyword">const</span> chunkedStr = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(...byteArr.<span class="title function_">slice</span>(chunkStart, chunkEnd))</span><br><span class="line">    outStr += chunkedStr</span><br><span class="line">    chunkStart += chunkSize</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> outStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="封装分包传输ChunkedArrayBuffer"><a href="#封装分包传输ChunkedArrayBuffer" class="headerlink" title="封装分包传输ChunkedArrayBuffer"></a>封装分包传输ChunkedArrayBuffer</h2><p><strong>&#x2F;utils&#x2F;ChunkedArrayBuffer.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChunkedArrayBuffer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">arraybuffer: <span class="built_in">ArrayBuffer</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">byteArr</span> = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arraybuffer)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chunkNum</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">byteArr</span>.<span class="property">length</span> / <span class="variable language_">this</span>.<span class="property">chunkSize</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> byteArr!: <span class="title class_">Uint8Array</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> chunkSize = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> chunkNum!: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> chunkStart = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> chunkIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> isPaused = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">getChunkIndex</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">chunkIndex</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeStart?: <span class="function">(<span class="params">byteLength: <span class="built_in">number</span>, chunkSize: <span class="built_in">number</span>, chunkNum: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">  extraFunc?: <span class="function">(<span class="params">arraybuffer: <span class="built_in">ArrayBuffer</span>, chunkIndex: <span class="built_in">number</span>, chunkNum: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">  afterEnd?: <span class="function">(<span class="params">byteLength: <span class="built_in">number</span>, chunkIndex: <span class="built_in">number</span>, chunkNum: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取下一个分片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  readNextChunk = (): <span class="title class_">ArrayBuffer</span> | <span class="function"><span class="params">undefined</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送下一帧 chunkIndex:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">chunkIndex</span>, <span class="string">&#x27;chunkStart:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">chunkStart</span>, <span class="string">&#x27;isPaused:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">isPaused</span>)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isPaused</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chunkStart</span> &lt; <span class="variable language_">this</span>.<span class="property">byteArr</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chunkIndex</span> &lt; <span class="number">0xfffe</span>) <span class="variable language_">this</span>.<span class="property">chunkIndex</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="property">chunkIndex</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chunkStart</span> += <span class="variable language_">this</span>.<span class="property">chunkSize</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">readChunkedArrayBuffer</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="title class_">ChunkedArrayBuffer</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">readNextChunk</span>.<span class="property">name</span>, <span class="string">&#x27;call next chunk paused&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取当前分片</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  readCurrentChunk = (): <span class="title class_">ArrayBuffer</span> | <span class="function"><span class="params">undefined</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">readChunkedArrayBuffer</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pause = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isPaused</span>) <span class="variable language_">this</span>.<span class="property">isPaused</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resume = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isPaused</span>) <span class="variable language_">this</span>.<span class="property">isPaused</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用设置的extraFunc方法</span></span><br><span class="line">  <span class="comment">// bluetooth/index.ts里设置了该方法，在其中调用了tt的接口向设备写入文件数据</span></span><br><span class="line">  <span class="keyword">private</span> readChunkedArrayBuffer = (): <span class="title class_">ArrayBuffer</span> | <span class="function"><span class="params">undefined</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chunkStart</span> &lt; <span class="variable language_">this</span>.<span class="property">byteArr</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> chunkEnd = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">byteArr</span>.<span class="property">length</span>, <span class="variable language_">this</span>.<span class="property">chunkStart</span> + <span class="variable language_">this</span>.<span class="property">chunkSize</span>)</span><br><span class="line">      <span class="keyword">const</span> chunk = <span class="variable language_">this</span>.<span class="property">byteArr</span>.<span class="title function_">slice</span>(<span class="variable language_">this</span>.<span class="property">chunkStart</span>, chunkEnd)</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-useless-call</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">extraFunc</span>) <span class="variable language_">this</span>.<span class="property">extraFunc</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [chunk, <span class="variable language_">this</span>.<span class="property">chunkIndex</span>, <span class="variable language_">this</span>.<span class="property">chunkNum</span>])</span><br><span class="line">      <span class="keyword">return</span> chunk</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="title class_">ChunkedArrayBuffer</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">readChunkedArrayBuffer</span>.<span class="property">name</span>, <span class="string">&#x27;chunk arraybuffer finished&#x27;</span>)</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-useless-call</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">afterEnd</span>) <span class="variable language_">this</span>.<span class="property">afterEnd</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [<span class="variable language_">this</span>.<span class="property">byteArr</span>.<span class="property">length</span>, <span class="variable language_">this</span>.<span class="property">chunkIndex</span>, <span class="variable language_">this</span>.<span class="property">chunkNum</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="封装传输帧FrameUtil"><a href="#封装传输帧FrameUtil" class="headerlink" title="封装传输帧FrameUtil"></a>封装传输帧FrameUtil</h2><p><strong>&#x2F;utils&#x2F;FrameUtil.ts</strong><br>传输帧FrameUtil  </p>
<blockquote>
<p>定义了分包的每个包结构是什么  </p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; crc16 &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/deviceUtil&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">KEY_BIN_STORAGE</span> = <span class="string">&#x27;test-file&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FrameUtil</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> genFrameArrayBuffer = (</span><br><span class="line">    <span class="attr">frameTypeId</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">dataBuffer</span>: <span class="title class_">ArrayBuffer</span> = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0</span>),</span><br><span class="line">    frameId = <span class="number">1</span></span><br><span class="line">  ): <span class="function"><span class="params">ArrayBuffer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 预声明常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些ID的设置与所使用的蓝牙通信协议相关，请根据自己的协议改动</span></span><br><span class="line">    <span class="comment">// 通常协议必备项目：帧数ID、数据包长度、数据包、CRC校验</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0x16进制，以0x开始的数据表示16进制。</span></span><br><span class="line">    <span class="comment">// 计算机中每位的权为16，即（16进制)10 = (10进制)1×16。</span></span><br><span class="line">    <span class="keyword">const</span> frameHead = <span class="number">0x3d5e</span></span><br><span class="line">    <span class="keyword">const</span> frameProductId = <span class="number">0x09</span></span><br><span class="line">    <span class="comment">// 计算crc（循环冗余校验）</span></span><br><span class="line">    <span class="keyword">const</span> frameLen = <span class="number">2</span> + <span class="number">2</span> + <span class="number">1</span> + <span class="number">1</span> + <span class="number">2</span> + dataBuffer.<span class="property">byteLength</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">const</span> frameBuffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(frameLen)</span><br><span class="line">    <span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="title class_">DataView</span>(frameBuffer)</span><br><span class="line">    <span class="comment">// 起始位置以byte为计数的指定偏移量 0 处储存一个16-bit数(无符号短整型).</span></span><br><span class="line">    dataView.<span class="title function_">setUint16</span>(<span class="number">0</span>, frameHead)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持从一个消息序列的最高位开始传送的那伙人叫做Big-Endians，</span></span><br><span class="line">    <span class="comment">// 支持从最低位开始传送的相对应地叫做Little-Endians</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// setUnit:(缓冲区行中列的索引, 赋给缓冲区列的值, True/False)</span></span><br><span class="line">    <span class="comment">// true: littleEndian</span></span><br><span class="line">    <span class="comment">// false/undefined: bigEndian</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Little-endian</span></span><br><span class="line">    <span class="comment">// 偏移量 2 byte处储存一个16-bit数。frameId:传输的第几帧</span></span><br><span class="line">    dataView.<span class="title function_">setUint16</span>(<span class="number">2</span>, frameId, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 偏移量 4 byte处储存一个8-bit数 [4,5)</span></span><br><span class="line">    dataView.<span class="title function_">setUint8</span>(<span class="number">4</span>, frameProductId)</span><br><span class="line">    <span class="comment">// 偏移量 5 byte处储存一个8-bit数 [5,6)</span></span><br><span class="line">    dataView.<span class="title function_">setUint8</span>(<span class="number">5</span>, frameTypeId)</span><br><span class="line">    <span class="comment">// Little-endian</span></span><br><span class="line">    <span class="comment">// 偏移量 6 byte处储存一个16-bit数 [6,8)</span></span><br><span class="line">    dataView.<span class="title function_">setUint16</span>(<span class="number">6</span>, dataBuffer.<span class="property">byteLength</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 将dataBuffer写入数据帧</span></span><br><span class="line">    <span class="keyword">const</span> data8Arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(dataBuffer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data8Arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      dataView.<span class="title function_">setUint8</span>(<span class="number">8</span> + i, data8Arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> crc8Arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(frameBuffer).<span class="title function_">slice</span>(<span class="number">0</span>, frameLen - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> crc = <span class="title function_">crc16</span>(crc8Arr)</span><br><span class="line">    <span class="comment">// 写入crc</span></span><br><span class="line">    <span class="comment">// littleEndian</span></span><br><span class="line">    dataView.<span class="title function_">setUint16</span>(frameLen - <span class="number">2</span>, crc, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> frameBuffer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="页面中实际应用"><a href="#页面中实际应用" class="headerlink" title="页面中实际应用"></a>页面中实际应用</h2><h3 id="index-mpx"><a href="#index-mpx" class="headerlink" title="index.mpx"></a>index.mpx</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;scanDevices&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #55efc4&quot;</span>&gt;</span>开始扫描蓝牙设备<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;stopScanDevices&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #ff7675&quot;</span>&gt;</span>停止扫描蓝牙设备<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;downloadFile&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #74b9ff&quot;</span>&gt;</span>下载用于传输的文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;timer&#125;&#125;&quot;</span>&gt;</span>扫描中...<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;connected&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>已连接到 &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;operation&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;disconnectDevice&quot;</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;canWrite&#125;&#125;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;startSendFile&quot;</span>&gt;</span>开始传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;canWrite&#125;&#125;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;sendCurrentFrame&quot;</span>&gt;</span>发送当前帧<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;canWrite&#125;&#125;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;sendNextFrame&quot;</span>&gt;</span>发送下一帧<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>已搜索到的设备数量:&#123;&#123; deviceList.length &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; deviceList &#125;&#125;&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;deviceId&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&quot;connectDevice(item)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px 0; border: 1px solid #b2bec3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 1.2rem&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 0.8rem&quot;</span>&gt;</span> [UUID] &#123;&#123; item.deviceId &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 0.8rem&quot;</span>&gt;</span>[信号强度] &#123;&#123; item.RSSI &#125;&#125;dBm<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.ts&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-ts"><a href="#index-ts" class="headerlink" title="index.ts"></a>index.ts</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpx, &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&quot;@mpxjs/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; buf2hex &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/deviceUtil&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChunkedArrayBuffer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/ChunkedArrayBuffer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FrameUtil</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/FrameUtil&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  openBluetoothAdapter,</span><br><span class="line">  closeBluetoothAdapter,</span><br><span class="line">  showToast,</span><br><span class="line">  stopBluetoothDevicesDiscovery,</span><br><span class="line">  connectBLEDevice,</span><br><span class="line">  getBLEDeviceServices,</span><br><span class="line">  getBLEDeviceCharacteristics,</span><br><span class="line">  notifyBLECharacteristicValueChange,</span><br><span class="line">  disconnectBLEDevice,</span><br><span class="line">  writeBLECharacteristicValue,</span><br><span class="line">  getBluetoothAdapterState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/bluetooth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USE_THIS_SERVICE_UUID</span> = <span class="string">&quot;0000FF03-0000-1000-8000-00805F9B34FB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WRITABLE_CHARACTERISTIC_UUID</span> = <span class="string">&quot;0000FF02-0000-1000-8000-00805F9B34FB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NOTIFYABLE_CHARACTERISTIC_UUID</span> = <span class="string">&quot;0000FF01-0000-1000-8000-00805F9B34FB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createPage</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">timer</span>: <span class="literal">null</span> <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">    <span class="attr">deviceList</span>: [],</span><br><span class="line">    <span class="comment">// deviceList: [</span></span><br><span class="line">    <span class="comment">//   &#123; deviceId: &quot;C0:2F:T1:KB:MD:6P&quot;, name: &quot;111&quot;, RSSI: -43 &#125;,</span></span><br><span class="line">    <span class="comment">//   &#123; deviceId: &quot;H2:G3:D5:K2:H1:E8&quot;, name: &quot;222&quot;, RSSI: -21 &#125;,</span></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    <span class="attr">deviceId</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">connected</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">canWrite</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">discoveryStarted</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">selectedDeviceId</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">selectedServiceId</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">selectedCharacteristicId</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">chunkedArrayBuffer</span>: <span class="keyword">new</span> <span class="title class_">ChunkedArrayBuffer</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0</span>)),</span><br><span class="line">    <span class="attr">progress</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">getDeviceList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">deviceList</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bluetooth onReady&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下载用于传输的文件</span></span><br><span class="line">  <span class="comment">// 下载文件,类型为ArrayBuffer,存到Storage</span></span><br><span class="line">  <span class="title function_">onDownloadStorage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url =</span><br><span class="line">      <span class="string">&quot;https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_200KB_CSV-1.csv&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下载用于传输的文件===&quot;</span>);</span><br><span class="line">    <span class="comment">// 类型为arraybuffer</span></span><br><span class="line">    tt.<span class="title function_">request</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;download file success&quot;</span>, res);</span><br><span class="line">          <span class="keyword">const</span> &#123; <span class="attr">data</span>: arraybuffer &#125; = res;</span><br><span class="line">          <span class="keyword">const</span> byteArr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arraybuffer);</span><br><span class="line">          <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(byteArr);</span><br><span class="line">          <span class="comment">// 保存为Array</span></span><br><span class="line">          tt.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&quot;test-file&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: arr,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setStorage success&quot;</span>, res);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;setStorage fail&quot;</span>, res);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;download file fail&quot;</span>, err);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 连接蓝牙</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 初始化蓝牙模块</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">openBluetoothAdapter</span>();</span><br><span class="line">      <span class="keyword">const</span> &#123; discovering &#125; = <span class="keyword">await</span> <span class="title function_">getBluetoothAdapterState</span>();</span><br><span class="line">      <span class="keyword">if</span> (discovering) <span class="variable language_">this</span>.<span class="property">discoveryStarted</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">err</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">      <span class="keyword">const</span> &#123; errMsg &#125; = err;</span><br><span class="line">      <span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: errMsg, <span class="attr">icon</span>: <span class="string">&quot;error&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听蓝牙适配器状态变化事件</span></span><br><span class="line">    tt.<span class="title function_">onBluetoothAdapterStateChange</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; available, discovering &#125; = res;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(available, discovering);</span><br><span class="line">      <span class="keyword">if</span> (!available) <span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;蓝牙不可用&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;error&quot;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onUnload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 停止搜寻附近的蓝牙外围设备。</span></span><br><span class="line">    <span class="title function_">stopBluetoothDevicesDiscovery</span>();</span><br><span class="line">    <span class="comment">// 关闭蓝牙模块。</span></span><br><span class="line">    <span class="title function_">closeBluetoothAdapter</span>();</span><br><span class="line">    <span class="comment">// 取消监听蓝牙适配器状态变化事件</span></span><br><span class="line">    tt.<span class="title function_">offBluetoothAdapterStateChange</span>(<span class="function">(<span class="params">args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="comment">// 取消监听寻找到新设备的事件</span></span><br><span class="line">    tt.<span class="title function_">offBluetoothDeviceFound</span>(<span class="function">(<span class="params">args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="comment">// 取消监听蓝牙低功耗设备的特征值变化事件</span></span><br><span class="line">    tt.<span class="title function_">offBLECharacteristicValueChange</span>(<span class="function">(<span class="params">args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 获取在蓝牙模块生效期间所有已发现的蓝牙设备。包括已经和本机处于连接状态的设备。</span></span><br><span class="line">    <span class="title function_">getBluetoothDevices</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;所有已发现的蓝牙设备&quot;</span>, <span class="variable language_">this</span>.<span class="property">deviceList</span>);</span><br><span class="line">      tt.<span class="title function_">getBluetoothDevices</span>(&#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> devices = res.<span class="property">devices</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">deviceList</span> = devices;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getBluetoothDevices fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刷新已搜索到的设备</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">refreshScannedDevice</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接设备 start&quot;</span>);</span><br><span class="line">      tt.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;刷新设备列表&quot;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">mask</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getBluetoothDevices</span>();</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始扫描蓝牙设备</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">scanDevices</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> tt.<span class="title function_">startBluetoothDevicesDiscovery</span>(&#123;</span><br><span class="line">        <span class="attr">services</span>: [],</span><br><span class="line">        <span class="attr">allowDuplicatesKey</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">interval</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始搜寻设备&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">          tt.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;开始搜寻设备&quot;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">mask</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">// 刷新 获取在蓝牙模块生效期间所有已发现的蓝牙设备。包括已经和本机处于连接状态的设备。</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">refreshScannedDevice</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="string">`startBluetoothDevicesDiscovery fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span></span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止扫描蓝牙设备</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">stopScanDevices</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> tt.<span class="title function_">stopBluetoothDevicesDiscovery</span>(&#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;停止扫描设备&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">          tt.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;停止扫描设备&quot;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">mask</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="string">`stopBluetoothDevicesDiscovery fail: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(res)&#125;</span>`</span></span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击某个设备，选择连接该设备</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">connectDevice</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接设备&quot;</span>, item);</span><br><span class="line">      <span class="comment">// 找到某个id的服务-&gt;找到某个id的特征值-&gt;利用write特征值去写入数据</span></span><br><span class="line">      <span class="keyword">const</span> device = &#123;</span><br><span class="line">        <span class="attr">deviceId</span>: item.<span class="property">deviceId</span>,</span><br><span class="line">        <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">connectBLEDevice</span>(device.<span class="property">deviceId</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">stopBluetoothDevicesDiscovery</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;try connected to &quot;</span>, device.<span class="property">name</span>);</span><br><span class="line">        tt.<span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: device.<span class="property">name</span>, <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span> &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = device.<span class="property">name</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedDeviceId</span> = device.<span class="property">deviceId</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">connected</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取设备的低功耗蓝牙的服务</span></span><br><span class="line">        <span class="keyword">const</span> &#123; services &#125; = <span class="keyword">await</span> <span class="title function_">getBLEDeviceServices</span>(<span class="variable language_">this</span>.<span class="property">selectedDeviceId</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">&quot;getBLEDeviceServices&quot;</span>,</span><br><span class="line">          services <span class="keyword">instanceof</span> <span class="title class_">Array</span> &amp;&amp; services.<span class="property">length</span>,</span><br><span class="line">          services</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (services <span class="keyword">instanceof</span> <span class="title class_">Array</span> &amp;&amp; services.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> service <span class="keyword">of</span> services) &#123;</span><br><span class="line">            <span class="comment">// 找id为 xxxx FF03 -xxxx ... 的service</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;遍历service,找FF03。&quot;</span>, service);</span><br><span class="line">            <span class="keyword">if</span> (service.<span class="property">serviceId</span>.<span class="title function_">toUpperCase</span>() !== <span class="variable constant_">USE_THIS_SERVICE_UUID</span>) &#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">selectedServiceId</span> = service.<span class="property">serviceId</span>;</span><br><span class="line">            <span class="keyword">const</span> &#123; characteristics &#125; = <span class="keyword">await</span> <span class="title function_">getBLEDeviceCharacteristics</span>(&#123;</span><br><span class="line">              <span class="attr">deviceId</span>: <span class="variable language_">this</span>.<span class="property">selectedDeviceId</span>,</span><br><span class="line">              <span class="attr">serviceId</span>: <span class="variable language_">this</span>.<span class="property">selectedServiceId</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">              <span class="string">&quot;characteristics&quot;</span>,</span><br><span class="line">              characteristics,</span><br><span class="line">              characteristics <span class="keyword">instanceof</span> <span class="title class_">Array</span> &amp;&amp; characteristics.<span class="property">length</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">// 找到FF01的特征值：通知notify</span></span><br><span class="line">            <span class="comment">// 找到FF02的特征值：写入write -&gt; 利用这个特征值向设备写入数据</span></span><br><span class="line">            <span class="keyword">if</span> (characteristics <span class="keyword">instanceof</span> <span class="title class_">Array</span> &amp;&amp; characteristics.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">const</span> characteristic <span class="keyword">of</span> characteristics) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">                  <span class="string">&quot;遍历characteristic,找FF02和FF01。&quot;</span>,</span><br><span class="line">                  characteristic</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                  characteristic.<span class="property">properties</span>.<span class="property">notify</span> &amp;&amp;</span><br><span class="line">                  characteristic.<span class="property">characteristicId</span>.<span class="title function_">toUpperCase</span>() ===</span><br><span class="line">                    <span class="variable constant_">NOTIFYABLE_CHARACTERISTIC_UUID</span></span><br><span class="line">                ) &#123;</span><br><span class="line">                  <span class="keyword">await</span> <span class="title function_">notifyBLECharacteristicValueChange</span>(&#123;</span><br><span class="line">                    <span class="attr">deviceId</span>: <span class="variable language_">this</span>.<span class="property">selectedDeviceId</span>,</span><br><span class="line">                    <span class="attr">serviceId</span>: <span class="variable language_">this</span>.<span class="property">selectedServiceId</span>,</span><br><span class="line">                    <span class="attr">characteristicId</span>: characteristic.<span class="property">characteristicId</span>,</span><br><span class="line">                    <span class="attr">state</span>: <span class="literal">true</span>,</span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;notify&quot;</span>, characteristic.<span class="property">characteristicId</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                  characteristic.<span class="property">properties</span>.<span class="property">write</span> ||</span><br><span class="line">                  characteristic.<span class="property">characteristicId</span>.<span class="title function_">toUpperCase</span>() ===</span><br><span class="line">                    <span class="variable constant_">WRITABLE_CHARACTERISTIC_UUID</span></span><br><span class="line">                ) &#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">canWrite</span> = <span class="literal">true</span>;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">selectedCharacteristicId</span> =</span><br><span class="line">                    characteristic.<span class="property">characteristicId</span>;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;can write&quot;</span>, characteristic.<span class="property">characteristicId</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (<span class="attr">err</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        <span class="keyword">const</span> &#123; errMsg &#125; = err;</span><br><span class="line">        <span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: errMsg, <span class="attr">icon</span>: <span class="string">&quot;error&quot;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 断开已连接的设备</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">disconnectDevice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">disconnectBLEDevice</span>(<span class="variable language_">this</span>.<span class="property">selectedDeviceId</span>);</span><br><span class="line">      <span class="comment">// this.chs = []</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">connected</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canWrite</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">err</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始发送文件</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">startSendFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始发送文件==== &#x27;test-file&#x27;&quot;</span>);</span><br><span class="line">      <span class="comment">// 从storage中读取文件二进制数组 8bit</span></span><br><span class="line">      <span class="keyword">const</span> binArr = tt.<span class="title function_">getStorageSync</span>(<span class="string">&quot;test-file&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binArr&quot;</span>, binArr);</span><br><span class="line">      <span class="keyword">if</span> (binArr &amp;&amp; binArr <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        <span class="comment">// 文件：把数组转为buffer类型</span></span><br><span class="line">        <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(binArr).<span class="property">buffer</span>;</span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chunkedArrayBuffer</span> = <span class="keyword">new</span> <span class="title class_">ChunkedArrayBuffer</span>(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置extraFunc函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chunkedArrayBuffer</span>.<span class="property">extraFunc</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">          arraybuffer: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">          index: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">          totalNum: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">        </span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 0x48为 FrameTypeID</span></span><br><span class="line">          <span class="comment">// 这些ID的设置与所使用的蓝牙通信协议相关，请根据自己的协议改动</span></span><br><span class="line">          <span class="comment">// 通常协议必备项目：帧数ID、数据包长度、数据包、CRC校验</span></span><br><span class="line">          <span class="keyword">const</span> frameBuffer = <span class="title class_">FrameUtil</span>.<span class="title function_">genFrameArrayBuffer</span>(</span><br><span class="line">            <span class="number">0x48</span>,</span><br><span class="line">            arraybuffer,</span><br><span class="line">            index + <span class="number">1</span></span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// 更新上传进度条</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">progress</span> = (((index + <span class="number">1</span>) * <span class="number">100</span>) / totalNum).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">          <span class="comment">// buffer to hex string，蓝牙传输数据规定要hex编码</span></span><br><span class="line">          <span class="keyword">const</span> hex = <span class="title function_">buf2hex</span>(frameBuffer);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向设备写入文件的某段切片&quot;</span>, hex.<span class="property">length</span>, <span class="string">&quot; value:&quot;</span>, hex);</span><br><span class="line">          <span class="comment">// 向设备写入文件的某段切片</span></span><br><span class="line">          <span class="title function_">writeBLECharacteristicValue</span>(&#123;</span><br><span class="line">            <span class="attr">deviceId</span>: <span class="variable language_">this</span>.<span class="property">selectedDeviceId</span>,</span><br><span class="line">            <span class="attr">serviceId</span>: <span class="variable language_">this</span>.<span class="property">selectedServiceId</span>,</span><br><span class="line">            <span class="attr">characteristicId</span>: <span class="variable language_">this</span>.<span class="property">selectedCharacteristicId</span>,</span><br><span class="line">            <span class="attr">value</span>: hex,</span><br><span class="line">          &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;写入成功&quot;</span>, res))</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;写入失败&quot;</span>, err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chunkedArrayBuffer</span>.<span class="title function_">readCurrentChunk</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;invalid file&quot;</span>, binArr);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">err</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;开始发送文件 fail&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 发送当前帧</span></span><br><span class="line">  <span class="title function_">sendCurrentFrame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chunkedArrayBuffer</span>.<span class="title function_">readCurrentChunk</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 发送下一帧</span></span><br><span class="line">  <span class="title function_">sendNextFrame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chunkedArrayBuffer</span>.<span class="title function_">readNextChunk</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>Mpx</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>typescript</tag>
        <tag>Mpx</tag>
        <tag>小程序</tag>
        <tag>飞书小程序</tag>
        <tag>蓝牙</tag>
        <tag>分包传输</tag>
      </tags>
  </entry>
  <entry>
    <title>React纯前端实现把div(含有Echart)下载导出为word文档</title>
    <url>/2023/07/19/react-download-pdf/</url>
    <content><![CDATA[<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>前端实现点击按钮后，把某个div内的所有内容导出为word文档（<code>.docx</code>格式）。  </p>
<ul>
<li>将页面导出为文档时，需要设置页边距、行距、首行缩进等段落格式，以及字体大小等等（类似于在word中写文本也需要设置的一些信息）。</li>
<li>div内含有Echart生成的图表，我们在导出时，为了防止文档中的图表大小溢出，需要调节图片canvas&#x2F;img的大小，重新规定它们的<code>width</code>、<code>height</code>。</li>
</ul>
<span id="more"></span>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol>
<li>要下载的div设置id为<code>report</code>（自定义设置），获取这个dom元素<code>document.getElementById(&quot;report&quot;)</code>。</li>
<li>将这段React代码转为html代码：<br>（1）canvas echart图表转为图片；<br>（2）做分页，<code>style=&quot;page-break-after: always&quot;</code>。<br>（3）替换一些语法兼容html，比如把 <code>&lt;br&gt;</code>转为<code>&lt;br&gt;&lt;br/&gt;</code>。<br>（4）设置页边距，在html中是设置body的<code>printmarginleft</code>、<code>printmarginright</code>、<code>printmargintop</code>、<code>printmarginbottom</code>属性。</li>
<li>获取React代码的style样式代码，可以直接替换为html的格式，也可以重新设置样式以便适应word文档。设置段落格式、字体格式等。</li>
<li>把上述html代码和style代码合并成一个完整的HTML文档。</li>
<li>使用准备好的HTML创建Blob对象，调用FileSaver.saveAs把这个Blob导出为<code>.docx</code>文档。</li>
</ol>
<h2 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, message &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&quot;file-saver&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DownloadReportComp</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> componentRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">downloadReport</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这个dom元素是要导出的pdf的div容器</span></span><br><span class="line">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;report&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把当前 vue 所展示的页面对应的 html 转换成一个字符串，这里用到了上面的三个函数，所以，如果是写在外面的话要引用进来</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="title function_">getReportHtml</span>(<span class="title function_">getHtml</span>(element), <span class="title function_">getStyle</span>());</span><br><span class="line">    <span class="keyword">const</span> f_name = <span class="string">&quot;打印word报告&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用我们刚刚准备好的html模板并创建Blob对象</span></span><br><span class="line">    <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([html], &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document;charset=utf-8&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 调用FileSaver.saveAs导出下载word</span></span><br><span class="line">    <span class="title function_">saveAs</span>(blob, f_name + <span class="string">&quot;.docx&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getReportHtml</span> = (<span class="params">mhtml, style</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">				Content-Type: text/html; charset=&quot;utf-8&quot;</span></span><br><span class="line"><span class="string">					&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">					&lt;html&gt;</span></span><br><span class="line"><span class="string">					&lt;head&gt;</span></span><br><span class="line"><span class="string">					&lt;style&gt;</span></span><br><span class="line"><span class="string">						<span class="subst">$&#123;style&#125;</span></span></span><br><span class="line"><span class="string">					&lt;/style&gt;</span></span><br><span class="line"><span class="string">					&lt;/head&gt;</span></span><br><span class="line"><span class="string">					&lt;body&gt;</span></span><br><span class="line"><span class="string">						<span class="subst">$&#123;mhtml&#125;</span></span></span><br><span class="line"><span class="string">					&lt;/body&gt;</span></span><br><span class="line"><span class="string">					&lt;/html&gt;</span></span><br><span class="line"><span class="string">				`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getHtml</span> = (<span class="params">dom</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> _dom = dom || <span class="variable language_">document</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> canvass = _dom.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    <span class="comment">// let imgRepalce = _dom.querySelectorAll(&quot;.imgRepalce&quot;);</span></span><br><span class="line">    <span class="keyword">let</span> imageList = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(&quot;canvass&quot;, [...canvass], &quot;imgRepalce&quot;, imgRepalce);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//canvas echart图表转为图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k4 = <span class="number">0</span>; k4 &lt; canvass.<span class="property">length</span>; k4++) &#123;</span><br><span class="line">      <span class="keyword">let</span> imageURL = canvass[k4].<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">      img.<span class="property">src</span> = imageURL;</span><br><span class="line">      img.<span class="property">width</span> = <span class="number">460</span>;</span><br><span class="line">      imageList.<span class="title function_">push</span>(img.<span class="property">outerHTML</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&quot;imageList&quot;, [...imageList]);</span></span><br><span class="line">    <span class="comment">//做分页</span></span><br><span class="line">    <span class="comment">//style=&quot;page-break-after: always&quot;</span></span><br><span class="line">    <span class="keyword">let</span> pages = _dom.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.result&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k5 = <span class="number">0</span>; k5 &lt; pages.<span class="property">length</span>; k5++) &#123;</span><br><span class="line">      pages[k5].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;page-break-after: always&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = _dom.<span class="property">outerHTML</span>;</span><br><span class="line">    <span class="comment">//result = result.replace(/&lt;colgroup&gt;(.*?)&lt;\/colgroup&gt;/gi, &#x27;&#x27;)</span></span><br><span class="line">    <span class="comment">//result = result.replace(/&lt;canvas (.*?)&gt;&lt;\/canvas&gt;/gi, &#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; canvass.length; i++) &#123;</span></span><br><span class="line">    <span class="comment">//   result = result.replace(</span></span><br><span class="line">    <span class="comment">//     canvass[i].outerHTML,</span></span><br><span class="line">    <span class="comment">//     &#x27;&lt;div class=&quot;img-replace&quot;&gt;&#x27; + imageList[i] + &quot;&lt;/div&gt;&quot;</span></span><br><span class="line">    <span class="comment">//   );</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; canvass.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      result = result.<span class="title function_">replace</span>(canvass[i].<span class="property">outerHTML</span>, imageList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    result = result.<span class="title function_">replace</span>(<span class="regexp">/&lt;img (.*?)&gt;/gi</span>, <span class="string">&quot;&lt;img $1&gt;&lt;/img&gt;&quot;</span>);</span><br><span class="line">    result = result.<span class="title function_">replace</span>(<span class="regexp">/&lt;br&gt;/gi</span>, <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    result = result.<span class="title function_">replace</span>(<span class="regexp">/&lt;hr&gt;/gi</span>, <span class="string">&quot;&lt;hr&gt;&lt;/hr&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// console.log(&quot;result&quot;, result);</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&quot;&lt;body printmarginleft=&#x27;48&#x27; printmarginright=&#x27;48&#x27; printmargintop=&#x27;32&#x27; printmarginbottom=&#x27;32&#x27;&gt;&quot;</span> +</span><br><span class="line">      result +</span><br><span class="line">      <span class="string">&quot;&lt;/body&gt;&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getStyle</span> = (<span class="params">notPrint</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/meta&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">// let str = &#x27;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/meta&gt;&#x27;,</span></span><br><span class="line">    <span class="comment">// let styles = document.querySelectorAll(&quot;style&quot;);</span></span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; styles.length; i++) &#123;</span></span><br><span class="line">    <span class="comment">//   str += styles[i].outerHTML;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    str +=</span><br><span class="line">      <span class="string">&quot;&lt;style&gt;.report-passage&#123;line-height: 2em;text-indent: 2em; margin: 0.5em 0;&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    str +=</span><br><span class="line">      <span class="string">&quot;&lt;style&gt;&quot;</span> +</span><br><span class="line">      (notPrint ? notPrint : <span class="string">&quot;.no-print&quot;</span>) +</span><br><span class="line">      <span class="string">&quot;&#123;display:none;&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    str +=</span><br><span class="line">      <span class="string">&quot;&lt;style&gt;.report-container p&#123;margin: 0.5em 0;text-indent: 0;&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    str += <span class="string">&quot;&lt;style&gt;h5&#123;font-color: #2fb89e;&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line">    str += <span class="string">&quot;&lt;/head&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">// console.log(&quot;style&quot;, str);</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> downloadReport()&#125;</span></span><br><span class="line"><span class="language-xml">        style=&#123;&#123; position: &quot;absolute&quot;, zIndex: 5, right: 50 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        下载</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&quot;report&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;componentRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">fontSize:</span> &quot;<span class="attr">1rem</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;report-container&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;report-passage&quot;</span> <span class="attr">className</span>=<span class="string">&quot;report-passage&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">textAlign:</span> &quot;<span class="attr">center</span>&quot;, <span class="attr">fontSize:</span> &quot;<span class="attr">1.2rem</span>&quot;, <span class="attr">fontWeight:</span> <span class="attr">700</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            能力评价报告</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">textAlign:</span> &quot;<span class="attr">center</span>&quot;, <span class="attr">fontSize:</span> &quot;<span class="attr">1.2rem</span>&quot;, <span class="attr">fontWeight:</span> <span class="attr">700</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            杨浦区</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>一、基本情况<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>名称：四平路街道。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>常住人口：120000 人。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>二、风景评估结果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>最终得分为12。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>三、建筑评估情况<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>评估结果为15。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          &#123;/* 下方是一个自定义组件，里面是Echart生成的一些图表 */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/* <span class="tag">&lt;<span class="name">PassageChart</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DownloadReportComp</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SSL/TSL证书实现HTTPS双向认证2-实践方案</title>
    <url>/2023/07/20/ssl-2/</url>
    <content><![CDATA[<p>本文介绍了以下内容：</p>
<ol>
<li>HTTPS双向认证的过程。</li>
<li>笔者所要解决的问题场景以及进行的前期准备(申请客户端证书)。</li>
<li>前端携带证书发请求的几种方案，以及方案的代码样例和优缺点等。</li>
</ol>
<span id="more"></span>
<h2 id="双向认证介绍"><a href="#双向认证介绍" class="headerlink" title="双向认证介绍"></a>双向认证介绍</h2><p>上篇文章已经介绍了HTTPS单向认证的原理和过程，详见<a href="https://hengqu4.github.io/2023/07/20/ssl-1">基于SSL&#x2F;TSL证书实现HTTPS双向认证1-原理介绍</a>。<br>HTTPS中的<strong>单向认证</strong>即为<strong>服务端认证</strong>，而客户端认证是可选的。<br>单向认证的过程中，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。 </p>
<p>HTTPS在TLS标准中是提供了双向认证的能力的，双向认证是指客户端和服务器端都需要验证对方的身份，在建立Https连接的过程中，握手的流程比单向认证多了几步。<br>双向认证的过程中，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。 </p>
<h2 id="问题场景描述"><a href="#问题场景描述" class="headerlink" title="问题场景描述"></a>问题场景描述</h2><p>目前要在移动端新增功能，该功能的后端接口原本是只能内网访问，由于新功能只能在外网环境下使用，现需要将该API接口暴露在公网环境下，为了安全性考虑，需要给移动端增加客户端认证，由此笔者对双向认证展开调，并提出了几个实践方案以及其优缺点。  </p>
<h2 id="申请客户端证书"><a href="#申请客户端证书" class="headerlink" title="申请客户端证书"></a>申请客户端证书</h2><p>需要准备<strong>客户端证书</strong>，包括：</p>
<ul>
<li>cert.pem：公钥证书，</li>
<li>private_key.pem：私钥证书，</li>
<li>trust_cert_chain_server.pem：根证书。</li>
</ul>
<p>客户端的工作需要以下步骤：  </p>
<ol>
<li>生成客户端证书和私钥，可以使用openssl命令或者其他工具生成，注意证书需要符合服务器端的要求。</li>
<li>把客户端证书上传到服务器端，服务器端需要把客户端证书添加到信任列表中。</li>
<li>在前端代码中添加证书验证的逻辑，通过浏览器的API实现，比如在请求服务器端API时，需要把客户端证书和私钥一起发送到服务器端，然后根据服务器端返回的证书进行验证。</li>
<li>如果证书验证通过，建立安全通信通道进行数据传输。</li>
</ol>
<p>需要注意的是，在前端代码中添加证书验证的逻辑时，需要注意证书的安全性和有效期，以及证书的更新和维护等问题。  </p>
<h2 id="前端携带证书发请求"><a href="#前端携带证书发请求" class="headerlink" title="前端携带证书发请求"></a>前端携带证书发请求</h2><h3 id="证书放到请求头"><a href="#证书放到请求头" class="headerlink" title="证书放到请求头"></a>证书放到请求头</h3><p>在发请求的时候，前端需要使用XMLHttpRequest或Fetch API来发送请求。<br>其中，XMLHttpRequest可以使用setRequestHeader方法来设置请求头，Fetch API可以使用headers属性来设置请求头。<br>在设置请求头的时候，需要添加Authorization字段，并把证书和私钥通过Base64编码后放在该字段中。同时，还需要添加Content-Type字段，并指定为application&#x2F;json，表示请求体的格式为JSON。</p>
<ol>
<li>前端发送请求：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成证书和私钥，并Base64编码</span></span><br><span class="line"><span class="keyword">const</span> cert = <span class="string">&#x27;xxxxxx&#x27;</span>; <span class="comment">// 客户端证书</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;xxxxxx&#x27;</span>; <span class="comment">// 客户端私钥</span></span><br><span class="line"><span class="keyword">const</span> authorization = <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`<span class="subst">$&#123;cert&#125;</span>:<span class="subst">$&#123;key&#125;</span>`</span>)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://example.com/api&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;;</span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: authorization</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br></pre></td></tr></table></figure></li>
<li>服务端需要在接收到请求时，从请求头中获取证书和私钥，并进行验证。可以使用Node.js中的tls模块来实现证书验证。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = https.<span class="title function_">createServer</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;server-key.pem&#x27;</span>)),</span><br><span class="line">  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;server-cert.pem&#x27;</span>)),</span><br><span class="line">  <span class="attr">requestCert</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rejectUnauthorized</span>: <span class="literal">true</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cert = req.<span class="property">socket</span>.<span class="title function_">getPeerCertificate</span>();</span><br><span class="line">  <span class="keyword">const</span> authorized = req.<span class="property">socket</span>.<span class="property">authorized</span>;</span><br><span class="line">  <span class="keyword">const</span> error = req.<span class="property">socket</span>.<span class="property">authorizationError</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (authorized) &#123;</span><br><span class="line">    <span class="comment">// 验证证书的有效性</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">401</span>;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Unauthorized&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">443</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意</strong>：在实际使用中，需要根据服务器端的要求来设置Authorization字段的格式和内容。同时，还需要对证书和私钥进行保护，避免泄露和被恶意利用。 </p>
<p><strong>缺点</strong>：按照这种做法，证书会暴露在静态代码中，这种行为会泄露我们的证书和私钥，在前端静态代码中直接暴露证书和私钥是非常不安全的，容易被攻击者窃取。  </p>
<h3 id="浏览器客户端证书存储机制"><a href="#浏览器客户端证书存储机制" class="headerlink" title="浏览器客户端证书存储机制"></a>浏览器客户端证书存储机制</h3><p>我们可以考虑使用浏览器提供的客户端证书存储机制。这种机制可以让浏览器管理我们的证书和私钥，并在需要的时候自动调用。  </p>
<ol>
<li><p>把客户端证书导入到浏览器的证书存储中。这个过程因浏览器不同而异，一般来说，我们可以在浏览器的设置中找到证书管理工具，然后选择“导入证书”功能，把客户端证书导入到证书存储中。</p>
</li>
<li><p>在前端代码中添加证书验证的逻辑，通过浏览器的API实现。我们可以使用XMLHttpRequest或Fetch API来发送请求，并在请求中添加证书的标识。浏览器会自动调用证书存储中的证书和私钥，进行双向认证。<br>您说的很对，在前端静态代码中直接暴露证书和私钥是非常不安全的，容易被攻击者窃取。为了避免这种情况，我们可以考虑使用浏览器提供的客户端证书存储机制。这种机制可以让浏览器管理我们的证书和私钥，并在需要的时候自动调用。下面是具体的步骤：</p>
</li>
<li><p>生成客户端证书和私钥，可以使用openssl命令或其他工具生成，注意证书需要符合服务器端的要求。</p>
</li>
<li><p>把客户端证书上传到服务器端，并在服务器端添加到信任列表中。</p>
</li>
<li><p>把客户端证书导入到浏览器的证书存储中。这个过程因浏览器不同而异，一般来说，我们可以在浏览器的设置中找到证书管理工具，然后选择“导入证书”功能，把客户端证书导入到证书存储中。</p>
</li>
<li><p>在前端代码中添加证书验证的逻辑，通过浏览器的API实现。我们可以使用XMLHttpRequest或Fetch API来发送请求，并在请求中添加证书的标识。浏览器会自动调用证书存储中的证书和私钥，进行双向认证。</p>
</li>
</ol>
<p>以下是示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://example.com/api&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;;</span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span><br><span class="line">  <span class="attr">agent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123;</span><br><span class="line">    <span class="attr">cert</span>: certBuffer,</span><br><span class="line">    <span class="attr">key</span>: keyBuffer,</span><br><span class="line">    <span class="attr">passphrase</span>: <span class="string">&#x27;passphrase&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br></pre></td></tr></table></figure>
<p><strong>缺点</strong>：这种方法还需要让使用用户手动导入证书，会增加软件使用成本，这会影响用户体验。另外，如果每个用户都需要手动导入证书，那管理起来也会非常麻烦。</p>
<h3 id="前端动态生成证书"><a href="#前端动态生成证书" class="headerlink" title="前端动态生成证书"></a>前端动态生成证书</h3><p>在客户端动态生成证书和私钥，并在发送请求时把证书和私钥一起发送给服务器端。</p>
<ol>
<li><p>在前端代码中使用crypto API动态生成客户端证书和私钥。可以使用以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; privateKey, publicKey &#125; = <span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">generateKey</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;RSASSA-PKCS1-v1_5&quot;</span>,</span><br><span class="line">    <span class="attr">modulusLength</span>: <span class="number">2048</span>,</span><br><span class="line">    <span class="attr">publicExponent</span>: <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]),</span><br><span class="line">    <span class="attr">hash</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;SHA-256&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&quot;sign&quot;</span>, <span class="string">&quot;verify&quot;</span>]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cert = <span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">exportKey</span>(<span class="string">&quot;spki&quot;</span>, publicKey);</span><br><span class="line"><span class="keyword">const</span> key = <span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">exportKey</span>(<span class="string">&quot;pkcs8&quot;</span>, privateKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> certPEM = <span class="string">`-----BEGIN CERTIFICATE-----\n<span class="subst">$&#123;btoa(<span class="built_in">String</span>.fromCharCode(...<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(cert)))&#125;</span>\n-----END CERTIFICATE-----`</span>;</span><br><span class="line"><span class="keyword">const</span> keyPEM = <span class="string">`-----BEGIN PRIVATE KEY-----\n<span class="subst">$&#123;btoa(<span class="built_in">String</span>.fromCharCode(...<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(key)))&#125;</span>\n-----END PRIVATE KEY-----`</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在发送请求时把证书和私钥一起发送到服务器端。可以使用XMLHttpRequest或Fetch API来发送请求，并把证书和私钥放在请求头中。以下是示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://example.com/api&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;;</span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Client-Cert&#x27;</span>: certPEM,</span><br><span class="line">    <span class="string">&#x27;X-Client-Key&#x27;</span>: keyPEM</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务器端进行证书的验证。服务器端需要把客户端证书添加到信任列表中，并在接收请求时验证证书的有效性。可以使用Node.js中的tls模块来实现证书验证。以下是示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;server-key.pem&#x27;</span>),</span><br><span class="line">  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;server-cert.pem&#x27;</span>),</span><br><span class="line">  <span class="attr">ca</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;client-cert.pem&#x27;</span>),</span><br><span class="line">  <span class="attr">requestCert</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rejectUnauthorized</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">https.<span class="title function_">createServer</span>(options, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> certPEM = req.<span class="property">socket</span>.<span class="title function_">getPeerCertificate</span>().<span class="property">raw</span>.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">  <span class="comment">// 验证证书的有效性</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">443</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>问题</strong>：后端本来已经根据申请好的客户端证书写好了一套逻辑，如果前端改为用动态生成证书的方式，那么后端需要重新开发。</p>
<h3 id="nginx代理"><a href="#nginx代理" class="headerlink" title="nginx代理"></a>nginx代理</h3><p>可以通过nginx来实现这个功能，在nginx中开启双向认证。<br>在nginx配置文件中添加以下内容，用于指定客户端证书和私钥的路径和密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssl_client_certificate /path/to/client/cert.pem;</span><br><span class="line">ssl_client_key /path/to/client/key.pem;</span><br><span class="line">ssl_password_file /path/to/client/password.txt;</span><br></pre></td></tr></table></figure>
<p>其中，<code>/path/to/client/cert.pem</code>和<code>/path/to/client/key.pem</code>分别为客户端证书和私钥的路径，<code>/path/to/client/password.txt</code>为密钥库密码的文件路径。  </p>
<p>在nginx配置文件中添加以下内容，用于启用双向认证：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssl_verify_client on;</span><br><span class="line">ssl_verify_depth 2;</span><br></pre></td></tr></table></figure>
<p>其中，<code>ssl_verify_client on</code>表示启用双向认证，<code>ssl_verify_depth 2</code>表示验证证书链的深度。<br>重启nginx服务，使配置生效。  </p>
<p>当客户端发起请求时，nginx会要求客户端提供证书，如果客户端没有提供证书或者证书验证失败，则请求将被拒绝。同时，由于证书和私钥的路径和密码并没有写在代码中，因此也提高了证书和私钥的安全性。</p>
<p><strong>问题</strong>：小程序是打包到 微信平台&#x2F;飞书平台 发布的，开发人员没有办法在平台服务器中配置nginx的相关文件。</p>
<h3 id="nginx-再找个域名做中转"><a href="#nginx-再找个域名做中转" class="headerlink" title="nginx+再找个域名做中转"></a>nginx+再找个域名做中转</h3><p>业务接口后端为test.com，中转域名为auth.com。  </p>
<ul>
<li>auth.com和test.com实现nginx的双向认证。  </li>
<li>先从小程序代理到auth.com，这里部分接口做权限验证。通过后才可以调用业务接口。</li>
</ul>
<p>小程序代理的样例代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://your-proxy-server.com/your-api-endpoint&#x27;</span>,</span><br><span class="line">  <span class="attr">header</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Proxy-Host&#x27;</span>: <span class="string">&#x27;your-backend-server.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Proxy-Port&#x27;</span>: <span class="string">&#x27;your-backend-port&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机网络</category>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>SSL</tag>
        <tag>HTTPS</tag>
        <tag>双向认证</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SSL/TSL证书实现HTTPS双向认证1-原理介绍</title>
    <url>/2023/07/20/ssl-1/</url>
    <content><![CDATA[<p>本文主要讲述了以下内容：</p>
<ol>
<li>介绍了SSL和TSL的关系，</li>
<li>服务端server申请CA数字证书，</li>
<li>HTTPS认证的过程和原理。</li>
</ol>
<span id="more"></span>
<h2 id="SSL和TSL的关系"><a href="#SSL和TSL的关系" class="headerlink" title="SSL和TSL的关系"></a>SSL和TSL的关系</h2><p>由于HTTPS的推出受到了很多人的欢迎，在SSL更新到3.0时，IETF对SSL3.0进行了标准化，并添加了少数机制(但是几乎和SSL3.0无差异)，标准化后的IETF更名为TLS1.0(Transport Layer Security 安全传输层协议)，可以说<strong>TLS就是SSL的新版本3.1</strong>，并同时发布“RFC2246-TLS加密协议详解”。  </p>
<ul>
<li><p>SSL（Secure Socket Layer，安全套接字层）：1994年为 Netscape 所研发，SSL 协议位于 TCP&#x2F;IP 协议与各种应用层协议之间，为数据通讯提供安全支持。</p>
</li>
<li><p>TLS（Transport Layer Security，传输层安全）：其前身是 SSL，它最初的几个版本（SSL 1.0、SSL 2.0、SSL 3.0）由网景公司开发，1999年从 3.1 开始被 IETF 标准化并改名，发展至今已经有 TLS 1.0、TLS 1.1、TLS 1.2 三个版本。SSL3.0和TLS1.0由于存在安全漏洞，已经很少被使用到。TLS 1.3 改动会比较大，目前还在草案阶段，目前使用最广泛的是TLS 1.1、TLS 1.2。  </p>
</li>
<li><p>HTTPS：HTTP + TLS （在HTTP上套了TLS） </p>
<blockquote>
<p>HTTPS（全称：HyperText Transfer Protocol over Secure Socket Layer）</p>
</blockquote>
</li>
</ul>
<h2 id="服务端申请证书"><a href="#服务端申请证书" class="headerlink" title="服务端申请证书"></a>服务端申请证书</h2><blockquote>
<p>HTTPS认证需要服务端首先申请一份证书，这里介绍一下如何申请证书。  </p>
</blockquote>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><strong>CA机构</strong>：国家所认可的具有权威、公平公正的第三方机构，其作用是验证数字证书拥有者是否合法，并以此签发证书。</li>
<li><strong>CA数字证书</strong>：由CA机构发行的数字证书，其中包括两把密钥：一把公钥和一把私钥。服务端可以利用相关的工具来生成CA数字证书，以此加密自己的文件或是保护自己的网址。</li>
</ul>
<h3 id="证书文件格式"><a href="#证书文件格式" class="headerlink" title="证书文件格式"></a>证书文件格式</h3><p>证书相关文件有多种格式，常见格式：<code>.crt</code>，<code>.key</code>，<code>.req</code>，<code>.csr</code>，<code>.pem</code>，<code>.der</code>。</p>
<p><code>xx.crt</code>：证书文件<br><code>xx.key</code>：私钥文件<br><code>xx.req</code>：请求文件<br><code>xx.csr</code>：请求文件<br><code>xx.pem</code>：证书文件为 pem 格式（文本文件）<br><code>xx.der</code>：证书文件为 der 格式（二进制文件）</p>
<p>实际上，上述文件的扩展名可以随意命名。只是为了容易理解文件的功能而选择大家都认识的命名方式。但是，上述文件是有格式的，只能是 <code>.pem</code> 格式或者 <code>.der</code> 格式。使用什么格式的文件取决于需求。</p>
<h3 id="服务端申请证书过程"><a href="#服务端申请证书过程" class="headerlink" title="服务端申请证书过程"></a>服务端申请证书过程</h3><ol>
<li>服务端server生成<code>.crt</code>证书文件，其中包括<code>公钥</code>、<code>申请者信息</code>、<code>域名</code>。</li>
<li>server把证书文件发给CA机构：<br>（1） CA机构根据crt文件生成一段Hash摘要，<br>（2） 用CA私钥加密，生成签名。</li>
<li>CA机构把证书发给server，其中包括<code>.crt</code>文件、 <code>签名</code>。</li>
</ol>
<h2 id="HTTPS认证过程"><a href="#HTTPS认证过程" class="headerlink" title="HTTPS认证过程"></a>HTTPS认证过程</h2><blockquote>
<p>主角：客户端client、服务端server。  </p>
</blockquote>
<ol>
<li><p>客户端client <strong>–〉</strong> 服务端server：<br>client发起访问，携带<code>cipher suit(密码套件，包括自己可用的加密方案)</code>、<code>随机数1</code>（用于后续对称密钥）。</p>
</li>
<li><p>客户端client <strong>〈–</strong> 服务端server:<br>server发送 <code>确认好双方的加密方案</code>、<code>随机数2</code>。</p>
</li>
<li><p>客户端client <strong>〈–</strong> 服务端server：<br>（1）server发送<code>数字证书</code>，<br>（2）client验证证书：拿CA机构的公钥去验证该证书，若成功，则<strong>获得server公钥</strong>，生成<code>随机数3</code>，用<strong>服务端公钥加密随机数3</strong>作为<code>pre-key</code>。</p>
<blockquote>
<p><strong>数字证书用处</strong>：<br>若黑客中途篡改，则签名验证不会通过；<br>若黑客修改证书信息后再重新计算签名？不可能，因为黑客拿不到CA机构的私钥。</p>
</blockquote>
</li>
<li><p>客户端client <strong>–〉</strong> 服务端server:<br>（1）client发送<code>pre-key</code>；<br>（2）server用<strong>服务端私钥解密pre-key</strong>，得出<code>随机数3</code>。</p>
</li>
<li><p>客户端client &lt;–&gt; 服务端server:<br>双方用<code>随机数1、2、3</code>生成<strong>对称密钥</strong><code>master-key</code>，之后用master-key传输数据。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>SSL</tag>
        <tag>HTTPS</tag>
        <tag>TSL</tag>
        <tag>数字证书</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中封装并使用WebSocket</title>
    <url>/2023/07/21/vue3-wss/</url>
    <content><![CDATA[<h2 id="WebSocket介绍"><a href="#WebSocket介绍" class="headerlink" title="WebSocket介绍"></a>WebSocket介绍</h2><p>WebSocket是一种在Web浏览器和服务器之间建立持久性连接的协议，它允许双向通信，而不需要像HTTP协议那样每次请求都需要重新建立连接。<br>WebSocket是全双工通信协议，可以在客户端和服务器之间实现实时数据传输。  </p>
<span id="more"></span>
<p>WebSocket通常在以下场景下使用：</p>
<ol>
<li>实时数据传输：例如股票市场、体育比赛、即时消息等需要实时更新数据的应用场景。</li>
<li>在线游戏：需要实时传输游戏状态、位置、动作等数据。</li>
<li>视频会议：需要实时传输音视频数据，WebSocket可以用于传输控制信息。</li>
<li>实时协作：例如团队协作、在线编辑等场景，需要实时传输文本、图像、音频等数据。</li>
<li>实时通知：例如推送通知、即时聊天等场景，需要实时传输消息。</li>
</ol>
<p>WebSocket适用于需要实时双向通信的应用场景，它可以提供更好的用户体验和更高的交互性。</p>
<h2 id="WebSocket状态码"><a href="#WebSocket状态码" class="headerlink" title="WebSocket状态码"></a>WebSocket状态码</h2><table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>101</td>
<td>HTTP协议切换为WebSocket协议。连接成功。</td>
</tr>
<tr>
<td>1000</td>
<td>正常断开连接。</td>
</tr>
<tr>
<td>1001</td>
<td>服务器断开连接。</td>
</tr>
<tr>
<td>1002</td>
<td>websocket协议错误。</td>
</tr>
<tr>
<td>1003</td>
<td>客户端接受了不支持数据格式（只允许接受文本消息。是客户端限制不接受二进制数据，而不是websocket协议不支持二进制数据）。</td>
</tr>
<tr>
<td>1006</td>
<td>异常关闭。</td>
</tr>
<tr>
<td>1007</td>
<td>客户端接受了无效数据格式（文本消息编码不是utf-8）。</td>
</tr>
<tr>
<td>1009</td>
<td>传输数据量过大。</td>
</tr>
<tr>
<td>1010</td>
<td>客户端终止连接。</td>
</tr>
<tr>
<td>1011</td>
<td>服务器终止连接。</td>
</tr>
<tr>
<td>1012</td>
<td>服务端正在重新启动。</td>
</tr>
<tr>
<td>1013</td>
<td>服务端临时终止。</td>
</tr>
<tr>
<td>1014</td>
<td>通过网关或代理请求服务器，服务器无法及时响应。</td>
</tr>
<tr>
<td>1015</td>
<td>TLS握手失败。</td>
</tr>
</tbody></table>
<h2 id="WebSocket-Web-API"><a href="#WebSocket-Web-API" class="headerlink" title="WebSocket Web API"></a>WebSocket Web API</h2><blockquote>
<p>WebSocket Web API: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>
</blockquote>
<p>WebSocket 对象提供了用于创建和管理 WebSocket 连接，以及可以通过该连接发送和接收数据的 API。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li><code>WebSocket(url[, protocols])</code> ： 使用 WebSocket() 构造函数来构造一个 WebSocket 对象。</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/binaryType">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/binaryType</a>  </p>
</blockquote>
<ul>
<li><code>WebSocket.binaryType</code> ： 使用二进制的数据类型连接。</li>
<li><code>WebSocket.bufferedAmount</code> ： 未发送至服务器的字节数。</li>
<li><code>WebSocket.extensions</code> ： 服务器选择的扩展。</li>
<li><code>WebSocket.onclose</code> ： 用于指定连接关闭后的回调函数。</li>
<li><code>WebSocket.onerror</code> ： 用于指定连接失败后的回调函数。</li>
<li><code>WebSocket.onmessage</code> ： 用于指定当从服务器接受到信息时的回调函数。</li>
<li><code>WebSocket.onopen</code> ： 用于指定连接成功后的回调函数。</li>
<li><code>WebSocket.protocol</code> ： 服务器选择的下属协议。</li>
<li><code>WebSocket.readyState</code> ： 当前的链接状态。</li>
<li><code>WebSocket.url</code> ： WebSocket 的绝对路径。</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/close">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/close</a>  </p>
</blockquote>
<ul>
<li><code>WebSocket.close([code[, reason]])</code> ： 关闭当前链接。</li>
<li><code>WebSocket.send(data)</code> ： 对要传输的数据进行排队。</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/close_event">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/close_event</a>  </p>
</blockquote>
<p>使用 addEventListener() 或将一个事件监听器赋值给本接口的 oneventname 属性，来监听下面的事件。  </p>
<ul>
<li><code>close</code> ： 当一个 WebSocket 连接被关闭时触发。 也可以通过 onclose 属性来设置。</li>
<li><code>error</code> ： 当一个 WebSocket 连接因错误而关闭时触发，例如无法发送数据时。 也可以通过 onerror 属性来设置。</li>
<li><code>message</code> ： 当通过 WebSocket 收到数据时触发。 也可以通过 onmessage 属性来设置。</li>
<li><code>open</code> ： 当一个 WebSocket 连接成功时触发。 也可以通过 onopen 属性来设置。</li>
</ul>
<h2 id="JS使用WebSocket示例"><a href="#JS使用WebSocket示例" class="headerlink" title="JS使用WebSocket示例"></a>JS使用WebSocket示例</h2><p>以下是使用WebSocket的示例代码：</p>
<p>在前端JavaScript代码中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  socket.<span class="title function_">send</span>(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message from server &#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connection closed&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在后端Node.js代码中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connection established&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">incoming</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;received: %s&#x27;</span>, message);</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&#x27;Server received: &#x27;</span> + message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connection closed&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个示例中，前端JavaScript代码创建了一个WebSocket对象，并连接到服务器的端口8080。当连接建立时，它会向服务器发送一条消息，当从服务器收到消息时，它会打印消息内容。当WebSocket连接关闭时，它会打印一条消息。</p>
<p>后端Node.js代码使用WebSocket模块创建了一个WebSocket服务器，并在端口8080上监听连接请求。当客户端连接到服务器时，它会打印一条消息。当从客户端收到消息时，它会打印消息内容并将消息发送回客户端。当WebSocket连接关闭时，它会打印一条消息。</p>
<h2 id="Vue3中封装WebSocket"><a href="#Vue3中封装WebSocket" class="headerlink" title="Vue3中封装WebSocket"></a>Vue3中封装WebSocket</h2><h3 id="封装websocket"><a href="#封装websocket" class="headerlink" title="封装websocket"></a>封装websocket</h3><p><strong>&#x2F;utils&#x2F;websocket.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span>, <span class="title class_">ElNotification</span> <span class="keyword">as</span> message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getEnvName &#125; <span class="keyword">from</span> <span class="string">&#x27;~/utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; backend_url &#125; <span class="keyword">from</span> <span class="string">&#x27;~/constvars&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> defaultUrl = <span class="string">&#x27;wss://api-backend-stg.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">WlWebsocket</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">websocket</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> wsBaseUrl = defaultUrl;</span><br><span class="line">  <span class="comment">// 开启标识</span></span><br><span class="line">  <span class="keyword">private</span> socket_open = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 心跳timer</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">hearbeat_timer</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 心跳发送频率</span></span><br><span class="line">  <span class="keyword">private</span> hearbeat_interval = <span class="number">8</span> * <span class="number">1000</span>;</span><br><span class="line">  <span class="comment">// 是否自动重连</span></span><br><span class="line">  <span class="keyword">private</span> is_reconnect = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 重连次数</span></span><br><span class="line">  <span class="keyword">private</span> reconnect_count = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// 已发起重连次数</span></span><br><span class="line">  <span class="keyword">private</span> reconnect_current = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 重连timer</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">reconnect_timer</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 重连频率</span></span><br><span class="line">  <span class="keyword">private</span> reconnect_interval = <span class="number">5</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> url = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">private</span> query = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url: <span class="built_in">string</span>, query: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">query</span> = query;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">env</span>: <span class="built_in">any</span> = <span class="title function_">getEnvName</span>();</span><br><span class="line">    <span class="keyword">if</span> (!!env) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">wsBaseUrl</span> = <span class="string">&#x27;wss://&#x27;</span> + backend_url[env];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getEnvName() env&#x27;</span>, env, <span class="variable language_">this</span>.<span class="property">wsBaseUrl</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init = <span class="function">(<span class="params">receiveMessage: <span class="built_in">Function</span> | <span class="literal">null</span>, onSocketClose: <span class="built_in">Function</span> | <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)) &#123;</span><br><span class="line">      message.<span class="title function_">warning</span>(<span class="string">&#x27;浏览器不支持WebSocket&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> wsUrl = <span class="variable language_">this</span>.<span class="property">wsBaseUrl</span> + <span class="variable language_">this</span>.<span class="property">url</span> + <span class="variable language_">this</span>.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==wsUrl==&#x27;</span>, wsUrl);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(wsUrl);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!!receiveMessage) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;==data===&#x27;, data);</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data?.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">err_code</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(res?.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">receiveMessage</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data?.<span class="property">data</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onclose</span> = <span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接关闭&#x27;</span>, e);</span><br><span class="line">      <span class="keyword">if</span> (!!onSocketClose) &#123;</span><br><span class="line">        <span class="title function_">onSocketClose</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">socket_open</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 需要重新连接</span></span><br><span class="line">      <span class="keyword">if</span> (!!<span class="variable language_">this</span>.<span class="property">is_reconnect</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          !!<span class="variable language_">this</span>.<span class="property">is_reconnect</span>,</span><br><span class="line">          <span class="string">&#x27;WebSocket连接关闭 重新连接------&#x27;</span>,</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">reconnect_current</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reconnect_timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 超过重连次数</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reconnect_current</span> &gt; <span class="variable language_">this</span>.<span class="property">reconnect_count</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">reconnect_timer</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">is_reconnect</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 记录重连次数</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">reconnect_current</span>++;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">reconnect_interval</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接成功</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接成功&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">socket_open</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// this.is_reconnect = true;</span></span><br><span class="line">      <span class="comment">// 开启心跳</span></span><br><span class="line">      <span class="comment">// this.heartbeat();</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接发生错误</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接出错&#x27;</span>, e);</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(e.<span class="property">code</span> + <span class="string">&#x27; 连接出错&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  heartbeat = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;== this.heartbeat 开启心跳&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hearbeat_timer</span> &amp;&amp; <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">hearbeat_timer</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hearbeat_timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket setInterval(())  sen data&#x27;</span>);</span><br><span class="line">      <span class="comment">// let data = &#123;&#125;;</span></span><br><span class="line">      <span class="comment">// this.send(data);</span></span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">hearbeat_interval</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  send = <span class="function">(<span class="params">data: <span class="built_in">string</span>, callback = <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">&#x27;WebSocket=====send=====&#x27;</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">readyState</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">OPEN</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">websocket</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启状态直接发送</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">readyState</span> === <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send  if&#x27;</span>, <span class="variable language_">this</span>.<span class="property">websocket</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send  else&#x27;</span>);</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">hearbeat_timer</span>);</span><br><span class="line">      <span class="title class_">ElMessage</span>.<span class="title function_">warning</span>(<span class="string">&#x27;无法发送消息,socket链接已断开&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  close = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket 关闭关闭关闭===&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">is_reconnect</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">websocket</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 重新连接</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  reconnect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">websocket</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">is_reconnect</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;重新连接  this.close();&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;重新连接  this.init&#x27;);</span></span><br><span class="line">    <span class="comment">// this.init(null);</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="封装websocket的接口API"><a href="#封装websocket的接口API" class="headerlink" title="封装websocket的接口API"></a>封装websocket的接口API</h3><p><strong>&#x2F;apis&#x2F;test.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toQueryString &#125; <span class="keyword">from</span> <span class="string">&#x27;~/utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WlWebsocket</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;~/utils/websocket&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取符合条件的所有Test列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">apiGetTestList</span> = (<span class="params">query: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WlWebsocket</span>(<span class="string">`/api/test/<span class="subst">$&#123;query&#125;</span>/list`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="页面中调用接口API"><a href="#页面中调用接口API" class="headerlink" title="页面中调用接口API"></a>页面中调用接口API</h3><p><strong>&#x2F;views&#x2F;test&#x2F;index.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;search-button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;filter()&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">        筛选</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">v-if</span>=<span class="string">&quot;tableList.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableList&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;test_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;test&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model:currentPage</span>=<span class="string">&quot;searchForm.page&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model:page-size</span>=<span class="string">&quot;searchForm.size&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-sizes</span>=<span class="string">&quot;[5, 10, 20, 50]&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;totalNumber&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive, onBeforeUnmount, onBeforeMount &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Icon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@iconify/vue/dist/iconify&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; iconMap &#125; <span class="keyword">from</span> <span class="string">&#x27;~/auth&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; apiGetTestList &#125; <span class="keyword">from</span> <span class="string">&#x27;~/apis/order-image&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableList = <span class="title function_">ref</span>([] <span class="keyword">as</span> any);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> totalNumber = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> searchForm = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">page</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">size</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> webSocket = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 重新渲染table数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">refreshListData</span> = (<span class="params">res: any</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;重新渲染table数据 res 时间&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    date.<span class="title function_">getMinutes</span>() + <span class="string">&#x27;:&#x27;</span> + date.<span class="title function_">getSeconds</span>(),</span></span><br><span class="line"><span class="language-javascript">    res</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">  loading.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (res.<span class="property">data</span> !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    tableList.<span class="property">value</span> = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">    totalNumber.<span class="property">value</span> = res.<span class="property">total</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    tableList.<span class="property">value</span> = [];</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">sendSocketMessage</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> msg = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">page</span>: searchForm.<span class="property">page</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">size</span>: searchForm.<span class="property">size</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">update</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  webSocket.<span class="property">value</span>.<span class="title function_">send</span>(msg);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">closeSocket</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!!webSocket.<span class="property">value</span> &amp;&amp; webSocket.<span class="property">value</span>.<span class="property">websocket</span> != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    webSocket.<span class="property">value</span>.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 搜索事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">publicSearch</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  webSocket.<span class="property">value</span> = <span class="title function_">apiGetTestList</span>(&#123; <span class="attr">query</span>: <span class="string">&#x27;1111&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  webSocket.<span class="property">value</span>.<span class="title function_">init</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">res: any</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">refreshListData</span>(res);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      loading.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 每页显示条目个数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleSizeChange</span> = (<span class="params">val: any</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  loading.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  searchForm.<span class="property">size</span> = val;</span></span><br><span class="line"><span class="language-javascript">  searchForm.<span class="property">page</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sendSocketMessage</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前页数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleCurrentChange</span> = (<span class="params">val: any</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  loading.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  searchForm.<span class="property">page</span> = val;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sendSocketMessage</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 点击筛选按钮</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">filter</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; filterEvent &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  loading.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  searchForm.<span class="property">size</span> = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">  searchForm.<span class="property">page</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">publicSearch</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">closeSocket</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
        <tag>WebSocket</tag>
        <tag>wss</tag>
      </tags>
  </entry>
  <entry>
    <title>Java知识库</title>
    <url>/2023/07/30/java-knowledge/</url>
    <content><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="JDK、JRE、JVM关系"><a href="#JDK、JRE、JVM关系" class="headerlink" title="JDK、JRE、JVM关系"></a>JDK、JRE、JVM关系</h2><p>JDK包括JRE，JRE包括JVM。  </p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>JVM</td>
<td>Java虚拟机</td>
<td>执行java字节码的程序</td>
</tr>
<tr>
<td>JRE</td>
<td>包括了JVM、JVM工作所需要的类库</td>
<td>运行Java程序</td>
</tr>
<tr>
<td>JDK</td>
<td>Java标准开发包，包括Java编译器、Java运行时的环境、Java类库等等</td>
<td>编译Java源文件</td>
</tr>
</tbody></table>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>JDK(Java Development Kit) 安装完成后，目录下面有6个文件夹：<code>src类库源码压缩包</code>和<code>其他几个声明文件</code>。<br>其中，真正在运行java时起作用的 是以下四个文件夹：bin、include、lib、 jre。</p>
<ul>
<li>bin:  最主要的是编译器(javac.exe)</li>
<li>include:  java和JVM交互用的头文件</li>
<li>lib:  类库</li>
<li>jre:  java运行环境</li>
</ul>
<blockquote>
<p>注意：这里的bin、lib文件夹和jre里的bin、lib是 不同的。</p>
</blockquote>
<h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>JRE（Java Runtime Environment）是指java运行环境。光有JVM还不能成class的 执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。<br>（jre里有运行.class的java.exe）</p>
<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>JVM（Java Virtual Machine），即java虚拟机, java运行时的环境。<br>一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。<br>可运行的<code>.class</code>文件包（<code>jar</code>或者<code>war</code>），里面主要包含了jvm和java运行时基本类库（rt.jar）。rt.jar可以简单粗暴地理解为：它就是java源码编译成的jar包。<br><strong>Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</strong></p>
<h2 id="、equals、hashCode"><a href="#、equals、hashCode" class="headerlink" title="&#x3D;&#x3D; 、equals、hashCode"></a>&#x3D;&#x3D; 、equals、hashCode</h2><h3 id="a-b"><a href="#a-b" class="headerlink" title="a&#x3D;&#x3D;b"></a>a&#x3D;&#x3D;b</h3><blockquote>
<p>主要用于基本类型之间的比较（char、Boolean、byte、short、int、long、float、dobule），也可以用于比较对象。</p>
</blockquote>
<p>比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。  </p>
<ul>
<li>如果是基本技术类型，比如具体的阿拉伯数字，值相等则为true。如：int a&#x3D;10与long b&#x3D;10L与double c&#x3D;10.0都是相同的（为true），因为他们都指向地址为10的堆。  </li>
<li>如果是引用类型，比较的是引用地址。</li>
</ul>
<h3 id="a-equals-b"><a href="#a-equals-b" class="headerlink" title="a.equals(b)"></a>a.equals(b)</h3><blockquote>
<p>对象之间的比较（基本类型的包装器类型，string，自己定义的对象等）</p>
</blockquote>
<p>比较的是两个对象的内容是否相等。<br><strong>可以通过重写equals方法从而比较对象的内容是否相同，如果不重写那么和&#x3D;&#x3D;符号没有区别，都是比较的对象的引用是否指向同一个对象。</strong><br>“&#x3D;&#x3D;”比”equals”运行速度快,因为”&#x3D;&#x3D;”只是比较引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String-比较"><a href="#String-比较" class="headerlink" title="String 比较"></a>String 比较</h3><p><strong>String类对equals进行了重写，所以对于String类型其equals比较的是内容而不是引用地址。</strong>  </p>
<p><code>String s=&quot;abce&quot;</code>是一种非常特殊的形式，和new有本质的区别。它是java中唯一不需要new就可以产生对象的途径。<br>以 <code>String s=&quot;abce&quot;;</code>形式赋值在java中叫直接量，它是在常量池中，而不是像new一样放在压缩堆中。  </p>
<p>这种形式的字符串，在JVM内部发生字符串拘留，即当声明这样的一个字符串后，JVM会在常量池中先查找有没有一个值为<code>&quot;abcd&quot;</code>的对象：</p>
<ul>
<li>如果有，就会把它赋给当前引用，即原来那个引用和现在这个引用指向了同一对象；</li>
<li>如果没有，则在常量池中新创建一个<code>&quot;abcd&quot;</code>，下一次如果有<code>String s1 = &quot;abcd&quot;</code>;又会将<code>s1</code>指向<code>&quot;abcd&quot;</code>这个对象。</li>
</ul>
<p>即以<code>String s=&quot;abce&quot;;</code>这种形式声明的字符串，只要值相等，任何多个引用都指向同一对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a为一个引用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">        <span class="keyword">if</span> (aa == bb) &#123; </span><br><span class="line">   System.out.println(<span class="string">&quot;aa==bb&quot;</span>);</span><br><span class="line">   <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a == b) &#123; </span><br><span class="line">   System.out.println(<span class="string">&quot;a==b&quot;</span>);</span><br><span class="line">   <span class="comment">// false，非同一对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.equals(b)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;aEQb&quot;</span>);</span><br><span class="line">   <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>) &#123; </span><br><span class="line">   System.out.println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">   <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a-hashCode-b"><a href="#a-hashCode-b" class="headerlink" title="a.hashCode(b)"></a>a.hashCode(b)</h3><p>hashCode()方法和equal()方法的作用一样，在Java里都是用来对比两个对象是否相等一致。  </p>
<p>Object类中的hashCode()方法：返回对象在内存中地址转换成的一个int值。<br>所以如果没有重写hashCode()方法，任何对象的hashCode()方法都是不相等的。  </p>
<ul>
<li>equal()相等的两个对象，他们的hashCode()一定相等。用equal()比较是绝对可靠的。</li>
<li>hashCode()相等的两个对象，他们的equal()不一定相等。用hashCode()比较不是绝对可靠的。</li>
</ul>
<blockquote>
<p>一般在覆盖equals()方法的同时也要覆盖hashCode()方法。<br>否则，就会违反Object.hashCode的通用约定，从而导致该类无法与所有基于散列值(hash)集合类(HashMap、HashSet和Hashtable)结合在一起正常运行。</p>
</blockquote>
<p><strong>为什么还需要hashCode()呢？</strong></p>
<blockquote>
<p>因为重写的equal（）里一般比较的比较全面比较复杂，这样效率就比较低，而利用hashCode()进行对比，则只要生成一个hash值进行比较就可以了，效率很高。  </p>
</blockquote>
<p><strong>为什么还需要equals()呢？</strong></p>
<blockquote>
<p>因为hashCode()并不是完全可靠，有时候不同的对象他们生成的hashcode也会一样（生成hash值得公式可能存在的问题），所以hashCode()只能说是大部分时候可靠，并不是绝对可靠。</p>
</blockquote>
<h2 id="hashCode-如何生成"><a href="#hashCode-如何生成" class="headerlink" title="hashCode()如何生成"></a>hashCode()如何生成</h2><blockquote>
<p>【为了彻底搞懂 hashCode，我钻了一下 JDK 的源码】HTTPs:&#x2F;&#x2F;juejin.cn&#x2F;post&#x2F;6994738336350863367<br>【java中常常提起的hashCode到底是个啥?】HTTPs:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;188736282</p>
</blockquote>
<p>hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的。<br>所有的类都会默认继承自 Object 类，Object 类中就包含了 hashCode() 方法，该方法会返回一个 int 类型的值。</p>
<blockquote>
<p>由于 hashCode() 方法是一个本地方法（native 关键字修饰的方法，用 C&#x2F;C++ 语言实现，由 Java 调用），意味着 <strong>Object 类中并没有给出具体的实现</strong>。具体的实现可以参考 <code>jdk/src/hotspot/share/runtime/synchronizer.cpp</code>（源码可以到 GitHub 上 OpenJDK 的仓库中下载）。<code>get_next_hash()</code> 方法会根据 hashCode 的取值来决定采用哪一种哈希值的生成策略。</p>
</blockquote>
<ul>
<li><code>hashCode == 0</code>，调用操作系统 OS 的 random() 方法返回随机数。</li>
<li><code>hashCode == 1</code>，将对象的内存地址，做移位运算后，与一个随机数进行异或得到结果。</li>
<li><code>hashCode == 2</code>，返回 1，用于某些情况下的测试。</li>
<li><code>hashCode == 3</code>，返回一个自增序列的当前值。从 0 开始计算哈希值，不是线程安全的，多个线程可能会得到相同的哈希值。</li>
<li><code>hashCode == 4</code>，返回当前对象的内存地址。</li>
<li><code>hashCode == 5</code>，支持多线程，使用了 Marsaglia 的 xor-shift 算法产生伪随机数。简单来说，通过和当前线程有关的<strong>一个随机数 + 三个确定值 + xorshift算法</strong>得到的一个随机数，可以当作真随机数来使用。（JDK8 的hashCode的默认计算方法就是这个）</li>
</ul>
<h2 id="重载、重写"><a href="#重载、重写" class="headerlink" title="重载、重写"></a>重载、重写</h2><table>
<thead>
<tr>
<th>重载</th>
<th>重写</th>
</tr>
</thead>
<tbody><tr>
<td>体现一个类中多态性</td>
<td>体现父类与子类之间多态性</td>
</tr>
<tr>
<td>在一个类中定义了多个同名的方法，它们参数列表不同，则称为方法的重载</td>
<td>在子类中定义某方法与其父类有相同的名称和参数，子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。</td>
</tr>
<tr>
<td>同一个类中不同的函数使用相同的函数名，但是函数的参数个数或类型不同。可以有不同的返回类型;可以有不同的访问修饰符;可以抛出不同的异常。<strong>调用的时候根据函数的参数来区别不同的函数</strong>。</td>
<td><strong>函数名和参数与父类一样</strong>，子类与父类函数体内容不一样。<strong>子类返回的类型必须与父类保持一致</strong>；子类方法访问修饰符的限制一定要大于父类方法的访问修饰（public &gt; protected &gt; default &gt; private）；子类重写方法一定不能抛出新的检查异常或者比被父类方法申明更加宽泛的检查型异常。</td>
</tr>
</tbody></table>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>（1）基本数据类型，分为boolean、byte、int、char、long、short、double、float；<br>（2）引用数据类型 ，分为数组、类、接口。</p>
<h2 id="int、integer"><a href="#int、integer" class="headerlink" title="int、integer"></a>int、integer</h2><p>为了编程的方便还是引入了基本数据类型，但是<strong>为了能够将这些基本数据类型当成对象操作</strong>，Java为每 一个基本数据类型都引入了<strong>对应的包装类型</strong>（wrapper class），从Java 5开始引入了自动装箱&#x2F;拆箱机制，使得二者可以相互转换。</p>
<blockquote>
<p>自动装箱就是将基本数据类型直接变成Integer包装类。自动拆箱和装箱动作相反，即将对象中的数据变回基本数据类型。自动拆箱和装箱的好处就是基本类型和引用类型可以直接运算。</p>
</blockquote>
<ul>
<li>Integer是int的包装类；int是基本数据类型；</li>
<li>Integer变量必须实例化后才能使用；int变量不需要；</li>
<li>Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ；</li>
<li>Integer的默认值是null；int的默认值是0。</li>
</ul>
<p>由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。<br>因为<strong>非 new 生成的 Integer 变量</strong>指向的是 java 常量池中的对象，而 <code>new Integer()</code> 生成的变量指向堆中新建的对象，两者在内存中的地址不同。所以输出为 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>


<p>两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false。</p>
<p>java在编译<code>Integer i = 100 ;</code>时，会翻译成为<code>Integer i = Integer.valueOf(100)</code>。而java API中对Integer类型的valueOf的定义如下，对于-128到127之间的数，会进行缓存，<code>Integer i = 127</code>时，会将127这个Integer对象进行缓存，下次再写<code>Integer j = 127</code>时，就会直接从缓存中取，就不会new了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>封装类类型</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Boolean</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
</tbody></table>
<h2 id="List、Set、Map"><a href="#List、Set、Map" class="headerlink" title="List、Set、Map"></a>List、Set、Map</h2><table>
<thead>
<tr>
<th>List</th>
<th>Set</th>
<th>Map</th>
</tr>
</thead>
<tbody><tr>
<td>存储单列的数据集合，继承自Collection接口</td>
<td>同List</td>
<td>存储键值对这样的双列数据的集合，独立接口</td>
</tr>
<tr>
<td>有序集合</td>
<td>无序集合</td>
<td>无序集合</td>
</tr>
<tr>
<td>允许重复元素</td>
<td>不允许重复元素</td>
<td>键对象必须是唯一的</td>
</tr>
<tr>
<td>允许任意数量的空值</td>
<td>最多只能有一个空值</td>
<td>键是不允许重复的，值是可以重复</td>
</tr>
<tr>
<td>实现：ArrayList， LinkedList</td>
<td>HashSet、LinkedHashSet、TreeSet</td>
<td>HashMap、LinkedHashMap、Hashtable 、 TreeMap</td>
</tr>
</tbody></table>
<h2 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h2><blockquote>
<p>【Java 8系列之重新认识HashMap】HTTPs:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21673805</p>
</blockquote>
<p>HashMap由数组+链表组成的。数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。</p>
<ul>
<li>如果定位到的数组位置不含链表（当前entry的next指向null），那么对于查找，添加等操作很快，仅需一次寻址即可；</li>
<li>如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)。<blockquote>
<p>首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。</p>
</blockquote>
</li>
</ul>
<p>所以，性能考虑，HashMap中的链表出现越少，性能才会越好。</p>
<p>即使Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响HashMap的性能。</p>
<p>在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。<br><strong>当链表长度太长（默认超过8）时，链表就转换为红黑树</strong>，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p>
<img src="/2023/07/30/java-knowledge/hashmap.png" width="50%">
<!-- ![page-hashmap]( "HashMap结构") -->

<h2 id="HashMap、Hashtable"><a href="#HashMap、Hashtable" class="headerlink" title="HashMap、Hashtable"></a>HashMap、Hashtable</h2><p>Map接口下面比较重要的两个实现子类</p>
<table>
<thead>
<tr>
<th>HashMap</th>
<th>Hashtable</th>
</tr>
</thead>
<tbody><tr>
<td>非线程同步（多线程时候可以有一系列问题）</td>
<td>线程同步（数据不会乱，不管有几个线程处理都没有问题。它的方法有Synchronized关键字）</td>
</tr>
<tr>
<td>效率高</td>
<td>效率低</td>
</tr>
<tr>
<td>允许&lt;键,值&gt;有空值。但是只能有一个key为null值，可以有多个value为空值</td>
<td>不允许&lt;键,值&gt;有空值。key和value都不允许为空值</td>
</tr>
<tr>
<td>HashMap中hash数组的默认大小是16,增长</td>
<td></td>
</tr>
<tr>
<td>方式是2的指数倍</td>
<td>Hashtable中hash数组的默认大小是11,增加方式的old*2+1</td>
</tr>
<tr>
<td>HashMap继承自AbstractMap类（是接口相同，都是Map，但父类不同）</td>
<td>Hashtable继承自Dictionary类</td>
</tr>
<tr>
<td>使用Iterator</td>
<td>使用Enumeration（现在也支持Iterator了）</td>
</tr>
</tbody></table>
<h2 id="ArrayList、LinkedList"><a href="#ArrayList、LinkedList" class="headerlink" title="ArrayList、LinkedList"></a>ArrayList、LinkedList</h2><table>
<thead>
<tr>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody><tr>
<td>底层是数组</td>
<td>底层是链表</td>
</tr>
<tr>
<td>可以随机访问，复杂度O(1)</td>
<td>查找元素复杂度O(n)</td>
</tr>
<tr>
<td>插入&#x2F;删除复杂度O(n)</td>
<td>插入&#x2F;删除复杂度O(1)</td>
</tr>
</tbody></table>
<h2 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h2><table>
<thead>
<tr>
<th>String</th>
<th>StringBuffer</th>
<th>StringBuilder</th>
</tr>
</thead>
<tbody><tr>
<td>字符串常量，一旦被创建后不可更改（更改时相当于创建新对象并把旧的回收）</td>
<td>字符串变量，对象可以更改。修改value（数组地址）和count（数组长度），如果数组数量不够了就进行扩容，并把value指向新的数组地址</td>
<td>同StringBuffer</td>
</tr>
<tr>
<td>线程安全，因为是不可变序列</td>
<td>线程安全，StringBuffer许多方法带有Synchronized关键字</td>
<td>线程不安全，没有Synchronized关键字（在单线程情况下使用的，效率最高）</td>
</tr>
<tr>
<td>运行速度最慢</td>
<td>运行速度中间</td>
<td>运行速度最快</td>
</tr>
<tr>
<td>适用于字符串有少量操作时</td>
<td>适用于多线程，在字符缓存区有大量插入更改操作时</td>
<td>适用于单线程，在字符缓存区有大量插入更改操作时</td>
</tr>
</tbody></table>
<h2 id="数据结构插入复杂度"><a href="#数据结构插入复杂度" class="headerlink" title="数据结构插入复杂度"></a>数据结构插入复杂度</h2><table>
<thead>
<tr>
<th>数据结构</th>
<th>查找</th>
<th>插入</th>
<th>删除</th>
</tr>
</thead>
<tbody><tr>
<td>有序数组</td>
<td>O(lgn)</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>数组ArrayList</td>
<td>O(n)</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>链表LinkedList</td>
<td>O(n)</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>红黑二叉树TreeMap</td>
<td>O(lgn)</td>
<td>O(lgn)</td>
<td>O(lgn)</td>
</tr>
<tr>
<td>哈希表HashMap (hash碰撞情况都是O(lgn))</td>
<td>O(1)</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h2 id="接口、抽象类"><a href="#接口、抽象类" class="headerlink" title="接口、抽象类"></a>接口、抽象类</h2><p><strong>接口</strong></p>
<ul>
<li>供别人调用的方法或者函数。接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为 public static final 变量（并且只能是 public static final变量，用 private 修饰会报编译错误），而方法会被隐式地指定为 public abstract 方法且只能是 public abstract 方法（用其他关键字，比如 private、protected、static、 final 等修饰会报编译错误），并且接口中所有的方法不能有具体的实现，也就是说，<strong>接口中的方法必须都是抽象方法</strong>。</li>
</ul>
<p><strong>抽象类</strong></p>
<ul>
<li>对于一个父类，如果它的某个方法在父类中实现出来没有任何意义，必须根据子类的实际需求来进行不同的实现，那么就可以将这个方法声明为 abstract 方法，此时这个类也就成为 abstract 类。</li>
</ul>
<blockquote>
<p>相同点：<br>（1）都不能被实例化<br>（2）接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。</p>
</blockquote>
<table>
<thead>
<tr>
<th>接口</th>
<th>抽象类</th>
</tr>
</thead>
<tbody><tr>
<td>interface关键字</td>
<td>abstract关键字</td>
</tr>
<tr>
<td>实现接口的关键字为implements</td>
<td>继承抽象类的关键字为extends</td>
</tr>
<tr>
<td>一个类可以实现多个接口</td>
<td>一个类只能继承一个抽象类</td>
</tr>
<tr>
<td>接口只有定义，不能有方法的实现</td>
<td>抽象类可以有定义与实现，方法可在抽象类中实现</td>
</tr>
<tr>
<td>强调特定功能的实现</td>
<td>抽象类强调所属关系</td>
</tr>
<tr>
<td>接口中不能含有静态代码块以及静态方法</td>
<td>抽象类可以有静态代码块和静态方法</td>
</tr>
</tbody></table>
<p>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</p>
<p>举个简单的例子: </p>
<blockquote>
<p>飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。<br>可以将飞机设计为一个类 <code>Airplane</code>，将鸟设计为一个类 <code>Bird</code>，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。<br>此时可以将 飞行 设计为一个接口<code>Fly</code>，包含方法<code>fly( )</code>，然后<code>Airplane</code>和<code>Bird</code>分别根据自己的需要实现<code>Fly</code>这个接口。<br>然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承<code>Airplane</code>即可，对于鸟也是类似的，不同种类的鸟直接继承<code>Bird</code>类即可。</p>
</blockquote>
<p>从这里可以看出，继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。</p>
<h2 id="Java异常机制"><a href="#Java异常机制" class="headerlink" title="Java异常机制"></a>Java异常机制</h2><blockquote>
<p>【java异常面试题（2021最新版）】HTTPs:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1819397</p>
</blockquote>
<p>Java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。</p>
<p>异常能清晰的回答what, where, why这3个问题：</p>
<ul>
<li>异常类型回答了“什么”被抛出，</li>
<li>*异常堆栈跟踪回答了“在哪”抛出，</li>
<li>异常信息回答了“为什么”会抛出。</li>
</ul>
<p>Java异常架构<br><img src="/2023/07/30/java-knowledge/throw1.png" alt="page-throw1" title=" Java异常架构"></p>
<h2 id="受检异常、非受检异常"><a href="#受检异常、非受检异常" class="headerlink" title="受检异常、非受检异常"></a>受检异常、非受检异常</h2><table>
<thead>
<tr>
<th>受检异常</th>
<th>非受检异常</th>
</tr>
</thead>
<tbody><tr>
<td>也叫编译时异常</td>
<td>也叫运行时异常</td>
</tr>
<tr>
<td>Java 编译器会检查它</td>
<td>Java 编译器不会检查它</td>
</tr>
<tr>
<td><code>Exception</code> 中除 <code>RuntimeException</code> 及其子类之外的异常。</td>
<td><code>RuntimeException</code> 类及其子类，表示 JVM 在运行期间可能出现的异常。</td>
</tr>
<tr>
<td>如果程序中出现此类异常，要么通过<code>throws</code>进行声明抛出，要么通过<code>try-catch</code>进行捕获处理，否则不能通过编译。</td>
<td>当程序中可能出现这类异常时，哪怕没有通过<code>throws</code>声明抛出它 或者 没用<code>try-catch</code>语句捕获它，也还会编译通过。</td>
</tr>
<tr>
<td>该异常我们必须手动在代码里添加捕获语句来处理该异常</td>
<td><code>RuntimeException</code> 异常会由 Java 虚拟机自动抛出并自动捕获，此类异常的出现绝大数情况是代码本身有问题应该从逻辑上去解决并改进代码。</td>
</tr>
</tbody></table>
<h2 id="Java异常处理"><a href="#Java异常处理" class="headerlink" title="Java异常处理"></a>Java异常处理</h2><ol>
<li>声明异常<br>通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。传递异常可以在方法签名处使用 <code>throws</code> 关键字声明可能会抛出的异常。 <blockquote>
<p>非检查异常（<code>Error</code>、<code>RuntimeException</code> 或它们的子类）不可使用 <code>throws</code> 关键字来声明要抛出的异常。<br>一个方法出现编译时异常，就需要 <code>try-catch</code>&#x2F; <code>throws </code>处理，否则会导致编译错误。 </p>
</blockquote>
</li>
<li>抛出异常<br>如果你觉得解决不了某些异常问题，且不需要调用者处理，那么你可以抛出异常。<br><code>throw</code>关键字作用是在方法内部抛出一个 <code>Throwable</code> 类型的异常。任何Java代码都可以通过<code>throw</code>语句抛出异常。</li>
<li>捕获异常<br>程序通常在运行之前不报错，但是运行后可能会出现某些未知的错误，但是还不想直接抛出到上一级，那么就需要通过<code>try…catch…</code>的形式进行异常捕获，之后根据不同的异常情况来进行相应的处理。</li>
</ol>
<p>可以根据下图来选择是捕获异常、声明异常还是抛出异常:<br><img src="/2023/07/30/java-knowledge/throw2.png" alt="page-throw2" title="如何选择异常类型"></p>
<h2 id="throw、throws"><a href="#throw、throws" class="headerlink" title="throw、throws"></a>throw、throws</h2><table>
<thead>
<tr>
<th>throw</th>
<th>throws</th>
</tr>
</thead>
<tbody><tr>
<td>在方法内部</td>
<td>在方法的声明处</td>
</tr>
<tr>
<td>throw+异常对象(检查异常,运行时异常)</td>
<td>throws+异常的类型(可以多个类型,用,拼接)。</td>
</tr>
<tr>
<td><code>throw new RuntimeException除数不能为0&quot;);</code></td>
<td><code>private static void readFile(String filePath) throws IOException</code></td>
</tr>
<tr>
<td>只能用于抛出一种异常，用来抛出方法或代码块中的异常，受查异常和非受查异常都可以被抛出。</td>
<td>可以抛出多个异常，用来标识该方法可能抛出的异常列表</td>
</tr>
<tr>
<td>异常出现的源头,制造异常。</td>
<td>在方法的声明处,告诉方法的调用者,这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理，要么自己处理要么再继续向外抛出异常</td>
</tr>
</tbody></table>
<h2 id="自定义异常如何应用"><a href="#自定义异常如何应用" class="headerlink" title="自定义异常如何应用"></a>自定义异常如何应用</h2><p>Java虽然提供了丰富的异常处理类,但是在项目中还会经常使用自定义异常,其主要原因是Java提供的异常类在某些情况下还是不能满足实际需求。</p>
<p>例如以下情况:</p>
<ol>
<li>系统中有些错误是符合Java语法,但不符合业务逻辑。</li>
<li>在分层的软件结构中,通常是在表现层统一对系统其他层次的异常进行捕获处理。</li>
</ol>
<h2 id="声明一个不会被继承的类"><a href="#声明一个不会被继承的类" class="headerlink" title="声明一个不会被继承的类"></a>声明一个不会被继承的类</h2><p>如果一个类被final修饰,此类不可以有子类,不能被其它类继承,如果一一个中的所有方法都没有重写的需要,当前类没有子类也罢,就可<br>以使用final修饰类。<br><strong>场景</strong><br>Math类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// final 关键字，Math不能被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">    <span class="comment">// 构造器Math()是private的，相当于Math在外界就不能构造对象了</span></span><br><span class="line">    <span class="comment">// 那么里面的方法就调不到了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Math</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 因此这里，每个方法前都有个static</span></span><br><span class="line">    <span class="comment">// static：可以通过 类名.属性名、类名.方法名 来调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Math.double</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">E</span> <span class="operator">=</span> <span class="number">2.7182818284590452354</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Math.sin(6)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sin</span><span class="params">(<span class="type">double</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StrictMath.sin(a); <span class="comment">// default impl. delegates to StrictMath</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;      </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="并发、并行"><a href="#并发、并行" class="headerlink" title="并发、并行"></a>并发、并行</h2><p>并发和并行虽然都说是”多个进程同时运行”，但是它们的”同时”不是一个概念。</p>
<ul>
<li>并行的”同时”是同一时刻可以多个进程在运行(处于running)。</li>
<li>并发的”同时”是经过上下文快速切换，使得看上去多个进程同时都在运行的现象，是一种OS欺骗用户的现象。</li>
</ul>
<p>当程序中写下<strong>多进程或多线程代码</strong>时，这意味着的是<strong>并发</strong>而不是并行。</p>
<h2 id="进程、线程、协程"><a href="#进程、线程、协程" class="headerlink" title="进程、线程、协程"></a>进程、线程、协程</h2><ul>
<li>进程：进程就是程序的一次执行过程，程序是静态的，它作为系统中的一种资源是永远存在的。而进程是动态的，它是动态的产生，变化和消亡的，拥有其自己的生命周期。</li>
<li>线程：线程是进程的一个执行单元。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</li>
<li>协程：一个线程也可以拥有多个协程，是一种比线程更加轻量级的存在。</li>
</ul>
<h3 id="进程vs线程"><a href="#进程vs线程" class="headerlink" title="进程vs线程"></a>进程vs线程</h3><table>
<thead>
<tr>
<th>进程</th>
<th>线程</th>
</tr>
</thead>
<tbody><tr>
<td>不是基本单位</td>
<td>线程是处理器调度的基本单位。</td>
</tr>
<tr>
<td>均可并发执行</td>
<td>均可并发执行</td>
</tr>
<tr>
<td>进程之间是独立的地址空间</td>
<td>线程共享本进程的地址空间</td>
</tr>
<tr>
<td>进程之间的资源是独立的，能很好的进行资源管理</td>
<td>线程共享本进程的资源如内存、I&#x2F;O、cpu等</td>
</tr>
<tr>
<td>对资源的管理和保护要求高，不限制开销和效率时，使用多进程。</td>
<td>要求效率高，频繁切换时，资源的保护管理要求不是很高时，使用多线程。</td>
</tr>
</tbody></table>
<h3 id="线程vs协程"><a href="#线程vs协程" class="headerlink" title="线程vs协程"></a>线程vs协程</h3><table>
<thead>
<tr>
<th>线程</th>
<th>协程</th>
</tr>
</thead>
<tbody><tr>
<td>切换受系统控制</td>
<td>切换由自己控制，由当前协程切换到其他协程由当前协程来控制。</td>
</tr>
<tr>
<td>cpu操作多</td>
<td>非cpu操作（比如I&#x2F;O操作）频繁时</td>
</tr>
</tbody></table>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul>
<li><strong>管道</strong>( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<blockquote>
<p>有名管道 (named pipe) ：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>
</blockquote>
</li>
<li><strong>信号量</strong>(semophore ) ：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li>
<li><strong>消息队列</strong>( message queue ) ：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li>
<li><strong>共享内存</strong>(shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li>
<li><strong>套接字</strong>(socket ) ：套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同设备及其间的进程通信。</li>
</ul>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><blockquote>
<p>实际上只有进程间需要通信。<br>同一进程的线程共享地址空间，没有通信的必要，但要做好同步&#x2F;互斥,保护共享的全局变量。</p>
</blockquote>
<ul>
<li>互斥锁提供了以排他方式防止数据结构被并发修改的方法。</li>
<li>读写锁允许多个线程同时读共享数据，而对写操作是互斥的。</li>
<li>条件变量可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。</li>
</ul>
<h2 id="协程通信"><a href="#协程通信" class="headerlink" title="协程通信"></a>协程通信</h2><h2 id="java实现多线程"><a href="#java实现多线程" class="headerlink" title="java实现多线程"></a>java实现多线程</h2><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><blockquote>
<p><a href="https://www.cnblogs.com/liuqingzheng/p/11080501.html">HTTPs://www.cnblogs.com/liuqingzheng/p/11080501.html</a></p>
</blockquote>
<h3 id="数据库实现分布式锁"><a href="#数据库实现分布式锁" class="headerlink" title="数据库实现分布式锁"></a>数据库实现分布式锁</h3><h3 id="缓存Redis实现分布式锁"><a href="#缓存Redis实现分布式锁" class="headerlink" title="缓存Redis实现分布式锁"></a>缓存Redis实现分布式锁</h3><h3 id="Zookeeper实现分布式锁"><a href="#Zookeeper实现分布式锁" class="headerlink" title="Zookeeper实现分布式锁"></a>Zookeeper实现分布式锁</h3><h2 id="synchronized同步锁"><a href="#synchronized同步锁" class="headerlink" title="synchronized同步锁"></a>synchronized同步锁</h2><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁：乐观锁在操作数据时非常乐观，认为别人不会同时修改数据。<br>因此乐观锁不会上锁，只是在执行更新的时候判断一下在此期间别人是否修改了数据：如果别人修改了数据则放弃操作，否则执行操作。</p>
<blockquote>
<p>实现方式：CAS机制、版本号机制</p>
</blockquote>
<p><strong>CAS</strong><br>CAS操作包括了3个操作数：</p>
<ol>
<li>需要读写的内存位置(V)</li>
<li>进行比较的预期值(E)</li>
<li>拟写入的新值(U)</li>
</ol>
<p>只有该变量当前的内存值V与预期值E相同时，才会将新值U写入内存完成变量修改，否则什么都不做。</p>
<p>下面是通过CAS修改变量数据的示例，CAS通过该变量的地址即可获取该变量当前的内存值V。<br>当本轮CAS操作失败后，会重新读取该变量内存中最新的值并重新计算新值，直到其CAS操作修改变量成功为止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="number">1.</span> 读取变量值，记为E。用于写入修改时，判断该变量是否被修改</span><br><span class="line">    <span class="number">2.</span> 使用读到的变量值E，计算该变量的新值,记为U</span><br><span class="line">&#125; <span class="keyword">while</span>( !CAS(变量内存地址，E，U) )</span><br></pre></td></tr></table></figure>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁：悲观锁在操作数据时比较悲观，认为别人会同时修改数据。<br>因此操作数据时直接把数据锁住，直到操作完成后才会释放锁；上锁期间其他人不能修改数据。</p>
<blockquote>
<p>比如Java里面的synchronized关键字的实现就是悲观锁。<br>实现方式：就是加锁。既可以是对代码块加锁（如Java的synchronized关键字），也可以是对数据加锁（如MySQL中的排它锁）</p>
</blockquote>
<h2 id="自旋锁、互斥锁"><a href="#自旋锁、互斥锁" class="headerlink" title="自旋锁、互斥锁"></a>自旋锁、互斥锁</h2><p>由于在多处理器环境中某些资源的有限性，有时需要互斥访问(mutual exclusion)，这时候就需要引入锁的概念，只有获取了锁的线程才能够对资源进行访问，由于多线程的核心是CPU的时间分片，所以同一时刻只能有一个线程获取到锁。<br>那么就面临一个问题，那么<strong>没有获取到锁的线程应该怎么办</strong>？</p>
<p>通常有两种处理方式：</p>
<ol>
<li>没有获取到锁的线程就一直循环等待判断该资源是否已经释放锁，这种锁叫做<strong>自旋锁</strong>，它不用将线程阻塞起来(NON-BLOCKING)；</li>
<li>把自己阻塞起来，等待重新调度请求，这种叫做<strong>互斥锁</strong>。</li>
</ol>
<h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>如果持有锁的线程能在短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞状态，它们只需要等一等(自旋)，等到持有锁的线程释放锁之后即可获取，这样就避免了用户进程和内核切换的消耗。</p>
<p>因为自旋锁避免了操作系统进程调度和线程切换，所以自旋锁通常适用在时间比较短的情况下。<br>由于这个原因，<strong>操作系统的内核经常使用自旋锁。</strong></p>
<p><strong>为什么设置自旋时间</strong><br>但是，如果长时间上锁的话，自旋锁会非常耗费性能，它阻止了其他线程的运行和调度。线程持有锁的时间越长，则持有该锁的线程将被 OS 调度程序中断的风险越大。如果发生中断情况，那么其他线程将保持旋转状态(反复尝试获取锁)，而持有该锁的线程并不打算释放锁，这样导致的是结果是无限期推迟，直到持有锁的线程可以完成并释放它为止。</p>
<p>解决上面这种情况一个很好的方式是给自旋锁设定一个自旋时间，等时间一到立即释放自旋锁。</p>
<p>自旋锁的目的是占着CPU资源不进行释放，等到获取锁立即进行处理。但是如何去选择自旋时间呢？如果自旋执行时间太长，会有大量的线程处于自旋状态占用 CPU 资源，进而会影响整体系统的性能。</p>
<p>因此自旋的周期选的额外重要！JDK在1.6 引入了适应性自旋锁，适应性自旋锁意味着自旋时间不是固定的了，而是<strong>由前一次在同一个锁上的自旋时间以及锁拥有的状态来决定</strong>，基本认为一个线程上下文切换的时间是最佳的一个时间。</p>
<p><strong>自旋锁场景</strong><br>自旋锁尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说性能能大幅度的提升，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗。</p>
<p>但是如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适合使用自旋锁了，因为自旋锁在获取锁前一直都是占用 cpu 做无用功，占着 XX 不 XX，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要 cpu 的线程又不能获取到 cpu，造成 cpu 的浪费。所以这种情况下我们要关闭自旋锁。</p>
<h2 id="独享锁、共享锁"><a href="#独享锁、共享锁" class="headerlink" title="独享锁、共享锁"></a>独享锁、共享锁</h2><p>两种锁只是一种概念</p>
<p>独享锁：该锁一次只能被一个线程所持有<br>共享锁：该锁可以被多个线程所持有</p>
<blockquote>
<p>synchronized是独享锁；<br>可重入锁ReentrantLock是独享锁；<br>读写锁ReentrantReadWriteLock中的 读锁ReadLock是共享锁，写锁WriteLock是独享锁。<br>独享锁与共享锁通过AQS(AbstractQueuedSynchronizer)来实现的，通过实现不同的方法，来实现独享或者共享。</p>
</blockquote>
<h2 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h2><p>公平锁：多个线程相互竞争时要排队，多个线程按照申请锁的顺序来获取锁。</p>
<p>非公平锁：多个线程相互竞争时，先尝试插队，插队失败再排队，比如：synchronized、ReentrantLock</p>
<h2 id="避免Java死锁"><a href="#避免Java死锁" class="headerlink" title="避免Java死锁"></a>避免Java死锁</h2><h2 id="java-8-vs-7"><a href="#java-8-vs-7" class="headerlink" title="java 8 vs 7"></a>java 8 vs 7</h2><ul>
<li>Lambda 表达式 − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</li>
<li>方法引用 − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li>
<li>默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。</li>
<li>新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</li>
<li>Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</li>
<li>Date Time API − 加强对日期与时间的处理。</li>
<li>Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li>
<li>Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</li>
</ul>
<h2 id="java-11-vs-8"><a href="#java-11-vs-8" class="headerlink" title="java 11 vs 8"></a>java 11 vs 8</h2><ul>
<li>局部变量类型推断，Java 10 引入了一个新的语言关键字 var，编译器从变量的赋值中推断出正确的类型。<ul>
<li>结合使用 final 和 var 可以禁止用另一个值对变量重新赋值。</li>
<li>当编译器不能推断出变量的正确类型时，也不允许使用var，会导致编译器错误。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// Cannot infer type:</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="type">var</span> <span class="variable">nothing</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">lambda</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Pity!&quot;</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>::someMethod;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>HTTPClient：新的 HTTPClient 既可以同步使用，也可以异步使用。<ul>
<li>同步请求阻塞当前线程，直到响应可用为止。</li>
<li>请求也可以异步执行。调用 sendAsync 不会阻塞当前线程，而是返回一个CompletableFuture 来构建异步操作管道。</li>
</ul>
</li>
<li>数据流 Streams 加了三个新方法。流是在 Java 8 中引入的。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stream.ofNullable 从单个元素构造流</span></span><br><span class="line">Stream.ofNullable(<span class="literal">null</span>)</span><br><span class="line">    .count()   <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dropWhile 和 takeWhile 方法都接受一个谓词来决定从流中放弃或选用哪些元素</span></span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    .dropWhile(n -&gt; n &lt; <span class="number">3</span>)</span><br><span class="line">    .collect(Collectors.toList());  <span class="comment">// [3, 2, 1]</span></span><br><span class="line"></span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    .takeWhile(n -&gt; n &lt; <span class="number">3</span>)</span><br><span class="line">    .collect(Collectors.toList());  <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li>
<li>String新增方法，用于修剪 trimming 或检查 checking 空白，以及将字符串转化为流。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; &quot;</span>.isBlank();       <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot; Foo Bar &quot;</span>.strip(); <span class="comment">// &quot;Foo Bar&quot;</span></span><br><span class="line"><span class="string">&quot; Foo Bar &quot;</span>.stripTrailing();  <span class="comment">// &quot; Foo Bar&quot;</span></span><br><span class="line"><span class="string">&quot; Foo Bar &quot;</span>.stripLeading();   <span class="comment">// &quot;Foo Bar &quot;</span></span><br><span class="line"><span class="string">&quot;Java&quot;</span>.repeat(<span class="number">3</span>);    <span class="comment">// &quot;JavaJavaJava&quot;</span></span><br><span class="line"><span class="string">&quot;A\nB\nC&quot;</span>.lines().count();    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="java-17-vs-11"><a href="#java-17-vs-11" class="headerlink" title="java 17 vs 11"></a>java 17 vs 11</h2><h2 id="服务端挂了，客户端的-TCP-连接还在吗？"><a href="#服务端挂了，客户端的-TCP-连接还在吗？" class="headerlink" title="服务端挂了，客户端的 TCP 连接还在吗？"></a>服务端挂了，客户端的 TCP 连接还在吗？</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/561756264">HTTPs://zhuanlan.zhihu.com/p/561756264</a></p>
</blockquote>
<ul>
<li>如果客户端会发送数据，由于服务端已经不存在，客户端的数据报文会超时重传，当重传次数达到一定阈值后，会断开 TCP 连接；</li>
<li>如果客户端一直不会发送数据，再看客户端有没有开启 TCP keepalive 机制？<ul>
<li>如果有开启，客户端在一段时间后，检测到服务端的 TCP 连接已经不存在，则会断开自身的 TCP 连接；</li>
<li>如果没有开启，客户端的 TCP 连接会一直存在，并不会断开。</li>
</ul>
</li>
</ul>
<h2 id="RPC协议-vs-本地调用"><a href="#RPC协议-vs-本地调用" class="headerlink" title="RPC协议 vs 本地调用"></a>RPC协议 vs 本地调用</h2><p>RPC协议的主要目的：做到不同服务间调用方法像同一服务间调用本地方法一样。</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>本地调用</th>
<th>RPC</th>
</tr>
</thead>
<tbody><tr>
<td>调用 ID 和函数的映射</td>
<td>进程内可共享内存地址空间，因此程序可直接通过函数名来调用函数。而函数名的本质就是一个函数指针，可以看成函数在内存中的地址。比如，调用函数 f()，编译器会帮我们找到函数 f() 相应的内存地址</td>
<td>RPC 中，只通过函数名是不行的，因为不同进程的地址空间是不一样的。所有的函数必须要有一个调用 ID 来唯一标识。<code> 1.</code> 一个机器上运行的进程在做远程过程调用时，必须附上这个调用 ID。<code>2.</code>在通信的两台机器间，分别维护一个函数与调用 ID 的映射表。两台机器维护的表中，相同的函数对应的调用 ID 必须保持一致。 <code>eg. </code>当一台机器 A 上运行的进程 P 需要远程调用时，它就先查一下机器 A 维护的映射表，找出对应的调用 ID，然后把它传到另一台机器 B 上，机器 B 通过查看它维护的映射表，从而确定进程 P 需要调用的函数，然后执行对应的代码，最后将执行结果返回到进程 P。</td>
</tr>
<tr>
<td>序列化和反序列化</td>
<td>进程之间共享内存等，因此我们只需要把参数压到栈里，然后进程自己去栈里读取</td>
<td>在 RPC 中，两个进程分布在不同的机器上，使用的是不同机器的内存，因此不可能通过内存来传递参数。网络协议传输的内容是二进制流，这就需要调用方把参数先转成一个二进制流，传到被调用方后，被调用方再把二进制流转换成自己能读取的格式。这个过程，就叫作序列化和反序列化。被调用方返回的结果也需要有序列化和反序列化的过程，不然调用方无法获取到结果。</td>
</tr>
</tbody></table>
<h2 id="RPC协议-vs-HTTP协议"><a href="#RPC协议-vs-HTTP协议" class="headerlink" title="RPC协议 vs HTTP协议"></a>RPC协议 vs HTTP协议</h2><p><code>HTTP协议</code>和<code>基于RPC协议实现的RPC框架</code>都能实现跨网络节点之间的一些服务通信，底层都是TCP协议作为通信基础。</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>HTTP</th>
<th>RPC</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>应用层的超文本传输协议，主要用在网页端和服务端的传输上</td>
<td>远程过程调用，用于实现不同计算机之间应用之间的数据通信，屏蔽了通信的底层复杂度，让开发者像调用本地服务一样去完成远程服务的调用</td>
</tr>
<tr>
<td>实现</td>
<td>已经成熟的协议，定义了通信报文的格式，比如Request Body、Request Header、Response Body、Response Header</td>
<td>只是通信协议的规范，没有具体的实现。按照RPC协议实现的通信框架，才是RPC协议的具体实现，比如Dubbo、gRPC。可以自定义报文通信的一些规范、自定义序列化方式、自定义网络通信协议的类型。</td>
</tr>
</tbody></table>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>序列化：把对象转化为字节序列过程称为序列化。便于网络运输和传播，也方便持久化存储到磁盘，避免程序运行结束后对象就从内存里消失。</li>
<li>反序列化：把字节序列还原为对象的过程称为反序列化。</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；</li>
<li>将对象存储到文件中的时候需要进行序列化，将对象从文件中读取出来需要进行序列化。</li>
<li>将对象存储到Redis时需要用到序列化，将对象从Redis中读取出来需要反序列化。</li>
</ol>
<h2 id="序列化属于OSI哪一层？"><a href="#序列化属于OSI哪一层？" class="headerlink" title="序列化属于OSI哪一层？"></a>序列化属于OSI哪一层？</h2><p>OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流量转换成应用层的用户数据。这不就对应的是序列化和反序列化么？</p>
<p>OSI 七层协议模型中的应用层、表示层和会话层对应的都是 TCP&#x2F;IP 四层模型中的应用层。</p>
<p>所以序列化协议属于 TCP&#x2F;IP 协议应用层的一部分。</p>
<h2 id="序列化常见的协议-方式"><a href="#序列化常见的协议-方式" class="headerlink" title="序列化常见的协议&#x2F;方式"></a>序列化常见的协议&#x2F;方式</h2><ul>
<li><code>JDK</code> 自带的序列化方式一般不会用 ，因为序列化效率低并且部分版本有安全漏洞。比较常用的序列化协议有 <code>hessian</code>、<code>kyro</code>、<code>protostuf</code>。<blockquote>
<p>上述均属于基于二进制的序列化协议。具体介绍详见【java序列化】。</p>
</blockquote>
</li>
<li><code>JSON</code> 和 <code>XML</code> 这种属于文本类序列化方式，可读性比较好，但是性能较差，一般不会选择。</li>
</ul>
<h2 id="java序列化"><a href="#java序列化" class="headerlink" title="java序列化"></a>java序列化</h2><h3 id="JDK-自带的序列化方式"><a href="#JDK-自带的序列化方式" class="headerlink" title="JDK 自带的序列化方式"></a>JDK 自带的序列化方式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>要实现下面两个接口之一，2选1</p>
<ol>
<li>选择实现 Serializable 接口。</li>
<li>选择实现 Externalizable 接口。</li>
</ol>
<table>
<thead>
<tr>
<th>Serializable</th>
<th>Externalizable</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>是Serializable接口的子类</td>
</tr>
<tr>
<td>默认序列化所有属性，不想序列化的字段可以使用transient修饰。</td>
<td>要实现的<code>writeExternal()</code>和<code>readExternal()</code> 方法，用来决定如何序列化和反序列化。</td>
</tr>
</tbody></table>
<ul>
<li>被static修饰的字段是不会被序列化的</li>
<li>被transient修饰符修饰的字段也是不会被序列化的</li>
</ul>
<h4 id="Serializable-举例"><a href="#Serializable-举例" class="headerlink" title="Serializable 举例"></a>Serializable 举例</h4><p>假如我们要对Student类对象序列化到一个名为student.txt的文本文件中，然后再通过文本文件反序列化成Student类对象</p>
<ol>
<li><p>Student类定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student:&quot;</span> + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&quot;name = &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&quot;age = &quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&quot;score = &quot;</span> + <span class="built_in">this</span>.score + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ... 其他省略 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(  )</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;CodeSheep&quot;</span>);</span><br><span class="line">    student.setAge( <span class="number">18</span> );</span><br><span class="line">    student.setScore( <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>( <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>( <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;student.txt&quot;</span>) ) );</span><br><span class="line">    objectOutputStream.writeObject( student );</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;序列化成功！已经生成student.txt文件&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;==============================================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserialize</span><span class="params">(  )</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>( <span class="keyword">new</span> <span class="title class_">FileInputStream</span>( <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;student.txt&quot;</span>) ) );</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) objectInputStream.readObject();</span><br><span class="line">    objectInputStream.close();</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;反序列化结果为：&quot;</span>);</span><br><span class="line">    System.out.println( student );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果【控制台打印】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">序列化成功！已经生成student.txt文件</span><br><span class="line">==============================================</span><br><span class="line">反序列化结果为：</span><br><span class="line">Student:</span><br><span class="line">name = CodeSheep</span><br><span class="line">age = 18</span><br><span class="line">score = 1000</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h4><p><code>serialVersionUID</code>是序列化前后的唯一标识符。</p>
<p>如果没有人为显式定义过<code>serialVersionUID</code>，那编译器会为它自动声明一个。</p>
<p><code>serialVersionUID</code>序列化ID，可以看成是序列化和反序列化过程中的“暗号”，在反序列化时，JVM会把字节流中的序列号ID和被序列化类中的序列号ID做比对，只有两者一致，才能重新反序列化，否则就会报异常来终止反序列化的过程。</p>
<blockquote>
<p>为了<code>serialVersionUID</code>的确定性，建议只要是<code>implements Serializable</code>的类，都最好人为显式地为它声明一个<code>serialVersionUID</code>明确值。</p>
</blockquote>
<blockquote>
<p>如果不想手动赋值，也可以借助IDE的自动添加功能，比如用IntelliJ IDEA，按alt + enter就可以为类自动生成和添加<code>serialVersionUID</code>字段</p>
</blockquote>
<h3 id="Kryo"><a href="#Kryo" class="headerlink" title="Kryo"></a>Kryo</h3><h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><p>出自于 Google，性能还比较优秀，也支持多种语言，同时还是跨平台的。就是在使用中过于繁琐，因为你需要自己定义 IDL 文件和生成对应的序列化代码。这样虽然不然灵活，但是，另一方面导致 protobuf 没有序列化漏洞的风险。</p>
<h3 id="ProtoStuff"><a href="#ProtoStuff" class="headerlink" title="ProtoStuff"></a>ProtoStuff</h3><p>基于 Google protobuf，但是提供了更多的功能和更简易的用法。更加易用。</p>
<h3 id="hession"><a href="#hession" class="headerlink" title="hession"></a>hession</h3><p>hessian 是一个轻量级的,自定义描述的二进制 RPC 协议。hessian 是一个比较老的序列化实现了，并且同样也是跨语言的。</p>
<h2 id="Java代理实现"><a href="#Java代理实现" class="headerlink" title="Java代理实现"></a>Java代理实现</h2><h2 id="推荐系统架构"><a href="#推荐系统架构" class="headerlink" title="推荐系统架构"></a>推荐系统架构</h2><p>推荐系统架构(数据流图)<br><img src="/2023/07/30/java-knowledge/recommand.jpg" alt="page-recommand1" title="推荐系统架构"></p>
<h2 id="高并发中的集合有哪些问题"><a href="#高并发中的集合有哪些问题" class="headerlink" title="高并发中的集合有哪些问题"></a>高并发中的集合有哪些问题</h2><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote>
<p>【spring、springboot、springcloud的区别】HTTPs:&#x2F;&#x2F;<a href="http://www.jianshu.com/p/ecf67d555093">www.jianshu.com/p/ecf67d555093</a><br>【Spring、SpringMVC、SpringBoot、SpringCloud的区别与联系】HTTPs:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1516989</p>
</blockquote>
<h2 id="BeanFactory、ApplicationContext"><a href="#BeanFactory、ApplicationContext" class="headerlink" title="BeanFactory、ApplicationContext"></a>BeanFactory、ApplicationContext</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka</title>
    <url>/2023/07/26/kafka/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kafka 是一种分布式的，基于发布 &#x2F; 订阅的消息系统。主要设计目标如下：</p>
<ul>
<li>高可用：多副本机制。</li>
<li>高并发：网络架构设计 三层架构：多selector -&gt; 多线程 -&gt; 队列的设计（NIO） </li>
<li>高性能：<ul>
<li>写数据：1.把数据先写入到OS Cache；2.写到磁盘上面是顺序写，性能很高。</li>
<li>读数据：1.根据稀疏索引，快速定位到要消费的数据；2.零拷贝机制 减少数据的拷贝 减少了应用程序与操作系统上下文切换。</li>
</ul>
</li>
</ul>
<p><img src="/2023/07/26/kafka/kafka-art.png" alt="page-imgt1" title="Kafka架构图"></p>
<h3 id="Producer、Consumer"><a href="#Producer、Consumer" class="headerlink" title="Producer、Consumer"></a>Producer、Consumer</h3><p>客户端有两种基本类型：</p>
<ul>
<li>生产者（Producer）：创建消息。</li>
<li>消费者（Consumer）：负责消费&#x2F;读取消息。</li>
</ul>
<h3 id="Topic、Partition"><a href="#Topic、Partition" class="headerlink" title="Topic、Partition"></a>Topic、Partition</h3><p>消息以主题（Topic）来分类，每一个主题都对应一个「消息队列」，类似于数据库中的表。<br>默认一个topic有一个分区（partition），自己可设置多个分区（分区分散存储在服务器不同节点上）。</p>
<h3 id="Broker、Cluster"><a href="#Broker、Cluster" class="headerlink" title="Broker、Cluster"></a>Broker、Cluster</h3><p>Kafka集群中，一个kafka服务器就是一个broker，它接受生产者发送的消息并存入磁盘。<br>若干个 Broker 组成一个集群（Cluster），集群内某个 Broker 会成为集群控制器（Cluster Controller），它负责管理集群，包括分配分区到 Broker、监控 Broker 故障等。</p>
<p>在集群内，一个分区（partition）由一个 Broker 负责，这个 Broker 也称为这个分区的 Leader；<br>一个分区（partition）可以被复制到多个 Broker 上来实现冗余，这样当存在 Broker 故障时可以将其分区重新分配到其他 Broker 来负责。</p>
<h3 id="多集群"><a href="#多集群" class="headerlink" title="多集群"></a>多集群</h3><p>当构建多个数据中心时，往往需要实现消息互通。举个例子，假如用户修改了个人资料，那么后续的请求无论被哪个数据中心处理，这个更新需要反映出来。又或者，多个数据中心的数据需要汇总到一个总控中心来做数据分析。</p>
<p>上面说的分区复制冗余机制只适用于同一个 Kafka 集群内部，对于多个 Kafka 集群消息同步可以使用 Kafka 提供的 MirrorMaker 工具。本质上来说，MirrorMaker 只是一个 Kafka 消费者和生产者，并使用一个队列连接起来而已。它从一个集群中消费消息，然后往另一个集群生产消息。</p>
<h2 id="pull-模型"><a href="#pull-模型" class="headerlink" title="pull 模型"></a>pull 模型</h2><p>消费者应该向 Broker 要数据（pull）还是 Broker 向消费者推送数据（push）？</p>
<blockquote>
<p>作为一个消息系统，Kafka 遵循了传统的方式，选择由 Producer 向 broker push 消息并由 Consumer 从 broker pull 消息。<br>一些 logging-centric system，比如 Facebook 的Scribe和 Cloudera 的Flume，采用 push 模式。<br>push 模式和 pull 模式各有优劣。</p>
</blockquote>
<p>push 模式很难适应消费速率不同的消费者。<br>因为消息发送速率是由 broker 决定的。push 模式的目标是尽可能以最快速度传递消息，但是这样很容易造成 Consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而 pull 模式则可以根据 Consumer 的消费能力以适当的速率消费消息。</p>
<p>对于 Kafka 而言，pull 模式更合适。<br><strong>优点</strong></p>
<ul>
<li>pull 模式可简化 broker 的设计，Consumer 可自主控制消费消息的速率，可以自主决定是否批量的从从broker拉取数据。</li>
<li>Consumer 可以自己控制消费方式——即可批量消费也可逐条消费，还能选择不同的提交方式从而实现不同的传输语义。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>如果broker没有可供消费的消息,将导致consume不断在循环中轮询,直到新消息到达。<blockquote>
<p>为了避免这点,Kafka有个参数可以让consumer阻塞直到新消息到达。</p>
</blockquote>
</li>
</ul>
<h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><blockquote>
<p><a href="https://blog.csdn.net/u014753478/article/details/117932192">https://blog.csdn.net/u014753478/article/details/117932192</a><br><a href="https://zhuanlan.zhihu.com/p/459610418">https://zhuanlan.zhihu.com/p/459610418</a><br><a href="https://zhuanlan.zhihu.com/p/341546586">https://zhuanlan.zhihu.com/p/341546586</a></p>
</blockquote>
<p>Kafka 中有三次消息传递过程（这三步中每一步都可能会出现丢失数据的情况）：</p>
<ol>
<li>Producer 端发送消息给 Kafka Broker 端。</li>
<li>Kafka Broker 将消息进行同步，并且持久化数据。</li>
<li>Consumer 端从Kafka Broker 将消息拉取并进行消费。</li>
</ol>
<h3 id="Producer丢失"><a href="#Producer丢失" class="headerlink" title="Producer丢失"></a>Producer丢失</h3><ol>
<li>生产者是与leader直接交互，所以先从集群获取topic对应分区的leader元数据；</li>
<li>获取到leader分区元数据后直接将消息发给过去；</li>
<li>Kafka Broker对应的leader分区收到消息后写入文件持久化；</li>
<li>Follower拉取Leader消息与Leader的数据保持一致；</li>
<li>Follower消息拉取完毕需要给Leader回复ACK确认消息；</li>
<li>Kafka Leader和Follower分区同步完，Leader分区会给生产者回复ACK确认消息。</li>
</ol>
<p>生产者发送消息到broker是会存在消息丢失的，大多可能是由于网络原因引起的，消息中间件中一般都是通过ack来解决这个问题的，kafka中可以通过设置ack来解决这个问题。</p>
<p>Kafka通过配置<code>request.required.acks</code>属性来确认消息的生产</p>
<ul>
<li><code>ack==0</code>表示不进行消息接收是否成功的确认；不能保证消息是否发送成功，生成环境基本不会用。</li>
<li><code>ack==1</code>表示当Leader接收成功时确认；只要Leader存活就可以保证不丢失，保证了吞吐量。</li>
<li><code>ack==-1或者all</code>表示Leader和Follower都接收成功时确认；可以最大限度保证消息不丢失，但是吞吐量低。</li>
</ul>
<!-- Producer 端为了提升发送效率，减少IO操作，发送数据的时候是将多个请求合并成（被合并的请求先缓存在本地buffer中），并将其封装转换成 Request 请求「异步」将数据发送出去（也可以按时间间隔方式，达到时间间隔自动发送）。

#### 失败原因
* 如果producer被非法停止，buffer中的数据将会丢失，broker将无法收到该部分数据。
* 如果producer内存不够，并且采用的策略是丢弃消息，消息也会丢失。
* 如果消息生产过快，导致挂起线程过多，内存不足，导致程序崩溃，消息丢失。
### 解决思路
* 异步发送改为同步发送，或者service发送消息时，使用阻塞线程池，并且线程数量有一定上限。也就是控制消息生产速度。
* 扩大buffer容量配置，这种方式可以缓解，但是不能避免。
* service不直接将消息发送到buffer，而是保存到本地磁盘中，另外起一个线程进行发送。 -->
<h3 id="Broker持久化丢失"><a href="#Broker持久化丢失" class="headerlink" title="Broker持久化丢失"></a>Broker持久化丢失</h3><p>Broker 集群接收到数据后会将数据进行持久化存储到磁盘，为了提高吞吐量和性能，采用的是「异步批量刷盘的策略」：按照一定的消息量和间隔时间进行刷盘。<br>首先会将数据存储到 「PageCache」 中，至于什么时候将 Cache 中的数据刷盘是由「操作系统」根据自己的策略决定或者调用 fsync 命令进行强制刷盘。<br>如果此时 Broker 宕机 Crash 掉，且选举了一个落后 Leader Partition 很多的 Follower Partition 成为新的 Leader Partition，那么落后的消息数据就会丢失。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果broker发生故障，那么此时page cache的数据就会丢失，broker端可以设置刷盘的参数，比如多久刷盘一次，不过这个参数不建议去修改。</p>
<p>最好的方案还是设置多副本，一个分区设置几个副本，当broker故障的时候，如果还有其他副本，那么数据就不会丢失。</p>
<h3 id="Consumer消费丢失"><a href="#Consumer消费丢失" class="headerlink" title="Consumer消费丢失"></a>Consumer消费丢失</h3><p>Consumer的消费方式主要分为两种：</p>
<ol>
<li>自动提交offset, Automatic Offset Committing</li>
<li>手动提交offset, Manual Offset Control</li>
</ol>
<p>Consumer自动提交机制是根据一定的时间间隔，将收到的消息进行commit。commit的过程和消费过程是异步的，也就是说可能存在消费过程未成功，但是commit已经提交了。此时消息就丢失了。</p>
<p>解决方式是把自动提交改为手动提交。可以保证消息至少被消费一次，但是此时可能出现重复消费的情况。</p>
<h2 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h2><h3 id="Producer重复发送"><a href="#Producer重复发送" class="headerlink" title="Producer重复发送"></a>Producer重复发送</h3><h3 id="Consumer重复消费"><a href="#Consumer重复消费" class="headerlink" title="Consumer重复消费"></a>Consumer重复消费</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>数据消费完没有及时提交offset到broker。<br>消息消费端在消费过程中挂掉没有及时提交offset到broke，另一个消费端启动拿之前记录的offset开始消费，由于offset的滞后性可能会导致新启动的客户端有少量重复消费。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>取消自动提交：<br>每次消费完或者程序退出时手动提交。这可能也没法保证一条重复。</p>
<p>下游做幂等：<br>一般是让下游做幂等或者尽量每消费一条消息都记录offset，对于少数严格的场景可能需要把offset或唯一ID（例如订单ID）和下游状态更新放在同一个数据库里面做事务来保证精确的一次更新或者在下游数据表里面同时记录消费offset，然后更新下游数据的时候用消费位移做乐观锁拒绝旧位移的数据更新。</p>
<h2 id="zk的作用"><a href="#zk的作用" class="headerlink" title="zk的作用"></a>zk的作用</h2><p>Zookeeper是分布式协调（它不是数据库）。<br>kafka中使用了zookeeper的分布式锁和分布式配置及统一命名的分布式协调解决方案。<br>在kafka的broker集群中的controller的选择,是通过zk的临时节点争抢获得的。<br>brokerlD等如果自增的话也是通过zk的节点version实现的全局唯一。<br>kafka中broker中的状态数据也是存储在zk中,不过这里要注意,zk不是数据库,所以存储的属于元数据<br>而,新旧版本变化中,就把曾经的offset从zk中迁移出了zk</p>
<h2 id="Rebalance-重平衡"><a href="#Rebalance-重平衡" class="headerlink" title="Rebalance&#x2F;重平衡"></a>Rebalance&#x2F;重平衡</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/108564156">https://zhuanlan.zhihu.com/p/108564156</a><br><a href="https://cloud.tencent.com/developer/article/1852157">https://cloud.tencent.com/developer/article/1852157</a></p>
</blockquote>
<h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><p>消费组有多个消费者，消费组在消费一个Topic的时候，kafka为了保证消息消费不重不漏，kafka将每个partition唯一性地分配给了消费者。但是如果某个消费组<strong>在消费的途中有消费者宕机</strong>或者<strong>有新的消费者加入</strong>的时候那么partition分配就是不公平的，可能导致某些消费者负载特别重，某些消费者又没有负载的情况。</p>
<p>Kafka有一种专门的机制处理这种情况，这种机制称为Rebalance机制。</p>
<p>当kafka遇到如下四种情况的时候，kafka会触发Rebalance机制：</p>
<ul>
<li>消费组成员发生了变更，比如有新的消费者加入了消费组组或者有消费者宕机。</li>
<li>消费者无法在指定的时间之内完成消息的消费。</li>
<li>消费组订阅的Topic发生了变化。</li>
<li>订阅的Topic的partition发生了变化。</li>
</ul>
<h3 id="Coordinator"><a href="#Coordinator" class="headerlink" title="Coordinator"></a>Coordinator</h3><p>Coordinator是Rebalance机制中非常重要的一个角色。</p>
<p>每个消费组都会有一个coordinator，Coordinator负责处理管理组内的消费者和位移管理，Coordinator并不负责消费组内的partition分配。消费者通过心跳的方式告知Coordinator自己仍然处于存活状态，Coordinator以session. timeout. ms参数的频率检测消费组group内消费者存活情况，该参数的默认值是10s，如果该值太大，那么coordinator需要非常长时间才能检测到消费者宕机。</p>
<h3 id="消费组leader"><a href="#消费组leader" class="headerlink" title="消费组leader"></a>消费组leader</h3><p>在Kafka的消费端，会有一个消费者协调器以及消费组，组协调器（Group Coordinator）需要为消费组内的消费者选举出一个消费组的leader。<br>如果消费组内还没有leader，那么第一个加入消费组的消费者即为消费组的leader，如果某一个时刻leader消费者由于某些原因退出了消费组，那么就会重新选举leader，选举方式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">private val members = <span class="built_in">new</span> mutable.HashMap[String, MemberMetadata]</span><br><span class="line">leaderId = members.keys.headOption</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在组协调器中消费者的信息是以HashMap的形式存储的，其中key为消费者的member_id，而value是消费者相关的元数据信息。而leader的取值为HashMap中的第一个键值对的key（等同于随机）。</p>
</blockquote>
<p>消费组的Leader和Coordinator没有关联。<br>消费组的leader负责Rebalance过程中消费分配方案的制定。</p>
<h3 id="Rebalance流程"><a href="#Rebalance流程" class="headerlink" title="Rebalance流程"></a>Rebalance流程</h3><blockquote>
<p>Rebalance 发生时，Group 下所有Consumer 实例都会协调在一起共同参与，kafka 能够保证尽量达到最公平的分配。但是 Rebalance 过程对 consumer group 会造成比较严重的影响。<br>在 Rebalance 的过程中 <strong>consumer group 下的所有消费者实例都会停止工作</strong>，等待 Rebalance 过程完成。</p>
</blockquote>
<h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><p>所有成员都向Group Coordinator发送JoinGroup请求，请求加入消费组。<br>一旦所有成员都发送了JoinGroup请求，Coordinator会从中选择一个Consumer担任leader的角色，并把组成员信息以及订阅信息发给leader。</p>
<blockquote>
<p>注意leader和coordinator不是一个概念。leader负责消费分配方案的制定。</p>
</blockquote>
<h4 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h4><p>这一步leader开始分配消费方案，即哪个consumer负责消费哪些topic的哪些partition。<br>一旦完成分配，leader会将这个方案封装进SyncGroup请求中发给coordinator。（非leader也会发SyncGroup请求，只是内容为空。）</p>
<p>coordinator接收到分配方案之后会把方案塞进SyncGroup的response中发给各个consumer。这样组内的所有成员就都知道自己应该消费哪些分区了。</p>
<h3 id="避免Rebalance"><a href="#避免Rebalance" class="headerlink" title="避免Rebalance"></a>避免Rebalance</h3><p>后两个时机是可以人为避免的（订阅topic或者Topic的partition发生了变化）。发生Rebalance最常见的原因是消费组成员个数发生变化。这其中消费者成员正常的添加和停掉导致Rebalance，也是无法避免。</p>
<p>但是在某些情况下，Consumer实例会被Coordinator错误地认为已停止从而被踢出Group。从而导致rebalance。<br>这种情况可以通过Consumer端的参数<code>session.timeout.ms</code>和<code>max.poll.interval.ms</code>进行配置。</p>
<p>Consumer还提供了控制发送心跳请求频率的参数，就是<code>heartbeat.interval.ms</code>。<br>这个值设置得越小，Consumer实例发送心跳请求的频率就越高。频繁地发送心跳请求会额外消耗带宽资源，但好处是能够更快地知道是否开启Rebalance，因为Coordinator通知各个Consumer实例是否开启Rebalance就是将REBALANCE_NEEDED标志封装进心跳请求的响应体中。</p>
<p>总之，要为业务处理逻辑留下充足的时间使Consumer不会因为处理这些消息的时间太长而引发Rebalance，但也不能时间设置过长导致Consumer宕机但迟迟没有被踢出Group。</p>
<h2 id="如何保证可靠性"><a href="#如何保证可靠性" class="headerlink" title="如何保证可靠性"></a>如何保证可靠性</h2><ul>
<li>对于一个分区来说，它的消息是有序的。如果一个生产者向一个分区先写入消息A，然后写入消息B，那么消费者会先读取消息A再读取消息B。</li>
<li>当消息写入所有in-sync状态的副本后，消息才会认为已提交（committed）。这里的写入有可能只是写入到文件系统的缓存，不一定刷新到磁盘。生产者可以等待不同时机的确认，比如等待分区主副本写入即返回，后者等待所有in-sync状态副本写入才返回。</li>
<li>一旦消息已提交，那么只要有一个副本存活，数据不会丢失。</li>
<li>消费者只能读取到已提交的消息。</li>
</ul>
]]></content>
      <categories>
        <category>消息队列</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>了解nacos</title>
    <url>/2023/07/26/nacos/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>了解Python偏函数</title>
    <url>/2023/07/25/python-partial/</url>
    <content><![CDATA[<h1 id="概念了解"><a href="#概念了解" class="headerlink" title="概念了解"></a>概念了解</h1><p>偏函数，是对原始函数的二次封装，把函数的部分参数规定好默认值。在调用偏函数时，可以不指定这部分参数的值。</p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>Python的函数参数可以有默认值，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">name, message = <span class="string">&quot;hello world&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&quot;, 您好&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;消息是：&quot;</span>, message)</span><br><span class="line"></span><br><span class="line">say_hi(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">say_hi(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;byebye&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>偏函数的效果类似于这个，但是区别是它新定义了一个函数，我们掉用的是这个新函数。<br>偏函数的定义用到<code>functools.partial</code>，<code>functools.partial</code>的作用就是将固定一个函数的默认行为，从而简化之后的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入functools模块中的partial函数</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义个原函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">name, message</span>):</span><br><span class="line">  <span class="built_in">print</span>(name, <span class="string">&quot;, 您好&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;消息是：&quot;</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义偏函数，func_a() 封装了 say_hi() 函数</span></span><br><span class="line"><span class="comment"># 并为 message 参数设置了默认参数</span></span><br><span class="line">func_a = partial(say_hi, message = <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于 message 参数已经有默认值，因此调用偏函数时，可以不指定</span></span><br><span class="line">func_a(name = <span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>偏函数</tag>
      </tags>
  </entry>
  <entry>
    <title>了解Python装饰器</title>
    <url>/2023/07/25/python-decorator/</url>
    <content><![CDATA[<h1 id="概念了解"><a href="#概念了解" class="headerlink" title="概念了解"></a>概念了解</h1><p>装饰器是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。</p>
<p>例如a()、b()等等函数都需要打印日志，为了减少“打印日志”部分代码的重复，就把这部分与函数功能本身无关的雷同代码抽离出来，并以装饰器的格式去重用它。</p>
<h1 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h1><p>插入日志、性能测试、事务处理、缓存、权限校验等等。</p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><blockquote>
<p>如何理解Python装饰器？<a href="https://www.zhihu.com/question/26930016/answer/99243411">https://www.zhihu.com/question/26930016/answer/99243411</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">  logging.info(<span class="string">&quot;func_a is running&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_b</span>():</span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  b = <span class="number">2</span></span><br><span class="line">  <span class="built_in">print</span>(a+b)</span><br><span class="line">  logging.info(<span class="string">&quot;func_b is running&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>func_a()</code>、<code>func_b()</code>中都有<code>打印日志</code>的代码，如果之后还有函数<code>func_c</code>、<code>func_d</code>也需要<code>打印日志</code>，这样就造成大量<code>打印日志</code>的雷同代码。<br>为了减少重复写代码，我们可以这样做，重新定义一个函数<code>print_log</code>专门处理打印日志的功能，并且在<code>func_a</code>、<code>func_b</code>中使用它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">func</span>):</span><br><span class="line">  logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">  func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print_log(func_a)</span><br></pre></td></tr></table></figure>
<p>但是这样的话，我们每次都要将一个函数作为参数传递给<code>print_log</code>函数。而且这种方式已经破坏了原有的代码逻辑结构，之前执行业务逻辑时，执行运行<code>func_a()</code>，但是现在不得不改成<code>print_log(func_a)</code>。</p>
<ul>
<li>那么有没有更好的方式的呢？<blockquote>
<p>Python装饰器</p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个简单的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">func</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">  <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func_a = print_log(func_a)</span><br><span class="line">func_a()</span><br></pre></td></tr></table></figure>

<p><code>@</code>符号是装饰器的语法糖，在定义函数的时候使用，避免再一次赋值操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器，应用 @ 语法糖写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">func</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">  <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@print_log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func_a()</span><br><span class="line"><span class="comment"># 这样可以省去func_a = print_log(func_a)这一句了</span></span><br><span class="line"><span class="comment"># 直接调用func_a()即可得到想要的结果。</span></span><br></pre></td></tr></table></figure>

<h1 id="装饰器丢失原函数信息"><a href="#装饰器丢失原函数信息" class="headerlink" title="装饰器丢失原函数信息"></a>装饰器丢失原函数信息</h1><h2 id="元信息丢失"><a href="#元信息丢失" class="headerlink" title="元信息丢失"></a>元信息丢失</h2><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、<code>参数列表</code>，先看例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@print_log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和以下代码效果一样</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func_a = print_log(func_a)</span><br></pre></td></tr></table></figure>
<p>也就是说函数<code>func_a</code>被<code>print_log</code>所替代，即<code>func_a</code>的<code>docstring</code>，<code>__name__</code>等等信息都是<code>with_logging</code>函数的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func_a.__name__ = <span class="string">&#x27;with_logging&#x27;</span></span><br><span class="line"><span class="comment"># 原本应该等于 `func_a`</span></span><br></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>使用<code>functools.wraps</code>，它能把原函数的元信息拷贝到装饰器函数中，这使得装饰器函数也有和原函数一样的元信息了。<br>(<code>wraps</code>也是一个装饰器)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">  @wraps(<span class="params">func</span>)</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">  <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@print_log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func_a()</span><br><span class="line"><span class="comment"># 这样可以省去func_a = print_log(func_a)这一句了</span></span><br><span class="line"><span class="comment"># 直接调用func_a()即可得到想要的结果。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/07/31/redis-knowledge/</url>
    <content><![CDATA[<h2 id="redis是什么"><a href="#redis是什么" class="headerlink" title="redis是什么"></a>redis是什么</h2><p>一种运行速度很快，并发很强的跑在内存上的NoSql数据库。<br>支持键到五种数据类型的映射。</p>
<blockquote>
<p>采用了多路复用io阻塞机制，<br>数据结构简单，操作节省时间，<br>运行在内存中，自然速度快。</p>
</blockquote>
<h2 id="5种数据类型"><a href="#5种数据类型" class="headerlink" title="5种数据类型"></a>5种数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>string 是 redis 最基本的类型，是简单的Key-Value模型，Value可以是字符串，也可以是数字。一个 key 对应一个 value。<br>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。<br>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增key1,值为hello</span></span><br><span class="line">set key1 hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置一个键为key2，值为world，并且30秒后过期</span></span><br><span class="line">set key2 30 world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果key不存在，则创建一个key，如果key存在，则创建失败并返回0。</span></span><br><span class="line">setnx key3 testaaa</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setnx在分布式锁中经常使用到</span></span><br></pre></td></tr></table></figure>
<h3 id="Hash-散列表-哈希"><a href="#Hash-散列表-哈希" class="headerlink" title="Hash 散列表&#x2F;哈希"></a>Hash 散列表&#x2F;哈希</h3><p>hash 是 字符 filed 和 value 之间的映射表，所以非常适合用于存储对象（比如：一个用户有多个属性字段，如：名称，年龄等等。）<br>Hash 适合存储对象结构，或者数据库表的字段结构。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEL key1</span><br><span class="line"></span><br><span class="line">HMSET key1 field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;OK&quot;</span></span></span><br><span class="line"></span><br><span class="line">HGET key1 field1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Hello&quot;</span></span></span><br><span class="line"></span><br><span class="line">HGET key1 field2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;World&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>hash是最接近关系数据库结构的数据类型，，可以将数据库一条记录或程序中一个对象转换成hashmap存放在redis中。<br>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key&#x2F;value结构来存储，主要有以下2种存储方式：</p>
<ol>
<li>第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，这种方式的缺点是，增加了序列化&#x2F;反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。</li>
<li>第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。</li>
</ol>
<h3 id="List-列表-链表"><a href="#List-列表-链表" class="headerlink" title="List 列表&#x2F;链表"></a>List 列表&#x2F;链表</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。<br>你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<ul>
<li>Lpush：表示的是向链表的左添加，也就是向链表的头添加；</li>
<li>Rpush：表示的是向链表的右添加，也就是向链表的尾添加。</li>
</ul>
<ol>
<li>如果key不存在，就创建新的链表；</li>
<li>如果key存在就创建新的值；</li>
<li>如果移除了所有的值，空链表，也就代表不存在；</li>
<li>在两边插入或者改动值，效率最高，中间元素相对来说效率会低一点。</li>
</ol>
<h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h3><p>Redis 的 Set 是 string 类型的无序集合。<br>在Set集合当中，是不允许有重复的。<br>set是通过hash table(哈希表)实现的，所以添加，删除，查找的复杂度都是 O(1)。<br>对集合我们可以取并集，交集，差集。<br><code>sadd</code>：添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEL key3</span><br><span class="line">sadd key3 redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 1</span></span><br><span class="line">sadd key3 mongodb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 1</span></span><br><span class="line">sadd key3 rabbitmq</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">(<span class="built_in">integer</span>) 1</span></span><br><span class="line">sadd key3 rabbitmq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 0</span></span><br><span class="line">smembers key3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1) <span class="string">&quot;redis&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) <span class="string">&quot;rabbitmq&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) <span class="string">&quot;mongodb&quot;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset 有序集合"></a>zset 有序集合</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p>
<p>zset 和 set 不同的是每个元素都会关联一个double类型的分数score。redis正是通过分数score来为zset中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>
<ul>
<li>zset有序集合的实现方式是哪种数据结构？<blockquote>
<p>跳跃表。</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEL key4</span><br><span class="line">zadd key4 0 redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 1</span></span><br><span class="line">zadd key4 0 mongodb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 1</span></span><br><span class="line">zadd key4 0 rabbitmq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 1</span></span><br><span class="line">zadd key4 0 rabbitmq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(<span class="built_in">integer</span>) 0</span></span><br><span class="line">ZRANGEBYSCORE key4 0 1000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1) <span class="string">&quot;mongodb&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) <span class="string">&quot;rabbitmq&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) <span class="string">&quot;redis&quot;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial 地理位置"></a>Geospatial 地理位置</h3><h3 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog 基数统计"></a>Hyperloglog 基数统计</h3><h3 id="Bitmap-位图场景"><a href="#Bitmap-位图场景" class="headerlink" title="Bitmap 位图场景"></a>Bitmap 位图场景</h3><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><p>string</p>
<ul>
<li>缓存结构体信息：将结构体json序列化成字符串，然后将字符串保存在redis的value中，将结构体的业务唯一标示作为key；这种保存json的用法用的最多的场景就是缓存用户信息，将用户bean信息转成json再序列化为字符串作为value保存在redis中，将用户id作为key。从代码中获取用户缓存信息就是一个逆过程，根据userid作为key获取到结构体json，然后将json转成java bean。</li>
<li>计数器—点赞,视频播放量,每播放一次就+1。</li>
<li>统计多单位的数量。</li>
<li>粉丝数。</li>
</ul>
</li>
<li><p>hash</p>
<ul>
<li>主要用于存储部分变更数据，比如存储用户信息等。不同于字符串一次序列化整个对象，hash可以对用户结构中的每个字段单独存储。这样当我们需要获取结构体信息时可以进行部分获取，而不用序列化所有字段，而将整个字符串保存的结构体信息只能一次性全部读取。</li>
</ul>
</li>
<li><p>list</p>
<ul>
<li>list列表结构常用来做异步队列使用：将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。</li>
<li>list可用于秒杀抢购场景：在商品秒杀场景最怕的就是商品超卖，为了解决超卖问题，我们经常会将库存商品缓存到类似MQ的队列中，多线程的购买请求都是从队列中取，取完了就卖完了，但是用MQ处理的化有点重，这里就可以使用redis的list数据类型来实现，在秒杀前将本场秒杀的商品放到list中，因为list的pop操作是原子性的，所以即使有多个用户同时请求，也是依次pop，list空了pop抛出异常就代表商品卖完了。</li>
<li>消息队列：利用List的PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作List中某一段的api，你可以直接查询，删除List中某一段的元素。</li>
<li>消息排队，消息队列（Lpush、Rpop）、栈（Lpush、Lpop）</li>
<li>使用list可以构建队列系统，使用sorted set甚至可以构建有优先级的队列系统。</li>
</ul>
</li>
<li><p>set</p>
<ul>
<li>一些去重的场景里，例如每个用户只能参与一次活动、一个用户只能中奖一次等等去重场景。</li>
<li>微博、用户将所有关注的人都放入到一个set集合当中，将它的粉丝也放在一个集合中。</li>
<li>共同关注、共同爱好、二度好友、QQ的好友推荐（六度分割理论）</li>
</ul>
</li>
<li><p>zset </p>
<ul>
<li>热门排序场景。例如热门歌曲榜单列表，value值是歌曲ID，score是播放次数，这样就可以对歌曲列表按播放次数进行排序。</li>
<li>微博粉丝列表、评论列表等等。可以将value定义为用户ID、评论ID，score定义为关注时间、评论点赞次数等等。</li>
<li>存储班级成绩表、工资表排序。</li>
</ul>
</li>
</ul>
<h2 id="单线程还是多线程"><a href="#单线程还是多线程" class="headerlink" title="单线程还是多线程"></a>单线程还是多线程</h2><p>单线程。</p>
<p>因为Redis的瓶颈不是cpu的运行速度，而往往是网络带宽和机器的内存大小。再说了，单线程切换开销小，容易实现既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>
<ul>
<li><p>如果万一CPU成为你的Redis瓶颈了，或者，你就是不想让服务器其他核闲置，那怎么办？</p>
<blockquote>
<p>那也很简单，你多起几个Redis进程就好了。Redis是key-value数据库，又不是关系数据库，数据之间没有约束。只要客户端分清哪些key放在哪个Redis进程上就可以了。redis-cluster可以帮你做的更好。</p>
</blockquote>
</li>
<li><p>单线程可以处理高并发请求吗？</p>
<blockquote>
<p>当然可以，Redis都实现了。<br>有一点概念需要澄清，并发并不是并行。<br>（相关概念：并发性I&#x2F;O流，意味着能够让一个计算单元来处理来自多个客户端的流请求。并行性，意味着服务器能够同时执行几个事情，具有多个计算单元）</p>
</blockquote>
</li>
</ul>
<h2 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h2><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><p>将某个时间点的所有数据都存放到硬盘上。<br>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。<br>恢复时是将快照文件直接读到内存里。</p>
<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。<br>如果数据量很大，保存快照的时间会很长。</p>
<h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><p>RDB是通过保存数据库中的键值对来记录数据库的状态，AOF 则是通过保存Redis服务器所执行的写命令来记录数据库状态。<br><code>redis.conf</code>配置文件中关于AOF的配置：</p>
<ul>
<li>appendonly：默认值为no，也就是说redis 默认使用的是rdb方式持久化，如果想要开启 AOF 持久化方式，需要将 appendonly 修改为 yes。</li>
<li>appendfilename ：AOF文件名，默认是”appendonly.AOF”</li>
<li>appendfsync：<strong>AOF持久化策略</strong>的配置；<ul>
<li>no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快，但是不太安全（不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量）；</li>
<li>always表示每次写入都执行fsync，以保证数据同步到磁盘，效率很低，会严重减低服务器的性能；</li>
<li>everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。<strong>通常选择 everysec</strong> ，兼顾安全性和效率（可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响）。</li>
</ul>
</li>
</ul>
<h2 id="事务实现"><a href="#事务实现" class="headerlink" title="事务实现"></a>事务实现</h2><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h2 id="3种集群模式"><a href="#3种集群模式" class="headerlink" title="3种集群模式"></a>3种集群模式</h2><p>主从模式<br>Sentinel 模式（哨兵模式）<br>Cluster 模式</p>
<h2 id="主从Master-Slave模式"><a href="#主从Master-Slave模式" class="headerlink" title="主从Master-Slave模式"></a>主从Master-Slave模式</h2><blockquote>
<p><a href="https://blog.csdn.net/qq_34596292/article/details/112646529">https://blog.csdn.net/qq_34596292/article/details/112646529</a></p>
</blockquote>
<p>Redis 的主从模式跟 mysql 主从复制原理差不多，在主从复制中，数据库分为两类：主数据库（master）和从数据库（slave）。</p>
<p>主从复制主要有如下特点：</p>
<ul>
<li>主数据库可以进行读写操作，从库只能进行读操作（可以配置从库支持读写操作，不建议）。</li>
<li>当主数据库的读写操作导致数据变化时会自动将数据同步给从数据库。</li>
<li>主从模式可以是一主多从，即一个 master 可以拥有多个 slave，但只能一从一主，即一个 slave 只能对应一个 master。</li>
<li>slave 挂了之后不会影响其它 slave 读和 master 读写，重启启动 slave 之后会自动从 master 同步数据过来。</li>
<li>master 挂了以后，不影响 slave 读，但 Redis 不再提供写服务，master 重启后 Redis 将重新对外提供写服务。</li>
<li>master 挂了以后，不会在 slave 节点中重新选一个 master。</li>
<li>master 节点在主从模式中唯一，若 master 挂掉，则 Redis 无法对外提供写服务。</li>
</ul>
<h2 id="主从不一致"><a href="#主从不一致" class="headerlink" title="主从不一致"></a>主从不一致</h2><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h2 id="缓存穿透、击穿、雪崩"><a href="#缓存穿透、击穿、雪崩" class="headerlink" title="缓存穿透、击穿、雪崩"></a>缓存穿透、击穿、雪崩</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>客户持续向服务器发起对不存在服务器中数据的请求。客户先在Redis中查询，查询不到后去数据库中查询。</p>
<blockquote>
<p>你有多个APP的会员账号，你在自己的网站上发布了腾讯视频、爱奇艺等等的账号密码（就是没有芒果TV的会员）。<br>你的网站：redis，你的电话：数据库。<br>甲每过十秒钟就查询你的网站，发现网站没有B站的会员后，给你打电话。这就是缓存穿透。</p>
</blockquote>
<ul>
<li>解决办法：</li>
</ul>
<ol>
<li>接口层增加校验，对传参进行个校验，比如说我们的id是从1开始的，那么id&lt;&#x3D;0的直接拦截；</li>
<li>缓存中取不到的数据，在数据库中也没有取到，这时可以将key-value对写为key-null，这样可以防止攻击用户反复用同一个id暴力攻击。</li>
</ol>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>一个很热门的数据，突然失效，大量请求到服务器数据库中。</p>
<blockquote>
<p>大家都喜欢看优酷上的《甄嬛传》，但是优酷会员突然到期了，大家在你的网站上看不到优酷的账号，纷纷向你打电话，这就是缓存击穿。</p>
</blockquote>
<ul>
<li>解决办法：设置热点数据永不过期，拿到刚才的比方里，那就是你买腾讯一个永久会员。</li>
</ul>
<h3 id="缓冲雪崩"><a href="#缓冲雪崩" class="headerlink" title="缓冲雪崩"></a>缓冲雪崩</h3><p>大量数据同一时间失效。</p>
<blockquote>
<p>你的各种会员突然同一时间都失效了，这就是缓存雪崩。</p>
</blockquote>
<ul>
<li>解决办法：</li>
</ul>
<ol>
<li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li>
<li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</li>
</ol>
<h2 id="淘汰策略-6种"><a href="#淘汰策略-6种" class="headerlink" title="淘汰策略 6种"></a>淘汰策略 6种</h2><ul>
<li>volatile-lru： LRU算法，在设置过期时间的键中，选取一个最近最少使用的key淘汰掉。</li>
<li>volatile-ttl： 在设置了过期时间的键中，选取一个即将要过期的key淘汰。</li>
<li>volatile-random： 在设置了过期时间的键中，随机选取一个key淘汰。</li>
<li>allkeys-lru： 在所有键中，选取一个最近最少使用的key淘汰掉。</li>
<li>allkeys-random： 在所有键中，随机选取一个淘汰。</li>
<li>noeviction： 当内存到达阈值后，所有申请内存的操作都会报错。禁止驱逐数据（默认使用）。</li>
</ul>
<p>以上6种是让我们选出应该淘汰的键，那具体要怎么样进行删除？</p>
<blockquote>
<p>Redis中有3种删除过期键策略。</p>
</blockquote>
<h2 id="删除策略-3种"><a href="#删除策略-3种" class="headerlink" title="删除策略 3种"></a>删除策略 3种</h2><ul>
<li><p>定时删除：在设置键的过期时间的同时，设置一个定时器，当键过期了，定时器马上把该键删除。</p>
<blockquote>
<p>定时删除对内存来说是友好的，因为它可以及时清理过期键；但对CPU是不友好的，如果过期键太多，删除操作会消耗过多的资源。</p>
</blockquote>
</li>
<li><p>惰性删除：在键过期时，放任不管，如果后来有请求来查询该键，检测到该键已经过期了，此时才将这个键删除掉。</p>
<blockquote>
<p>惰性删除对CPU是友好的，因为只有在读取的时候检测到过期了才会将其删除。但对内存是不友好，如果过期键后续不被访问，那么这些过期键将积累在缓存中，对内存消耗是比较大的。</p>
</blockquote>
</li>
<li><p>定期删除：是定时删除和惰性删除的一个折中方案。每隔一段时间来删除过期键，可以根据实际场景自定义这个间隔时间，在CPU资源和内存资源上作出权衡。</p>
</li>
</ul>
<h2 id="在复制AOF文件时如何处理过期"><a href="#在复制AOF文件时如何处理过期" class="headerlink" title="在复制AOF文件时如何处理过期"></a>在复制AOF文件时如何处理过期</h2><p>为了获得正确的行为而不牺牲一致性,当一个key过期,DEL将会随着着AOF文字一起合成到所有附加的slaves。<br>在master实例中,这种方法是集中的,并且不存在一致性错误的机会。</p>
<p>然而,当slaves连接到master时,不会独立过期keys(会等到masteer执行DEL命令),他们任然会在数据集里面存在,所以当slave当选为master时淘汰keys会独立执行,然后成为rmaster。</p>
<h2 id="Redis缓存和MySQL不一致"><a href="#Redis缓存和MySQL不一致" class="headerlink" title="Redis缓存和MySQL不一致"></a>Redis缓存和MySQL不一致</h2><p>不管是先写MySQL数据库，再删除Redis缓存；还是先删除缓存，再写库，都有可能出现数据不一致的情况。</p>
<h3 id="延时双删策略"><a href="#延时双删策略" class="headerlink" title="延时双删策略"></a>延时双删策略</h3><h3 id="删除缓存重试机制"><a href="#删除缓存重试机制" class="headerlink" title="删除缓存重试机制"></a>删除缓存重试机制</h3><h3 id="读取biglog异步删除缓存"><a href="#读取biglog异步删除缓存" class="headerlink" title="读取biglog异步删除缓存"></a>读取biglog异步删除缓存</h3><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><h2 id="缓存如何回收"><a href="#缓存如何回收" class="headerlink" title="缓存如何回收"></a>缓存如何回收</h2>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
        <tag>非关系型数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/07/31/mysql-knowledge/</url>
    <content><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务（Transaction）是访问和更新数据库的程序执行单元；事务中可能包含一个或多个sql语句，这些语句要么都执行，要么都不执行，不会存在部分成功的情况。</p>
<ul>
<li>在同一个事务当中，所有的SQL语句都成功执行时，整个事务成功。</li>
<li>有一个SQL语句执行失败，整个事务都执行失败。</li>
</ul>
<h2 id="事务特性-ACID"><a href="#事务特性-ACID" class="headerlink" title="事务特性:ACID"></a>事务特性:ACID</h2><h3 id="原子性（Atomicity-）"><a href="#原子性（Atomicity-）" class="headerlink" title="原子性（Atomicity ）"></a>原子性（Atomicity ）</h3><p>事务是最小的执行单位，不允许分割。原子性确保动作要么全部完成，要么完全不起作用；<br>原子性是从最终结果来看的，从最终结果来看这个过程是不可分割的。</p>
<h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><p>官网上事务一致性的概念是：事务必须使数据库从一个一致性状态变换到另外一个一致性状态。<br>人话：执行事务前后，数据保持一致；事务按照预期生效，数据的状态是预期的状态。</p>
<blockquote>
<p>举例说明：张三向李四转100元，转账前和转账后的数据是正确的状态，这就叫一致性，如果出现张三转出100元，李四账号没有增加100元这就出现了数据错误，就没有达到一致性。</p>
</blockquote>
<h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h3><p>并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p>
<p><strong>事务的隔离级别：</strong></p>
<ul>
<li>读未提交：read uncommitted</li>
<li>读已提交：read committed</li>
<li>可重复读：repeatable read</li>
<li>串行化：serializable</li>
</ul>
<h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><p>一个事务被提交之后。对数据库中数据的改变是持久的，接下来即使数据库发生故障也不应该对其有任何影响。</p>
<blockquote>
<p>例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>
</blockquote>
<h2 id="ACID靠什么保证的"><a href="#ACID靠什么保证的" class="headerlink" title="ACID靠什么保证的"></a>ACID靠什么保证的</h2><ul>
<li>原子性由<code>undolog</code>日志来保证,它记录了需要回滚的日志信息,事务回滚时撤销已经执行成功的sql。</li>
<li>一致性是由其他三大特性保证,I程序代码要保证业务上的一致性。</li>
<li>隔离性是由MVCC（多版本并发控制）来保证。</li>
<li>持久性由redolog来保证,mysql修改数据的时候会在redolog中记录一份日志数据,就算数据没有保存成功,只要<br>日志保存成功了,数据仍然不会丢失。</li>
</ul>
<h2 id="隐式事务-显式事务"><a href="#隐式事务-显式事务" class="headerlink" title="隐式事务 显式事务"></a>隐式事务 显式事务</h2><ul>
<li>隐式事务：事务没有明显的开启和结束标记。</li>
<li>显示事务：事务具有明显的开启和结束标记。</li>
</ul>
<p>查看数据库的默认提交状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="comment">-- 或者另一种方法：</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>; <span class="comment">-- 推荐</span></span><br></pre></td></tr></table></figure>
<h3 id="隐式事务"><a href="#隐式事务" class="headerlink" title="隐式事务"></a>隐式事务</h3><p>事务没有明显的开启和结束的标记。<br>MySQL默认的提交状态就是开启状态（隐式事务）。<br>数据库默认的增删改都是隐式事务，执行insert、update、delete操作的时候，数据库自动开启事务、提交或回滚事务。</p>
<h3 id="显式事务"><a href="#显式事务" class="headerlink" title="显式事务"></a>显式事务</h3><p>需要设置自动提交功能为禁用状态。然后开启事务，进行SQL语句的操作执行，再根据<strong>是否成功</strong>进行<code>提交</code>或者<code>回滚</code>。</p>
<ul>
<li>成功：开启事务——&gt;执行事务中的多条SQL语句——&gt;成功——&gt;提交事务。<br>一旦提交后，就不能再更改。</li>
<li>失败：开启事务——&gt;执行事务中的多条SQL语句——&gt;失败——&gt;回滚事务。<br>失败就需要回滚事务，保证数据正常。</li>
</ul>
<p>与显示事务相关的SQL语句：</p>
<table>
<thead>
<tr>
<th>SQL语句</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SET autocommit &#x3D; 0;</td>
<td>关闭默认提交</td>
</tr>
<tr>
<td>START TRANSACTION;</td>
<td>开启事务</td>
</tr>
<tr>
<td>COMMIT;</td>
<td>提交事务</td>
</tr>
<tr>
<td>ROLLBACK;</td>
<td>回滚事务</td>
</tr>
</tbody></table>
<p><strong>代码示例</strong><br>原来：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;小鱼&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;小猫&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>改写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 成功：</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 编写事务SQL语句</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">800</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;小鱼&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1200</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;小猫&#x27;</span>;</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line">​​<span class="comment">-- 查看结果以验证</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 失败：</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 编写事务SQL语句</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">500</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;小鱼&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1500</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;小猫&#x27;</span>;</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line">​<span class="comment">-- 查看结果以验证</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br></pre></td></tr></table></figure>

<h2 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h2><h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><h3 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>读到了其他事务未提交的数据（读了不一定最终存在的数据）。<code>未提交</code>意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，即不存在的数据。</p>
<blockquote>
<p>1、在事务A执行过程中，事务A对数据资源进行了修改，事务B读取了事务A修改后的数据。<br>2、由于某些原因，事务A并没有完成提交，发生了RollBack操作，则事务B读取的数据就是脏数据。</p>
</blockquote>
<p><img src="/2023/07/31/mysql-knowledge/isolation1.jpg" alt="page-isolation1" title="脏读"></p>
<h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><p>在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。通常针对数据更新（UPDATE）操作。</p>
<h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>在同一个事务中，前后两次读取的数据不一致的现象就是不可重复读。</p>
<blockquote>
<p>事务B读取了两次数据资源，在事务B这两次读取的过程中事务A修改了数据，导致事务B在这两次读取出来的数据不一致。</p>
</blockquote>
<p><img src="/2023/07/31/mysql-knowledge/isolation2.jpg" alt="page-isolation2" title="不可重复读"></p>
<h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>针对数据插入（INSERT）操作来说的。</p>
<blockquote>
<p>事务A对某些行的内容作了更改，但是还未提交，此时事务B插入了与事务A更改前的记录相同的记录行，并且在事务A提交之前先提交了，而这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务B刚插入进来的。</p>
<p>事务B前后两次读取同一个范围的数据，在事务B两次读取的过程中,事务A新增了数据，导致事务B后一次读取到前一次查询没有看到的行。</p>
</blockquote>
<p><img src="/2023/07/31/mysql-knowledge/isolation3.jpg" alt="page-isolation3" title="幻读"></p>
<h4 id="第一类更新丢失"><a href="#第一类更新丢失" class="headerlink" title="第一类更新丢失"></a>第一类更新丢失</h4><p>事务A和事务B都对数据进行更新，但是事务A由于某种原因事务回滚了，把已经提交的事务B的更新数据给覆盖了。这种现象就是第一类更新丢失。<br><img src="/2023/07/31/mysql-knowledge/isolation4.jpg" alt="page-isolation4" title="第一类更新丢失"></p>
<h4 id="第二类更新丢失"><a href="#第二类更新丢失" class="headerlink" title="第二类更新丢失"></a>第二类更新丢失</h4><p>其实跟第一类更新丢失有点类似，也是两个事务同时对数据进行更新，但是事务A的更新把已提交的事务B的更新数据给覆盖了。这种现象就是第二类更新丢失。<br><img src="/2023/07/31/mysql-knowledge/isolation5.jpg" alt="page-isolation5" title="第二类更新丢失"></p>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>在MySQL中，隔离级别有四个：</p>
<blockquote>
<p>从上往下，隔离强度逐渐增强，性能逐渐变差。采用哪种隔离级别要根据系统需求权衡决定。</p>
</blockquote>
<p><img src="/2023/07/31/mysql-knowledge/isolation6.png" alt="page-isolation6" title="隔离级别"></p>
<h4 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h4><p>会读到脏数据；例如事务A正在修改某数据，而且还没提交，所以还没提交的中间数据是不应该被别的事务读到的，也就是脏的。</p>
<h4 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h4><p>不会读到脏的数据，但不能重复读。</p>
<h4 id="可重复读-1"><a href="#可重复读-1" class="headerlink" title="可重复读"></a>可重复读</h4><p>可以重复读，但可能会有幻读（MySQL的默认级别）。</p>
<h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>事务A和事务B，事务A在操作数据库时，事务B只能排队等待。这种隔离级别很少用。</p>
<h2 id="MVCC解决什么问题"><a href="#MVCC解决什么问题" class="headerlink" title="MVCC解决什么问题"></a>MVCC解决什么问题</h2><p>MVCC：Multi-Version Concurrency Controll，即多版本并发控制。</p>
<p>数据库并发场景有三种,分别为:</p>
<ol>
<li>读读:不存在任何问题,也不需要并发控制。</li>
<li>读写:有线程安全问题,可能会造成事务隔离性问题,可能遇到脏读、幻读、不可重复读。</li>
<li>写写:有线程安全问题,可能存在更新丢失问题。</li>
</ol>
<p>MVCC是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单项增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库车的快照。</p>
<p>所以MVCC可以为数据库解决一下问题:</p>
<ol>
<li>在并发读写数据库时,可以做到在读操作时不用阻塞写操作,写操作也不用阻塞读操作,提高了数据库并<br>发读写的性能。</li>
<li>解决脏读、幻读、不可重复读等事务隔离问题,但是不能解决更新丢失问题。</li>
</ol>
<h2 id="MVCC实现原理"><a href="#MVCC实现原理" class="headerlink" title="MVCC实现原理"></a>MVCC实现原理</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/492249490">https://zhuanlan.zhihu.com/p/492249490</a></p>
</blockquote>
<p>MVCC实现原理主要是靠 <code>版本链(3个隐藏字段)</code>，<code>undolog</code> ，<code>Read View</code> 来实现的。</p>
<h3 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h3><p>我们数据库中的每行数据，除了我们肉眼看见的数据，还有3个隐藏字段，分别是<code>db_trx_id</code>、<code>db_roll_pointer</code>、<code>db_row_id</code>。</p>
<ul>
<li><code>db_roll_pointer</code>（版本链关键）：回滚指针，指向上一个旧版本，用于配合<code>undolog</code>。</li>
<li><code>db_trx_id</code>：记录最近一次操作该记录的事务ID。</li>
<li><code>db_row_id</code>：隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以<code>db_row_id</code>产生一个聚簇索引。</li>
</ul>
<p>每次对数据库记录进行改动，都会记录一条<code>undolog</code>，每条<code>undolog</code>也都有一个<code>roll_pointer</code>属性，所有的版本都会被<code>roll_pointer</code>属性连接成一个链表，我们把这个链表称之为版本链。<br>版本链的头节点就是当前记录最新的值。</p>
<p>另外，每个版本中还包含生成该版本时对应的事务id（这个信息很重要，在根据<code>ReadView</code>判断版本可见性的时候会用到）。</p>
<h3 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a><code>undolog</code></h3><p><code>undolog</code> 主要用于记录数据被修改之前的日志，在表信息修改之前先会把数据拷贝到<code>undolog</code>里。<br>当事务进行回滚时可以通过<code>undolog</code> 里的日志进行数据还原。</p>
<ul>
<li>insert <code>undolog</code>：代表事务在insert新记录时产生的<code>undolog</code> , 只在事务回滚时需要，并且在事务提交后可以被立即丢弃。</li>
<li>update <code>undolog</code>：事务在进行update或delete时产生的<code>undolog</code> ; 不仅在事务回滚时需要，在快照读时也需要（最主要的<code>undolog</code>）；不能随便删除，只有在快速读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除。</li>
</ul>
<h3 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a><code>Read View</code></h3><p>事务进行快照读操作的时候生产的读视图(<code>Read View</code>)，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照。<br><code>Read View</code>的几个属性（根据这些属性的值 和 上述内容 去做可见性判断，看读取哪个版本）：</p>
<ul>
<li><code>trx_ids</code>: 当前系统活跃(未提交)事务版本号集合。</li>
<li><code>low_limit_id</code>: 创建当前<code>Read View</code> 时“当前系统最大事务版本号+1”。</li>
<li><code>up_limit_id</code>: 创建当前<code>Read View</code> 时“系统正处于活跃事务最小版本号”。</li>
<li><code>creator_trx_id</code>: 创建当前<code>Read View</code>的事务版本号。</li>
</ul>
<h4 id="可见性判断"><a href="#可见性判断" class="headerlink" title="可见性判断"></a>可见性判断</h4><ol>
<li><code>db_trx_id</code> &lt; <code>up_limit_id</code> || <code>db_trx_id</code> &#x3D;&#x3D; <code>creator_trx_id</code>（显示）<br>如果数据事务ID小于<code>Read View</code>中的最小活跃事务ID，则可以肯定该数据是在当前事务启之前就已经存在了的,所以可以显示。<br>或者数据的事务ID等于<code>creator_trx_id</code> ，那么说明这个数据就是当前事务自己生成的，自己生成的数据自己当然能看见，所以这种情况下此数据也是可以显示的。</li>
<li><code>db_trx_id</code> &gt;&#x3D; <code>low_limit_id</code>（不显示）<br>如果数据事务ID大于<code>Read View</code> 中的当前系统的最大事务ID，则说明该数据是在当前<code>Read View</code> 创建之后才产生的，所以数据不显示。如果小于则进入下一个判断</li>
<li><code>db_trx_id</code>是否在活跃事务（<code>trx_ids</code>）中<br>不存在：则说明<code>Read View</code>产生的时候事务已经commit了，这种情况数据则可以显示。<br>已存在：则代表我<code>Read View</code>生成时刻，你这个事务还在活跃，还没有Commit，你修改的数据，我当前事务也是看不见的。</li>
</ol>
<h4 id="RC、RR快照生成时机"><a href="#RC、RR快照生成时机" class="headerlink" title="RC、RR快照生成时机"></a>RC、RR快照生成时机</h4><p>上面所讲的<code>Read View</code>用于支持RC（Read Committed，读提交）和RR（Repeatable Read，可重复读）隔离级别的实现。<br>根据快照生成时机不同，所以隔离级别不同。RR、RC的快照生成时机：</p>
<ul>
<li>RC隔离级别下，是每个快照读都会生成并获取最新的<code>Read View</code>；</li>
<li>RR隔离级别下，则是同一个事务中的第一个快照读才会创建<code>Read View</code>, 之后的快照读获取的都是同一个<code>Read View</code>，之后的查询就不会重复生成了，所以一个事务的查询结果每次都是一样的。</li>
</ul>
<h2 id="产生几种日志"><a href="#产生几种日志" class="headerlink" title="产生几种日志"></a>产生几种日志</h2><h2 id="B树-B-树"><a href="#B树-B-树" class="headerlink" title="B树 B+树"></a>B树 B+树</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>B树，即平衡多路查找树（B-Tree），是为磁盘等外存储设备设计的一种平衡查找树。</p>
<ol>
<li>树内的每个节点都存储数据；</li>
<li>叶子节点之间无指针连接。</li>
</ol>
<p><img src="/2023/07/31/mysql-knowledge/b-tree.png" alt="page-imgt1" title="b树"></p>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+树相对于B树的两个特点：</p>
<ol>
<li>数据只出现在叶子节点</li>
<li>所有叶子节点增加了一个链指针</li>
</ol>
<ul>
<li>为什么选择B+树？<blockquote>
<p>B树每个节点中不仅包含数据的key值，还有data值。<br>而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点能存储的key的数量很小，要保存同样多的key，就需要增加树的高度。<br>树的高度每增加一层，查询时的磁盘I&#x2F;O次数就增加一次，进而影响查询效率。<br>而在B+树中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+树的高度。<br>B+树的叶子节点上有指针进行相连，因此在做数据遍历的时候，只需要对叶子节点进行遍历即可，这个特性使得B+树非常适合做范围查询。</p>
</blockquote>
</li>
</ul>
<p><img src="/2023/07/31/mysql-knowledge/b+tree.png" alt="page-imgt2" title="b+树"></p>
<h2 id="B-树高度"><a href="#B-树高度" class="headerlink" title="B+树高度"></a>B+树高度</h2><blockquote>
<p><a href="https://blog.csdn.net/NoviceZ/article/details/126960942">https://blog.csdn.net/NoviceZ/article/details/126960942</a><br><a href="https://zhuanlan.zhihu.com/p/86137284https://zhuanlan.zhihu.com/p/86137284">https://zhuanlan.zhihu.com/p/86137284https://zhuanlan.zhihu.com/p/86137284</a></p>
</blockquote>
<p>B+树的分支非常多，而且每个非叶子节点只存主键值（主键索引）和指针，数据存在于叶子节点。磁盘的IO次数与树的高度是相同的。</p>
<p>在Innodb存储引擎里面，最小存储单元是页，而一个页的大小默认是16KB。也即代表B+树的每个节点可以存16KB数据。</p>
<p>这里我们假设我们的一行数据大小是1K，那么我们一个节点就可以存16行数据。</p>
<blockquote>
<p>注意：我们真正的数据都是存在叶子节点的，所以这里是指叶子节点可以存放16行数据。</p>
</blockquote>
<p>我们前面也说了，非叶子节点存放的是主键值与指针，所以这里<strong>假设主键类型为bigint，占用8Byte，指针可以设置为占用6Byte，总共就为14Byte</strong>。<br>这样就可以算出一个节点大概可以存放多少个指针了（指针指向下一层节点），大概为16KB&#x2F;14Byte&#x3D;1170个。</p>
<p>由此，可以推算出，2层B+树的话，可以存放1170<em>16&#x3D;18720行数据。3层B+树的话，可以存放1170</em>1170*16&#x3D;21902400行数据，也就差不多2000w条数据了。</p>
<h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/335734145">https://zhuanlan.zhihu.com/p/335734145</a></p>
</blockquote>
<p>数据库索引好比是一本书的<code>目录</code>，可以直接根据页码找到对应的内容，目的就是为了加快数据库的查询速度。</p>
<p>相对于cpu和内存操作，磁盘IO开销很大，非常容易成为系统的性能瓶颈，因此计算机操作系统做了一些优化：</p>
<p>当一次IO时，将相邻的数据也都读取到内存缓冲区内，而不是仅仅读取当前磁盘地址的数据。因</p>
<p>为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。</p>
<p>每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p>
<ul>
<li>为什么索引能提升数据库查询效率呢？<blockquote>
<p>根本原因就在于索引减少了查询过程中的IO次数。</p>
</blockquote>
</li>
<li>那么它是如何做到的呢？<blockquote>
<p>使用B+树。</p>
</blockquote>
</li>
</ul>
<h3 id="如何实现索引"><a href="#如何实现索引" class="headerlink" title="如何实现索引"></a>如何实现索引</h3><p>mysql的索引是由存储引擎来实现，不同的存储引擎实现方式不同。<br>2种主流的引擎：</p>
<ul>
<li>InnoDB（聚集索引）</li>
<li>MyISAM（非聚集索引）</li>
</ul>
<h3 id="聚簇索引、非聚簇索引"><a href="#聚簇索引、非聚簇索引" class="headerlink" title="聚簇索引、非聚簇索引"></a>聚簇索引、非聚簇索引</h3><p>聚集索引中，数据库表行中数据的物理顺序与键值的逻辑（索引）顺序相同，聚集索引有着更快的检索速度。<br>一个表的物理顺序只有一种情况，因此对应的聚集索引只能有一个。</p>
<p>如果某索引不是聚集索引(非聚集索引)，则表中的行物理顺序与索引顺序不匹配。</p>
<h4 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h4><ul>
<li><p>建立聚集索引</p>
<blockquote>
<p>1.在Innodb中，聚簇索引默认就是主键索引。<br>2.如果表中没有定义主键，那么该表的第一个唯一非空索引被作为聚集索引。<br>3.如果没有主键也没有合适的唯一索引，那么innodb内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个6个字节的列，改列的值会随着数据的插入自增。</p>
</blockquote>
</li>
<li><p>自增主键和uuid作为主键的区别？</p>
<blockquote>
<p>由于主键使用了聚集索引，如果主键是自增id，那么对应的数据一定也是相邻地存放在磁盘上的，写入性能比较高。<br>如果是uuid的形式，频繁的插入会使innodb频繁地移动磁盘块，写入性能就比较低了。</p>
</blockquote>
</li>
<li><p>聚集索引查询过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># student表中，id是聚集索引</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>先找到根节点所在磁盘块，读入内存。（第1次磁盘I&#x2F;O操作）</li>
<li>在内存中判断id&#x3D;2所在区间(0,8)，找到该区间对应的指针1（第1次内存查找）</li>
<li>根据指针1记录的磁盘地址，找到磁盘块2并读入内存（第2次磁盘I&#x2F;O操作）</li>
<li>…如此重复第2步和第3步，直到找到id&#x3D;2的记录</li>
<li>在内存中查找到id&#x3D;2对应的数据行记录</li>
</ol>
<h4 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h4><p>多加一个索引，就会多生成一颗<code>非聚簇索引树</code>。</p>
<blockquote>
<p>索引不能随意增加。在做写库操作的时候，需要同时维护这几颗树的变化，导致效率降低。</p>
</blockquote>
<p>不同于聚集索引，非聚集索引叶子节点上不再是真实数据，而是存储了<code>索引字段自身值</code>和<code>主键索引</code>。<br>比如：student表中，id是聚集索引，name是非聚集索引，这颗树上的叶子节点上就是存的不是data，而是id、name。</p>
<ol>
<li>查询的是主键和非聚集索引本身<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>和主键查询需要的查询过程一样，只需要扫描一次索引树（n次磁盘I&#x2F;O和内存查询），即可拿到想要的数据id、name。</p>
</blockquote>
</li>
<li>查询的不是id和name  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># student表中，id是聚集索引，name是非聚集索引</span><br><span class="line"><span class="keyword">SELECT</span> score <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>扫描完name的非聚集索引树后，获取到对应的name和主键id，然后用id的值再去聚集索引中去查询score的值。<br>  这里相当于做了2次索引树的查询，相对于聚集索引，查询的效率下降了。(回表查询)</p>
</blockquote>
</li>
</ol>
<h3 id="回表查询-二次查询"><a href="#回表查询-二次查询" class="headerlink" title="回表查询&#x2F;二次查询"></a>回表查询&#x2F;二次查询</h3><p>使用聚集索引查询可以直接定位到记录。<br>使用普通索引的时候，非聚集索引查询了不是索引本身和主键id的时候，通常需要扫描两遍索引树。即先通过普通索引定位到主键值，在通过聚集索引定位到行记录。<br>这就是所谓的回表查询，它的性能比扫描一遍索引树低。</p>
<ul>
<li>如何避免回表查询？<blockquote>
<p>建立联合索引。</p>
</blockquote>
</li>
</ul>
<h3 id="联合索引-多列-组合-复合索引"><a href="#联合索引-多列-组合-复合索引" class="headerlink" title="联合索引(多列&#x2F;组合&#x2F;复合索引)"></a>联合索引(多列&#x2F;组合&#x2F;复合索引)</h3><p>联合索引是建立在多个字段上的索引。<br>联合索引依然是应用了B+树，但联合索引的健值数量不是一个，而是多个。</p>
<p>由于构建一颗B+树只能根据一个值来构建，因此使用联合索引<code>最左的字段</code>来构建B+树。</p>
<p>例如，student表中，id是聚集索引，我们再以name和score建立联合索引。<br>这样之后，可以直接通过扫描非聚集索引直接获取score的值，而不再需要到主键id的聚集索引上二次扫描才能获取score了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># student表中，name和score建立联合索引</span><br><span class="line"><span class="keyword">SELECT</span> score <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="最左前缀匹配"><a href="#最左前缀匹配" class="headerlink" title="最左前缀匹配"></a>最左前缀匹配</h3><p><strong>带头索引不能死，中间索引不能断</strong></p>
<p><strong>最左前缀匹配原则</strong>：在MySQL建立<code>联合索引</code>时会遵守最左前缀匹配原则，即最左优先，在检索数据时从<code>联合索引</code>的最左边开始匹配。</p>
<p>假如目前根据name和score建立了联合索引。<br>那么索引在排序上，首先按name排序，name相等的节点中，再按score排序。因此，如果查询条件是<code>name</code>或<code>name和score</code>联查时，是可以应用到索引的。如果查询条件是单独使用<code>score</code>，因为无法确定<code>name</code>的值，因此无法使用索引。</p>
<p><strong>假如在table表的a,b,c三个列上建立联合索引</strong>：</p>
<ul>
<li>等值查询<ol>
<li>三个索引都用到了，联合索引<strong>有效</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">where</span>子句搜索条件顺序调换不影响索引使用，</span><br><span class="line"># 因为查询优化器会自动优化查询顺序 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> b<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> c<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> b<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> c<span class="operator">=</span><span class="number">3</span> <span class="keyword">AND</span> a<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>匹配左边的前几个列时（<code>a</code>或者<code>a和b</code>），联合索引<strong>有效</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> b<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> a<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>查询列的顺序不连续时（用的<code>a和c</code>，没有用<code>b</code>），联合索引<strong>部分有效</strong>。<br>会用到a列索引，所以会先通过a列的索引筛选出a&#x3D;1的记录。<br>c排序依赖于b，但这里没有用到b。所以只能再在这些记录中<code>遍历筛选</code>c&#x3D;3的值，是一种不完全使用索引的情况。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> c<span class="operator">=</span><span class="number">3</span> <span class="keyword">AND</span> a<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>没有从最左开始，联合索引<strong>失效</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> b<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> c<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>范围查询<ol>
<li>用的最左查询范围，联合索引<strong>有效</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> a<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">AND</span> a<span class="operator">&lt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure></li>
<li>匹配最左，范围查询第二列，联合索引<strong>有效</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> b<span class="operator">&gt;</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
<li>匹配最左，范围查询第三列，联合索引<strong>部分有效</strong>。<br>使用a列索引筛选出a&gt;1的记录行。<br>c排序依赖于b，但这里没有用到b。所以只能再在这些记录中<code>遍历筛选</code>c&gt;3的值，是一种不完全使用索引的情况。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> a<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">AND</span> c<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><ol>
<li>联合索引不满足最左匹配原则</li>
<li>使用了select *</li>
<li>使用<code>!=</code>  <code>&lt;&gt;</code>  <code>NOT IN</code>、<code>NOT EXISTS</code><blockquote>
<p>当查询条件为<strong>等值查询</strong>或<strong>范围查询</strong>时，索引可以根据查询条件去找对应的条目。<br>否则，索引定位困难（结合我们查字典的例子去理解），执行计划此时可能更倾向于全表扫描。</p>
</blockquote>
</li>
<li>OR引起的索引失效<blockquote>
<p>并不是所有的OR都是使索引失效，如果OR连接的是同一个字段(<code>WHERE score = 9 OR score = 5</code>)，那么索引不会失效，反之索引失效（<code>WHERE name = &#39;张三&#39; OR score = 5</code>）。<br>如果想使用OR，又想让索引生效，只能将OR条件中的每个列都加上索引。</p>
</blockquote>
</li>
<li>LIKE通配符，模糊搜索’%冰’<blockquote>
<p>使用后置通配符模糊搜索，会走索引。<br>如果你前缀也进行模糊搜索，那么不会走索引。</p>
</blockquote>
</li>
<li>IS NULL不走索引<ul>
<li>IS NULL ： 不走索引；</li>
<li>IS NOT NULL： 走索引。<blockquote>
<p>建议大家这设计字段的时候，如果不是必须为NULL，那么最好给个默认值空字符串。</p>
</blockquote>
</li>
</ul>
</li>
<li>索引列上做了运算操作<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用函数,这个情况会使用索引</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name<span class="operator">=</span><span class="built_in">upper</span>(<span class="string">&#x27;ZHANGFEI&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 使用函数,这个情况会导致索引失效</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="built_in">upper</span>(name)<span class="operator">=</span><span class="string">&#x27;ZHANGFEI&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 在索引列上计算，索引失效</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="number">-1</span><span class="operator">=</span><span class="number">17</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><h3 id="InnoDB索引-MyISAM索引"><a href="#InnoDB索引-MyISAM索引" class="headerlink" title="InnoDB索引 MyISAM索引"></a>InnoDB索引 MyISAM索引</h3><h3 id="查看表的索引"><a href="#查看表的索引" class="headerlink" title="查看表的索引"></a>查看表的索引</h3><h3 id="索引优先级"><a href="#索引优先级" class="headerlink" title="索引优先级"></a>索引优先级</h3><h3 id="B-树索引实现原理"><a href="#B-树索引实现原理" class="headerlink" title="B+树索引实现原理"></a>B+树索引实现原理</h3><h3 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h3><p><strong>影响性能吗</strong></p>
<h2 id="平衡二叉树-红黑树"><a href="#平衡二叉树-红黑树" class="headerlink" title="平衡二叉树 红黑树"></a>平衡二叉树 红黑树</h2><h2 id="2-3树-2-3-4树"><a href="#2-3树-2-3-4树" class="headerlink" title="2-3树 2-3-4树"></a>2-3树 2-3-4树</h2><h2 id="自增主键、字符串主键"><a href="#自增主键、字符串主键" class="headerlink" title="自增主键、字符串主键"></a>自增主键、字符串主键</h2><h2 id="回表操作"><a href="#回表操作" class="headerlink" title="回表操作"></a>回表操作</h2><h2 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h2><h2 id="char-varchar"><a href="#char-varchar" class="headerlink" title="char varchar"></a>char varchar</h2><h2 id="decimal-float-double"><a href="#decimal-float-double" class="headerlink" title="decimal float double"></a>decimal float double</h2><h2 id="MySQL调优"><a href="#MySQL调优" class="headerlink" title="MySQL调优"></a>MySQL调优</h2><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><h2 id="文件存储-emoji"><a href="#文件存储-emoji" class="headerlink" title="文件存储 emoji"></a>文件存储 emoji</h2><h2 id="存储ip地址"><a href="#存储ip地址" class="headerlink" title="存储ip地址"></a>存储ip地址</h2><h2 id="存储长文本"><a href="#存储长文本" class="headerlink" title="存储长文本"></a>存储长文本</h2><h2 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h2>]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>关系型数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题-复杂度</title>
    <url>/2023/08/15/lc-knowledge/</url>
    <content><![CDATA[<h1 id="java常见数据结构"><a href="#java常见数据结构" class="headerlink" title="java常见数据结构"></a>java常见数据结构</h1><table>
<thead>
<tr>
<th>数据结构</th>
<th>查找</th>
<th>插入</th>
<th>删除</th>
</tr>
</thead>
<tbody><tr>
<td>有序数组</td>
<td>O(lgn)</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>数组ArrayList</td>
<td>O(n)</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>链表LinkedList</td>
<td>O(n)</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>红黑二叉树TreeMap</td>
<td>O(lgn)</td>
<td>O(lgn)</td>
<td>O(lgn)</td>
</tr>
<tr>
<td>哈希表HashMap (hash碰撞情况都是O(lgn))</td>
<td>O(1)</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h1 id="二叉树有哪些？"><a href="#二叉树有哪些？" class="headerlink" title="二叉树有哪些？"></a>二叉树有哪些？</h1><p>满二叉树，完全二叉树。</p>
<blockquote>
<p>区别：<br>满二叉树：除最后一层无任何子节点外，每一层上的所有结点都有两个子结点二叉树。<br>完全二叉树：1.只允许最后一层有空缺结点且空缺在右边，即叶子结点只能在层次最大的两层上出现； 2. 对任一结点，如果其右子树的深度为j，则其左子树的深度必为j或j+1。 即度为1的点只有1个或0个。</p>
</blockquote>
<p>二叉搜索树，平衡二叉树 (AVL)，红黑树，字典树。<br>最小堆，最大堆。<br>多路搜索树：B-树，B+树。<br>霍夫曼树，伸展树。</p>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><blockquote>
<p>二叉树后序遍历的两种易写的非递归写法[<a href="https://zhuanlan.zhihu.com/p/80578741]">https://zhuanlan.zhihu.com/p/80578741]</a></p>
</blockquote>
<p>前序遍历：根左右<br>中序遍历：左根右<br>后序遍历：左右根</p>
<h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123; </span><br><span class="line">                <span class="comment">// 经过并访问所有左节点</span></span><br><span class="line">                ans.add(cur.val);</span><br><span class="line">                s.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 自底向上找栈中节点的第一个非空右子树</span></span><br><span class="line">            <span class="keyword">while</span>(!s.isEmpty() &amp;&amp; cur==<span class="literal">null</span>) &#123;</span><br><span class="line">                cur = s.pop().right; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h3><h4 id="双栈【简单】"><a href="#双栈【简单】" class="headerlink" title="双栈【简单】"></a>双栈【简单】</h4><p>左右根 倒过去 是 根右左。<br>可以先求出遍历顺序是<strong>根右左</strong>的节点序列，再倒序，便刚好是后序遍历的顺序：<strong>左右根</strong>。<br>我们可以选用两个栈，一个用于根右左遍历，一个用于保存序列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存节点序列的栈</span></span><br><span class="line">        Stack&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">                res.push(cur.val);</span><br><span class="line">                s.push(cur);</span><br><span class="line">                cur = cur.right; <span class="comment">// 修改处</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!s.isEmpty()) &#123;</span><br><span class="line">                cur = s.pop();</span><br><span class="line">                cur = cur.left; <span class="comment">// 修改处</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!res.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 获取倒序的根右左序列</span></span><br><span class="line">            ans.add(res.pop()); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单栈"><a href="#单栈" class="headerlink" title="单栈"></a>单栈</h4><p>后序遍历的开头和前序遍历是可以一样的，都是先经过二叉树的最左分支，直到经过的节点是个叶子节点（没有左右孩子）为止。</p>
<p>前序遍历和中序遍历的时候，它们经过的路径都是左根右，对于前序和中序来说，访问路径基本上跟经过路径是一致的。</p>
<p>但是在后序遍历中，我们先经过根节点，但是我们不会去访问它，而是会选择先访问它的右子节点。所以在这种情况下，我们会将根节点留在栈中不弹出，等到需要访问它的时候再出。</p>
<ul>
<li><p>关键点：考虑什么时候才能访问节点？</p>
<blockquote>
<p>发现是叶子节点，必然会访问。</p>
</blockquote>
</li>
<li><p>什么时候才需要访问根节点呢？</p>
<blockquote>
<p>访问完右子节点之后。</p>
</blockquote>
</li>
<li><p>我们如何获取这个信息？</p>
<blockquote>
<p>可以记录一下上一次访问的节点，然后判断一下当前经过的节点和上一次访问的节点是什么关系就好了。如果当前经过的节点的右子节点是上一次访问的节点，那么需要访问当前节点了。</p>
</blockquote>
</li>
</ul>
<p><strong>什么时候才能访问节点？</strong><br>1.当前经过节点是叶子节点。<br>2.当前经过节点的右子节点是上一次访问的节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;  </span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 用于记录上一次访问的节点</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">                s.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!s.isEmpty()) &#123;</span><br><span class="line">                cur = s.pop();</span><br><span class="line">                <span class="keyword">if</span>(cur.right==<span class="literal">null</span> || pre==cur.right) &#123; <span class="comment">// 访问节点的条件</span></span><br><span class="line">                    ans.add(cur.val); <span class="comment">// 访问</span></span><br><span class="line">                    pre = cur; <span class="comment">// 这一步是记录上一次访问的节点</span></span><br><span class="line">                    cur = <span class="literal">null</span>; <span class="comment">// 此处为了跳过下一次循环的访问左子节点的过程，直接进入栈的弹出阶段，因为但凡在栈中的节点，它们的左子节点都肯定被经过且已放入栈中。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// 不访问节点的条件</span></span><br><span class="line">                    s.push(cur); <span class="comment">// 将已弹出的根节点放回栈中</span></span><br><span class="line">                    cur = cur.right; <span class="comment">// 经过右子节点</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><blockquote>
<p><a href="https://www.jianshu.com/p/e136ec79235c/">https://www.jianshu.com/p/e136ec79235c/</a></p>
</blockquote>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>性质1：每个节点要么是黑色，要么是红色。<br>性质2：根节点是黑色。<br>性质3：每个叶子节点（NIL）是黑色。<br>性质4：每个红色结点的两个子结点一定都是黑色。<br>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</p>
<img src="/2023/08/15/lc-knowledge/rbt1.webp" width="50%">

<p>左旋<br><img src="/2023/08/15/lc-knowledge/rbt2.webp" width="90%"></p>
<p>右旋<br><img src="/2023/08/15/lc-knowledge/rbt3.webp" width="90%"></p>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>查找、增加、删除的时间复杂度都是O(log N)。</p>
<p>采用迭代器遍历一棵红黑树的时间复杂度是O(N)。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RBNode</span>&lt;T&gt; &#123;</span><br><span class="line">    T element;</span><br><span class="line">    RBNode&lt;T&gt; left;</span><br><span class="line">    RBNode&lt;T&gt; right;</span><br><span class="line">    RBNode&lt;T&gt; parent;</span><br><span class="line">    <span class="type">byte</span> color;<span class="comment">//0为红色，1为黑色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RBNode</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.element=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旋转父节点p的右儿子到p的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotateWithRightChild</span><span class="params">(RBNode&lt;T&gt; p)</span>&#123;</span><br><span class="line">        RBNode&lt;T&gt; x=p.right;</span><br><span class="line">        RBNode&lt;T&gt; g=p.parent;</span><br><span class="line">        <span class="comment">//break1: p的右换指，同时改父指针</span></span><br><span class="line">        <span class="comment">//tip1: x.left可能为nullNode,因为在处理的过程中对nullNode的parent</span></span><br><span class="line">        <span class="comment">//可以是任意值，所以这里不做处理</span></span><br><span class="line">        p.right=x.left;</span><br><span class="line">        x.left.parent=p;</span><br><span class="line">        <span class="comment">//break2: x的左换指，同时改父指针</span></span><br><span class="line">        x.left=p;</span><br><span class="line">        p.parent=x;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//break3: g的孩子更换为x</span></span><br><span class="line">        <span class="comment">//tip2: g为nullNode,说明p为root,旋转需要换新根</span></span><br><span class="line">        <span class="keyword">if</span>(g==nullNode) &#123;</span><br><span class="line">            root=x;<span class="comment">//旋转后换新根</span></span><br><span class="line">            root.parent=nullNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g.left==p) &#123;</span><br><span class="line">            g.left=x;</span><br><span class="line">            x.parent=g;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            g.right=x;</span><br><span class="line">            x.parent=g;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入一个节点值为x到红黑树根root中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T x)</span> &#123;</span><br><span class="line">    RBNode&lt;T&gt; p,cur;</span><br><span class="line">    p=nullNode;<span class="comment">//p指向cur的父节点</span></span><br><span class="line">    cur=root;</span><br><span class="line">    <span class="keyword">while</span>(cur!=nullNode) &#123;</span><br><span class="line">        p=cur;</span><br><span class="line">        <span class="keyword">if</span>(x.compareTo(cur.element)&lt;<span class="number">0</span>)</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x.compareTo(cur.element)&gt;<span class="number">0</span>)</span><br><span class="line">            cur=cur.right;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//找到重复的，不需要进行进一步操作</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此时p位置即为插入位置的父节点</span></span><br><span class="line">    RBNode&lt;T&gt; newX=getNewNode(x);<span class="comment">//新生成的节点为红色</span></span><br><span class="line">    newX.parent=p;<span class="comment">//即便p为nullNode也是符合的</span></span><br><span class="line">    <span class="keyword">if</span>(p==nullNode) &#123;</span><br><span class="line">        root=newX;</span><br><span class="line">        root.color=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//如果是根的话可以直接返回</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x.compareTo(p.element)&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        p.left=newX;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        p.right=newX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入完毕，开始调整红色新插入的x节点</span></span><br><span class="line">    <span class="keyword">if</span> (p.color==<span class="number">1</span>) <span class="comment">//其父节点是黑色，插入完毕</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//红红冲突，进行调整</span></span><br><span class="line">        insertBalance(newX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">![page-sort1](sort.jpg <span class="string">&quot;十大排序算法&quot;</span>)</span><br><span class="line"></span><br><span class="line">* 哪些稳定？</span><br><span class="line">&gt; 插冒归、桶计基</span><br><span class="line"></span><br><span class="line"># LRU缓存</span><br><span class="line">LRU算法（Least recently used）最近最少使用。</span><br><span class="line">## 性质</span><br><span class="line"><span class="number">1.</span> O(<span class="number">1</span>) 时间复杂度完成 get &amp; put 操作</span><br><span class="line"><span class="number">2.</span> get 完成时，需要将 get 的数据设置为最新</span><br><span class="line"><span class="number">3.</span> put 数据时，当超出容量时，需要将最久未使用的数据删除，并将 put 的数据设置为最新</span><br><span class="line">  </span><br><span class="line">## 算法和数据结构</span><br><span class="line">* 通过链表来标识出数据的新旧关系</span><br><span class="line">* 需要 O(<span class="number">1</span>) 的时间复杂度完成操作，则还需要使用哈希表来存储数据</span><br><span class="line">* put 插入新元素时，判断缓存中 元素 是否存在：</span><br><span class="line">  * 如果存在：把链表中的元素删除，map中的数据不用删除，再在链表头部插入元素，并更新map，直接返回；</span><br><span class="line">  * 缓存不存在+缓存没有满：直接把元素插入链表的表头，map中插入新元素；</span><br><span class="line">  * 缓存不存在+缓存满了：移除表尾元素（最旧未访问元素），将元素K插入表头，map中插入新元素；</span><br><span class="line">* get 方法是线程安全方法，可以用`<span class="keyword">synchronized</span>`关键字：</span><br><span class="line">* get 方法 获取元素时，判断 缓存中(map)是否存在该元素：</span><br><span class="line">  * 如果存在，把该节点删除并在链表头部插入该元素，并更新map 返回当前元素；</span><br><span class="line">  * 如果不存在，直接返回<span class="literal">null</span>。</span><br><span class="line">## 代码实现</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DLinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        DLinkedNode prev;</span><br><span class="line">        DLinkedNode next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">(<span class="type">int</span> _key, <span class="type">int</span> _value)</span> &#123;key = _key; value = _value;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> DLinkedNode head, tail;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">// 使用伪头部和伪尾部节点</span></span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 key 存在，先通过哈希表定位，再移到头部</span></span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 key 不存在，创建一个新的节点</span></span><br><span class="line">            <span class="type">DLinkedNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>(key, value);</span><br><span class="line">            <span class="comment">// 添加进哈希表</span></span><br><span class="line">            cache.put(key, newNode);</span><br><span class="line">            <span class="comment">// 添加至双向链表的头部</span></span><br><span class="line">            addToHead(newNode);</span><br><span class="line">            ++size;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">                <span class="comment">// 如果超出容量，删除双向链表的尾部节点</span></span><br><span class="line">                <span class="type">DLinkedNode</span> <span class="variable">tail</span> <span class="operator">=</span> removeTail();</span><br><span class="line">                <span class="comment">// 删除哈希表中对应的项</span></span><br><span class="line">                cache.remove(tail.key);</span><br><span class="line">                --size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span></span><br><span class="line">            node.value = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> DLinkedNode <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">res</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        removeNode(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h1><h2 id="暴力-O-n-2"><a href="#暴力-O-n-2" class="headerlink" title="暴力 O(n^2)"></a>暴力 O(n^2)</h2><p>对于数组中的每个元素，我们找出下雨后水能达到的最高位置，等于两边最大高度的较小值减去当前高度的值。</p>
<blockquote>
<p>时间复杂度： O(n2)。数组中的每个元素都需要向左向右扫描。<br>空间复杂度 O(1)的额外空间。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;height.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> left_max=<span class="number">0</span>,right_max=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                left_max=max(left_max,height[j]);<span class="comment">//向左遍历找最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=height.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                right_max=max(right_max,height[j]);<span class="comment">//向右遍历找最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans+=min(left_max,right_max)-height[i];<span class="comment">//遍历到当前元素所接雨水总数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划，可理解为“用空间换时间”，也就是说，空间复杂度增大，但是时间复杂度降低。（另外避免一些重复计算）<br>上文暴力解法，在内层for去寻找左右max的时候，其实是有重复计算的，而利用额外的空间去存储前一个状态的左右max则可以避免这些重复计算。</p>
<p>即：创建两个数组（l_max,r_max）去存储，l_max[i]和r_max[i]在index&#x3D;i的时候，其左右各自最高的高度。</p>
<blockquote>
<p>时间空间复杂度都是O(N).</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] l_max = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="type">int</span>[] r_max = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        l_max[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        r_max[len-<span class="number">1</span>] = height[len-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            l_max[i] = Math.max(height[i],l_max[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len-<span class="number">2</span>; i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            r_max[i] = Math.max(height[i],r_max[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            res += Math.min(l_max[i],r_max[i])-height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>从横向去考虑问题，用单调（递减）栈。<br>即：height[i]比stack的height[peek]小的时候才入栈，否则出栈，出栈则计算接水量。</p>
<blockquote>
<p>单调栈解法的时间复杂度O(N),空间复杂度也是O(N)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 单调“递减”栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap4</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] new_height = <span class="keyword">new</span> <span class="title class_">int</span>[len+<span class="number">2</span>];</span><br><span class="line">        System.arraycopy(height,<span class="number">0</span>,new_height,<span class="number">1</span>,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len+<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; new_height[i]&gt;new_height[stack.peek()])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">pk</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">                <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> (i - pk - <span class="number">1</span>) * (Math.min(new_height[pk], new_height[i]) - new_height[cur]);</span><br><span class="line">                res += area;</span><br><span class="line">                <span class="comment">// System.out.println(pk);</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>消息队列</title>
    <url>/2023/08/18/message-queue/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，有消息系统来确保信息的可靠专递。<br>消息发布者只管把消息发布到MQ中而不管谁来取，消息使用者只管从MQ中取消息而不管谁发布的。<br>发布者和使用者都不用知道对方的存在。<br><img src="/2023/08/18/message-queue/img1.webp" alt="page-img1" title="消息队列结构"></p>
<ul>
<li>Producer：消息生产者，负责产生和发送消息到 Broker；</li>
<li>Broker：消息处理中心。负责消息存储、确认、重试等，一般其中会包含多个 queue；</li>
<li>Consumer：消息消费者，负责从 Broker 中获取消息，并进行相应处理；</li>
</ul>
<h1 id="常见的消息队列"><a href="#常见的消息队列" class="headerlink" title="常见的消息队列"></a>常见的消息队列</h1><table>
<thead>
<tr>
<th>特性</th>
<th>ActiveMQ</th>
<th>RabbitMQ</th>
<th>Kafka</th>
<th>RocketMQ</th>
</tr>
</thead>
<tbody><tr>
<td>PRODUCER-COMSUMER</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>PUBLISH-SUBSCRIBE</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>REQUEST-REPLY</td>
<td>支持</td>
<td>支持</td>
<td>-</td>
<td>支持</td>
</tr>
<tr>
<td>API完备性</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>低（静态配置）</td>
</tr>
<tr>
<td>多语言支持</td>
<td>支持，JAVA优先</td>
<td>语言无关</td>
<td>支持，JAVA优先</td>
<td>支持</td>
</tr>
<tr>
<td>单机呑吐量</td>
<td>万级</td>
<td>万级</td>
<td>十万级</td>
<td>单机万级</td>
</tr>
<tr>
<td>消息延迟</td>
<td>-</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>-</td>
</tr>
<tr>
<td>可用性</td>
<td>高（主从）</td>
<td>高（主从）</td>
<td>非常高（分布式）</td>
<td>高</td>
</tr>
<tr>
<td>消息丢失</td>
<td>-</td>
<td>低</td>
<td>理论上不会丢失</td>
<td>-</td>
</tr>
<tr>
<td>消息重复</td>
<td>-</td>
<td>可控制</td>
<td>理论上会有重复</td>
<td>-</td>
</tr>
<tr>
<td>文档的完备性</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>中</td>
</tr>
<tr>
<td>提供快速入门</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>无</td>
</tr>
<tr>
<td>首次部署难度</td>
<td>-</td>
<td>低</td>
<td>中</td>
<td>高</td>
</tr>
</tbody></table>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li><strong>异步处理</strong>：消息队列的主要特点是异步处理，主要目的是减少请求响应时间，实现非核心流程异步化，提高系统响应性能。<blockquote>
<p>场景：将比较耗时而且不需要即时（同步）返回结果的操作，作为消息放入消息队列。</p>
</blockquote>
</li>
<li><strong>应用解耦</strong>：使用了消息队列后，只要保证消息格式不变，消息的发送方和接收方并不需要彼此联系，也不需要受对方的影响，即解耦。每个成员不必受其他成员影响，可以更独立自主，只通过消息队列MQ来联系。<blockquote>
<p>用户下订单流程，下订单后会发生扣库存这个动作，上游系统订单和下游系统扣库存，就可以通过上图的消息队列MQ来联系，扣库存异步化，从而实现订单系统与库存系统的应用解耦。</p>
</blockquote>
</li>
<li><strong>流量削锋</strong>：流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。<blockquote>
<p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p>
</blockquote>
</li>
<li><strong>日志处理</strong>：日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。</li>
<li><strong>消息通讯</strong>：消息队列一般都内置了高效的通信机制，因此也可以用于单纯的消息通讯，比如实现点对点消息队列或者聊天室等。</li>
</ul>
]]></content>
  </entry>
</search>
